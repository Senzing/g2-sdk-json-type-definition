// Code generated by jtd-codegen for Rust v0.2.1

use serde::{Deserialize, Serialize};
use serde_json::Value;

pub type Senzingapi = Option<Value>;

#[derive(Serialize, Deserialize)]
pub struct Address {
    #[serde(rename = "ADDR_CITY")]
    pub addrCity: String,

    #[serde(rename = "ADDR_COUNTRY")]
    pub addrCountry: String,

    #[serde(rename = "ADDR_FROM_DATE")]
    pub addrFromDate: String,

    #[serde(rename = "ADDR_FULL")]
    pub addrFull: String,

    #[serde(rename = "ADDR_LINE1")]
    pub addrLine1: String,

    #[serde(rename = "ADDR_LINE2")]
    pub addrLine2: String,

    #[serde(rename = "ADDR_LINE3")]
    pub addrLine3: String,

    #[serde(rename = "ADDR_LINE4")]
    pub addrLine4: String,

    #[serde(rename = "ADDR_LINE5")]
    pub addrLine5: String,

    #[serde(rename = "ADDR_LINE6")]
    pub addrLine6: String,

    #[serde(rename = "ADDR_POSTAL_CODE")]
    pub addrPostalCode: String,

    #[serde(rename = "ADDR_STATE")]
    pub addrState: String,

    #[serde(rename = "ADDR_THRU_DATE")]
    pub addrThruDate: String,

    #[serde(rename = "ADDR_TYPE")]
    pub addrType: String,
}

pub type Addresses = Vec<Address>;

#[derive(Serialize, Deserialize)]
pub struct AffectedEntity {
    #[serde(rename = "ENTITY_ID")]
    pub entityId: i32,
}

#[derive(Serialize, Deserialize)]
pub struct AttributeCounter {
    #[serde(rename = "ADDRESS")]
    pub address: f64,

    #[serde(rename = "ADDR_KEY")]
    pub addrKey: f64,

    #[serde(rename = "CALL_SIGN")]
    pub callSign: i32,

    #[serde(rename = "CITIZENSHIP")]
    pub citizenship: i32,

    #[serde(rename = "COUNTRY_OF_ASSOCIATION")]
    pub countryOfAssociation: i32,

    #[serde(rename = "DOB")]
    pub dob: f64,

    #[serde(rename = "DRLIC")]
    pub drlic: f64,

    #[serde(rename = "DUNS_NUMBER")]
    pub dunsNumber: i32,

    #[serde(rename = "EMAIL")]
    pub email: f64,

    #[serde(rename = "EMAIL_KEY")]
    pub emailKey: f64,

    #[serde(rename = "ENTITY_COUNT")]
    pub entityCount: i32,

    #[serde(rename = "ENTITY_SIZE")]
    pub entitySize: i32,

    #[serde(rename = "GENDER")]
    pub gender: f64,

    #[serde(rename = "ID_KEY")]
    pub idKey: f64,

    #[serde(rename = "IMO_NUMBER")]
    pub imoNumber: i32,

    #[serde(rename = "LEI_NUMBER")]
    pub leiNumber: i32,

    #[serde(rename = "LOGIN_ID")]
    pub loginId: f64,

    #[serde(rename = "MAX_RES_ENT_ID")]
    pub maxResEntId: i32,

    #[serde(rename = "MIN_RES_ENT_ID")]
    pub minResEntId: i32,

    #[serde(rename = "NAME")]
    pub name: f64,

    #[serde(rename = "NAME_KEY")]
    pub nameKey: f64,

    #[serde(rename = "NATIONALITY")]
    pub nationality: i32,

    #[serde(rename = "NATIONAL_ID")]
    pub nationalId: i32,

    #[serde(rename = "OFAC_ID")]
    pub ofacId: i32,

    #[serde(rename = "OTHER_ID")]
    pub otherId: f64,

    #[serde(rename = "PASSPORT")]
    pub passport: f64,

    #[serde(rename = "PHONE")]
    pub phone: f64,

    #[serde(rename = "PHONE_KEY")]
    pub phoneKey: f64,

    #[serde(rename = "RECORD_TYPE")]
    pub recordType: f64,

    #[serde(rename = "REGISTRATION_COUNTRY")]
    pub registrationCountry: i32,

    #[serde(rename = "REGISTRATION_DATE")]
    pub registrationDate: i32,

    #[serde(rename = "REL_ANCHOR")]
    pub relAnchor: i32,

    #[serde(rename = "REL_POINTER")]
    pub relPointer: i32,

    #[serde(rename = "SEARCH_KEY")]
    pub searchKey: f64,

    #[serde(rename = "SSN")]
    pub ssn: f64,

    #[serde(rename = "TAX_ID")]
    pub taxId: f64,

    #[serde(rename = "WEBSITE")]
    pub website: f64,
}

pub type AttributeCounters = Vec<AttributeCounter>;

#[derive(Serialize, Deserialize)]
pub struct CfgAttr {
    #[serde(rename = "ADVANCED")]
    pub advanced: String,

    #[serde(rename = "ATTR_CLASS")]
    pub attrClass: String,

    #[serde(rename = "ATTR_CODE")]
    pub attrCode: String,

    #[serde(rename = "ATTR_ID")]
    pub attrId: i32,

    #[serde(rename = "DEFAULT_VALUE")]
    pub defaultValue: String,

    #[serde(rename = "FELEM_CODE")]
    pub felemCode: String,

    #[serde(rename = "FELEM_REQ")]
    pub felemReq: String,

    #[serde(rename = "FTYPE_CODE")]
    pub ftypeCode: String,

    #[serde(rename = "INTERNAL")]
    pub internal: String,
}

#[derive(Serialize, Deserialize)]
pub struct CfgCfbom {
    #[serde(rename = "CFCALL_ID")]
    pub cfcallId: i32,

    #[serde(rename = "EXEC_ORDER")]
    pub execOrder: i32,

    #[serde(rename = "FELEM_ID")]
    pub felemId: i32,

    #[serde(rename = "FTYPE_ID")]
    pub ftypeId: i32,
}

#[derive(Serialize, Deserialize)]
pub struct CfgCfcall {
    #[serde(rename = "CFCALL_ID")]
    pub cfcallId: i32,

    #[serde(rename = "CFUNC_ID")]
    pub cfuncId: i32,

    #[serde(rename = "EXEC_ORDER")]
    pub execOrder: i32,

    #[serde(rename = "FTYPE_ID")]
    pub ftypeId: i32,
}

#[derive(Serialize, Deserialize)]
pub struct CfgCfrtn {
    #[serde(rename = "CFRTN_ID")]
    pub cfrtnId: i32,

    #[serde(rename = "CFUNC_ID")]
    pub cfuncId: i32,

    #[serde(rename = "CFUNC_RTNVAL")]
    pub cfuncRtnval: String,

    #[serde(rename = "CLOSE_SCORE")]
    pub closeScore: i32,

    #[serde(rename = "EXEC_ORDER")]
    pub execOrder: i32,

    #[serde(rename = "FTYPE_ID")]
    pub ftypeId: i32,

    #[serde(rename = "LIKELY_SCORE")]
    pub likelyScore: i32,

    #[serde(rename = "PLAUSIBLE_SCORE")]
    pub plausibleScore: i32,

    #[serde(rename = "SAME_SCORE")]
    pub sameScore: i32,

    #[serde(rename = "UN_LIKELY_SCORE")]
    pub unLikelyScore: i32,
}

#[derive(Serialize, Deserialize)]
pub struct CfgCfunc {
    #[serde(rename = "ANON_SUPPORT")]
    pub anonSupport: String,

    #[serde(rename = "CFUNC_CODE")]
    pub cfuncCode: String,

    #[serde(rename = "CFUNC_DESC")]
    pub cfuncDesc: String,

    #[serde(rename = "CFUNC_ID")]
    pub cfuncId: i32,

    #[serde(rename = "CONNECT_STR")]
    pub connectStr: String,

    #[serde(rename = "FUNC_LIB")]
    pub funcLib: String,

    #[serde(rename = "FUNC_VER")]
    pub funcVer: String,

    #[serde(rename = "JAVA_CLASS_NAME")]
    pub javaClassName: String,

    #[serde(rename = "LANGUAGE")]
    pub language: String,
}

#[derive(Serialize, Deserialize)]
pub struct CfgDfbom {
    #[serde(rename = "DFCALL_ID")]
    pub dfcallId: i32,

    #[serde(rename = "EXEC_ORDER")]
    pub execOrder: i32,

    #[serde(rename = "FELEM_ID")]
    pub felemId: i32,

    #[serde(rename = "FTYPE_ID")]
    pub ftypeId: i32,
}

#[derive(Serialize, Deserialize)]
pub struct CfgDfcall {
    #[serde(rename = "DFCALL_ID")]
    pub dfcallId: i32,

    #[serde(rename = "DFUNC_ID")]
    pub dfuncId: i32,

    #[serde(rename = "EXEC_ORDER")]
    pub execOrder: i32,

    #[serde(rename = "FTYPE_ID")]
    pub ftypeId: i32,
}

#[derive(Serialize, Deserialize)]
pub struct CfgDfunc {
    #[serde(rename = "ANON_SUPPORT")]
    pub anonSupport: String,

    #[serde(rename = "CONNECT_STR")]
    pub connectStr: String,

    #[serde(rename = "DFUNC_CODE")]
    pub dfuncCode: String,

    #[serde(rename = "DFUNC_DESC")]
    pub dfuncDesc: String,

    #[serde(rename = "DFUNC_ID")]
    pub dfuncId: i32,

    #[serde(rename = "FUNC_LIB")]
    pub funcLib: String,

    #[serde(rename = "FUNC_VER")]
    pub funcVer: String,

    #[serde(rename = "JAVA_CLASS_NAME")]
    pub javaClassName: String,

    #[serde(rename = "LANGUAGE")]
    pub language: String,
}

#[derive(Serialize, Deserialize)]
pub struct CfgDsrc {
    #[serde(rename = "CONVERSATIONAL")]
    pub conversational: String,

    #[serde(rename = "DSRC_CODE")]
    pub dsrcCode: String,

    #[serde(rename = "DSRC_DESC")]
    pub dsrcDesc: String,

    #[serde(rename = "DSRC_ID")]
    pub dsrcId: i32,

    #[serde(rename = "DSRC_RELY")]
    pub dsrcRely: i32,

    #[serde(rename = "RETENTION_LEVEL")]
    pub retentionLevel: String,
}

#[derive(Serialize, Deserialize)]
pub struct CfgDsrcInterest {
    #[serde(rename = "DSRC_ID")]
    pub dsrcId: i32,

    #[serde(rename = "INTEREST_FLAG")]
    pub interestFlag: String,

    #[serde(rename = "MAX_DEGREE")]
    pub maxDegree: i32,
}

#[derive(Serialize, Deserialize)]
pub struct CfgEbom {
    #[serde(rename = "ETYPE_ID")]
    pub etypeId: i32,

    #[serde(rename = "EXEC_ORDER")]
    pub execOrder: i32,

    #[serde(rename = "FTYPE_ID")]
    pub ftypeId: i32,

    #[serde(rename = "UTYPE_CODE")]
    pub utypeCode: String,
}

#[derive(Serialize, Deserialize)]
pub struct CfgEclass {
    #[serde(rename = "ECLASS_CODE")]
    pub eclassCode: String,

    #[serde(rename = "ECLASS_DESC")]
    pub eclassDesc: String,

    #[serde(rename = "ECLASS_ID")]
    pub eclassId: i32,

    #[serde(rename = "RESOLVE")]
    pub resolve: String,
}

#[derive(Serialize, Deserialize)]
pub struct CfgEfbom {
    #[serde(rename = "EFCALL_ID")]
    pub efcallId: i32,

    #[serde(rename = "EXEC_ORDER")]
    pub execOrder: i32,

    #[serde(rename = "FELEM_ID")]
    pub felemId: i32,

    #[serde(rename = "FELEM_REQ")]
    pub felemReq: String,

    #[serde(rename = "FTYPE_ID")]
    pub ftypeId: i32,
}

#[derive(Serialize, Deserialize)]
pub struct CfgEfcall {
    #[serde(rename = "EFCALL_ID")]
    pub efcallId: i32,

    #[serde(rename = "EFEAT_FTYPE_ID")]
    pub efeatFtypeId: i32,

    #[serde(rename = "EFUNC_ID")]
    pub efuncId: i32,

    #[serde(rename = "EXEC_ORDER")]
    pub execOrder: i32,

    #[serde(rename = "FELEM_ID")]
    pub felemId: i32,

    #[serde(rename = "FTYPE_ID")]
    pub ftypeId: i32,

    #[serde(rename = "IS_VIRTUAL")]
    pub isVirtual: String,
}

#[derive(Serialize, Deserialize)]
pub struct CfgEfunc {
    #[serde(rename = "CONNECT_STR")]
    pub connectStr: String,

    #[serde(rename = "EFUNC_CODE")]
    pub efuncCode: String,

    #[serde(rename = "EFUNC_DESC")]
    pub efuncDesc: String,

    #[serde(rename = "EFUNC_ID")]
    pub efuncId: i32,

    #[serde(rename = "FUNC_LIB")]
    pub funcLib: String,

    #[serde(rename = "FUNC_VER")]
    pub funcVer: String,

    #[serde(rename = "JAVA_CLASS_NAME")]
    pub javaClassName: String,

    #[serde(rename = "LANGUAGE")]
    pub language: String,
}

#[derive(Serialize, Deserialize)]
pub struct CfgErfrag {
    #[serde(rename = "ERFRAG_CODE")]
    pub erfragCode: String,

    #[serde(rename = "ERFRAG_DEPENDS")]
    pub erfragDepends: String,

    #[serde(rename = "ERFRAG_DESC")]
    pub erfragDesc: String,

    #[serde(rename = "ERFRAG_ID")]
    pub erfragId: i32,

    #[serde(rename = "ERFRAG_SOURCE")]
    pub erfragSource: String,
}

#[derive(Serialize, Deserialize)]
pub struct CfgErrule {
    #[serde(rename = "DISQ_ERFRAG_CODE")]
    pub disqErfragCode: String,

    #[serde(rename = "ERRULE_CODE")]
    pub erruleCode: String,

    #[serde(rename = "ERRULE_DESC")]
    pub erruleDesc: String,

    #[serde(rename = "ERRULE_ID")]
    pub erruleId: i32,

    #[serde(rename = "ERRULE_TIER")]
    pub erruleTier: i32,

    #[serde(rename = "QUAL_ERFRAG_CODE")]
    pub qualErfragCode: String,

    #[serde(rename = "REF_SCORE")]
    pub refScore: i32,

    #[serde(rename = "RELATE")]
    pub relate: String,

    #[serde(rename = "RESOLVE")]
    pub resolve: String,

    #[serde(rename = "RTYPE_ID")]
    pub rtypeId: i32,
}

#[derive(Serialize, Deserialize)]
pub struct CfgEtype {
    #[serde(rename = "ECLASS_ID")]
    pub eclassId: i32,

    #[serde(rename = "ETYPE_CODE")]
    pub etypeCode: String,

    #[serde(rename = "ETYPE_DESC")]
    pub etypeDesc: String,

    #[serde(rename = "ETYPE_ID")]
    pub etypeId: i32,
}

#[derive(Serialize, Deserialize)]
pub struct CfgFbom {
    #[serde(rename = "DERIVED")]
    pub derived: String,

    #[serde(rename = "DISPLAY_DELIM")]
    pub displayDelim: String,

    #[serde(rename = "DISPLAY_LEVEL")]
    pub displayLevel: i32,

    #[serde(rename = "EXEC_ORDER")]
    pub execOrder: i32,

    #[serde(rename = "FELEM_ID")]
    pub felemId: i32,

    #[serde(rename = "FTYPE_ID")]
    pub ftypeId: i32,
}

#[derive(Serialize, Deserialize)]
pub struct CfgFbovr {
    #[serde(rename = "ECLASS_ID")]
    pub eclassId: i32,

    #[serde(rename = "FTYPE_EXCL")]
    pub ftypeExcl: String,

    #[serde(rename = "FTYPE_FREQ")]
    pub ftypeFreq: String,

    #[serde(rename = "FTYPE_ID")]
    pub ftypeId: i32,

    #[serde(rename = "FTYPE_STAB")]
    pub ftypeStab: String,

    #[serde(rename = "UTYPE_CODE")]
    pub utypeCode: String,
}

#[derive(Serialize, Deserialize)]
pub struct CfgFclass {
    #[serde(rename = "FCLASS_CODE")]
    pub fclassCode: String,

    #[serde(rename = "FCLASS_DESC")]
    pub fclassDesc: String,

    #[serde(rename = "FCLASS_ID")]
    pub fclassId: i32,
}

#[derive(Serialize, Deserialize)]
pub struct CfgFelem {
    #[serde(rename = "DATA_TYPE")]
    pub dataType: String,

    #[serde(rename = "FELEM_CODE")]
    pub felemCode: String,

    #[serde(rename = "FELEM_DESC")]
    pub felemDesc: String,

    #[serde(rename = "FELEM_ID")]
    pub felemId: i32,

    #[serde(rename = "TOKENIZE")]
    pub tokenize: String,
}

#[derive(Serialize, Deserialize)]
pub struct CfgFtype {
    #[serde(rename = "ANONYMIZE")]
    pub anonymize: String,

    #[serde(rename = "DERIVATION")]
    pub derivation: String,

    #[serde(rename = "DERIVED")]
    pub derived: String,

    #[serde(rename = "FCLASS_ID")]
    pub fclassId: i32,

    #[serde(rename = "FTYPE_CODE")]
    pub ftypeCode: String,

    #[serde(rename = "FTYPE_DESC")]
    pub ftypeDesc: String,

    #[serde(rename = "FTYPE_EXCL")]
    pub ftypeExcl: String,

    #[serde(rename = "FTYPE_FREQ")]
    pub ftypeFreq: String,

    #[serde(rename = "FTYPE_ID")]
    pub ftypeId: i32,

    #[serde(rename = "FTYPE_STAB")]
    pub ftypeStab: String,

    #[serde(rename = "PERSIST_HISTORY")]
    pub persistHistory: String,

    #[serde(rename = "RTYPE_ID")]
    pub rtypeId: i32,

    #[serde(rename = "SHOW_IN_MATCH_KEY")]
    pub showInMatchKey: String,

    #[serde(rename = "USED_FOR_CAND")]
    pub usedForCand: String,

    #[serde(rename = "VERSION")]
    pub version: i32,
}

#[derive(Serialize, Deserialize)]
pub struct CfgGenericThreshold {
    #[serde(rename = "BEHAVIOR")]
    pub behavior: String,

    #[serde(rename = "CANDIDATE_CAP")]
    pub candidateCap: i32,

    #[serde(rename = "FTYPE_ID")]
    pub ftypeId: i32,

    #[serde(rename = "GPLAN_ID")]
    pub gplanId: i32,

    #[serde(rename = "SCORING_CAP")]
    pub scoringCap: i32,

    #[serde(rename = "SEND_TO_REDO")]
    pub sendToRedo: String,
}

#[derive(Serialize, Deserialize)]
pub struct CfgGplan {
    #[serde(rename = "GPLAN_CODE")]
    pub gplanCode: String,

    #[serde(rename = "GPLAN_DESC")]
    pub gplanDesc: String,

    #[serde(rename = "GPLAN_ID")]
    pub gplanId: i32,
}

#[derive(Serialize, Deserialize)]
pub struct CfgLens {
    #[serde(rename = "LENS_CODE")]
    pub lensCode: String,

    #[serde(rename = "LENS_DESC")]
    pub lensDesc: String,

    #[serde(rename = "LENS_ID")]
    pub lensId: i32,
}

pub type CfgLensrl = Vec<FixmeUnknown>;

#[derive(Serialize, Deserialize)]
pub struct CfgRclass {
    #[serde(rename = "IS_DISCLOSED")]
    pub isDisclosed: String,

    #[serde(rename = "RCLASS_CODE")]
    pub rclassCode: String,

    #[serde(rename = "RCLASS_DESC")]
    pub rclassDesc: String,

    #[serde(rename = "RCLASS_ID")]
    pub rclassId: i32,
}

#[derive(Serialize, Deserialize)]
pub struct CfgRtype {
    #[serde(rename = "BREAK_RES")]
    pub breakRes: String,

    #[serde(rename = "RCLASS_ID")]
    pub rclassId: i32,

    #[serde(rename = "REL_STRENGTH")]
    pub relStrength: i32,

    #[serde(rename = "RTYPE_CODE")]
    pub rtypeCode: String,

    #[serde(rename = "RTYPE_DESC")]
    pub rtypeDesc: String,

    #[serde(rename = "RTYPE_ID")]
    pub rtypeId: i32,
}

#[derive(Serialize, Deserialize)]
pub struct CfgSfcall {
    #[serde(rename = "EXEC_ORDER")]
    pub execOrder: i32,

    #[serde(rename = "FELEM_ID")]
    pub felemId: i32,

    #[serde(rename = "FTYPE_ID")]
    pub ftypeId: i32,

    #[serde(rename = "SFCALL_ID")]
    pub sfcallId: i32,

    #[serde(rename = "SFUNC_ID")]
    pub sfuncId: i32,
}

#[derive(Serialize, Deserialize)]
pub struct CfgSfunc {
    #[serde(rename = "CONNECT_STR")]
    pub connectStr: String,

    #[serde(rename = "FUNC_LIB")]
    pub funcLib: String,

    #[serde(rename = "FUNC_VER")]
    pub funcVer: String,

    #[serde(rename = "JAVA_CLASS_NAME")]
    pub javaClassName: String,

    #[serde(rename = "LANGUAGE")]
    pub language: String,

    #[serde(rename = "SFUNC_CODE")]
    pub sfuncCode: String,

    #[serde(rename = "SFUNC_DESC")]
    pub sfuncDesc: String,

    #[serde(rename = "SFUNC_ID")]
    pub sfuncId: i32,
}

#[derive(Serialize, Deserialize)]
pub struct ConfigBaseVersion {
    #[serde(rename = "BUILD_DATE")]
    pub buildDate: String,

    #[serde(rename = "BUILD_NUMBER")]
    pub buildNumber: String,

    #[serde(rename = "BUILD_VERSION")]
    pub buildVersion: String,

    #[serde(rename = "COMPATIBILITY_VERSION")]
    pub compatibilityVersion: CompatibilityVersion,

    #[serde(rename = "PRODUCT_NAME")]
    pub productName: String,

    #[serde(rename = "VERSION")]
    pub version: String,
}

#[derive(Serialize, Deserialize)]
pub struct CompatibilityVersion {
    #[serde(rename = "CONFIG_VERSION")]
    pub configVersion: String,
}

#[derive(Serialize, Deserialize)]
pub struct Config {
    #[serde(rename = "CONFIG_COMMENTS")]
    pub configComments: String,

    #[serde(rename = "CONFIG_ID")]
    pub configId: i32,

    #[serde(rename = "SYS_CREATE_DT")]
    pub sysCreateDt: String,
}

pub type Configs = Vec<Config>;

#[derive(Serialize, Deserialize)]
pub struct DataSource {
    /// The text representation of the datasource.
    #[serde(rename = "DSRC_CODE")]
    pub dsrcCode: String,

    /// The unique identifier of the datasource.
    #[serde(rename = "DSRC_ID")]
    pub dsrcId: i32,
}

/// A list of datasources.
pub type DataSources = Vec<DataSource>;

#[derive(Serialize, Deserialize)]
pub struct DiagnosticFetchNextEntityBySizeResponseXxx0 {
    #[serde(rename = "DSRC_CODE")]
    pub dsrcCode: String,

    #[serde(rename = "ENT_SRC_DESC")]
    pub entSrcDesc: String,

    #[serde(rename = "ENT_SRC_KEY")]
    pub entSrcKey: String,

    #[serde(rename = "ERRULE_CODE")]
    pub erruleCode: String,

    #[serde(rename = "ER_ID")]
    pub erId: i32,

    #[serde(rename = "ETYPE_CODE")]
    pub etypeCode: String,

    #[serde(rename = "JSON_DATA")]
    pub jsonData: JsonData,

    #[serde(rename = "MATCH_KEY")]
    pub matchKey: String,

    #[serde(rename = "OBS_ENT_ID")]
    pub obsEntId: i32,

    #[serde(rename = "RECORD_ID")]
    pub recordId: String,

    #[serde(rename = "RES_ENT_ID")]
    pub resEntId: i32,
}

pub type DiagnosticFetchNextEntityBySizeResponseXxx = Vec<DiagnosticFetchNextEntityBySizeResponseXxx0>;

pub type EntitiesByFeatureId = Vec<EntityByFeatureId>;

#[derive(Serialize, Deserialize)]
pub struct Entity {
    #[serde(rename = "RELATED_ENTITIES")]
    pub relatedEntities: RelatedEntities,

    #[serde(rename = "RESOLVED_ENTITY")]
    pub resolvedEntity: ResolvedEntity,
}

#[derive(Serialize, Deserialize)]
pub struct EntityByFeatureId {
    #[serde(rename = "LIB_FEAT_ID")]
    pub libFeatId: i32,

    #[serde(rename = "RES_ENT_ID")]
    pub resEntId: i32,

    #[serde(rename = "USAGE_TYPE")]
    pub usageType: String,
}

#[derive(Serialize, Deserialize)]
pub struct EntityBySize {
    #[serde(rename = "DSRC_CODE")]
    pub dsrcCode: String,

    #[serde(rename = "ENT_SRC_DESC")]
    pub entSrcDesc: String,

    #[serde(rename = "ENT_SRC_KEY")]
    pub entSrcKey: String,

    #[serde(rename = "ERRULE_CODE")]
    pub erruleCode: String,

    #[serde(rename = "ER_ID")]
    pub erId: i32,

    #[serde(rename = "ETYPE_CODE")]
    pub etypeCode: String,

    #[serde(rename = "JSON_DATA")]
    pub jsonData: JsonData,

    #[serde(rename = "MATCH_KEY")]
    pub matchKey: String,

    #[serde(rename = "OBS_ENT_ID")]
    pub obsEntId: i32,

    #[serde(rename = "RECORD_ID")]
    pub recordId: String,

    #[serde(rename = "RES_ENT_ID")]
    pub resEntId: i32,
}

#[derive(Serialize, Deserialize)]
pub struct EntityPath {
    #[serde(rename = "END_ENTITY_ID")]
    pub endEntityId: i32,

    #[serde(rename = "ENTITIES")]
    pub entities: Vec<i32>,

    #[serde(rename = "START_ENTITY_ID")]
    pub startEntityId: i32,
}

pub type EntityPaths = Vec<EntityPath>;

#[derive(Serialize, Deserialize)]
pub struct FeatureDescriptionValue {
    #[serde(rename = "CANDIDATE_CAP_REACHED")]
    pub candidateCapReached: String,

    #[serde(rename = "ENTITY_COUNT")]
    pub entityCount: i32,

    #[serde(rename = "FEAT_DESC")]
    pub featDesc: String,

    #[serde(rename = "LIB_FEAT_ID")]
    pub libFeatId: i32,

    #[serde(rename = "SCORING_CAP_REACHED")]
    pub scoringCapReached: String,

    #[serde(rename = "SUPPRESSED")]
    pub suppressed: String,

    #[serde(rename = "USED_FOR_CAND")]
    pub usedForCand: String,

    #[serde(rename = "USED_FOR_SCORING")]
    pub usedForScoring: String,
}

#[derive(Serialize, Deserialize)]
pub struct FeatureForAttribute {
    #[serde(rename = "FEAT_DESC")]
    pub featDesc: String,

    #[serde(rename = "FEAT_DESC_VALUES")]
    pub featDescValues: Vec<FeatureDescriptionValue>,

    #[serde(rename = "LIB_FEAT_ID")]
    pub libFeatId: i32,

    #[serde(rename = "USAGE_TYPE")]
    pub usageType: String,
}

#[derive(Serialize, Deserialize)]
pub struct FeatureScoreForAttribute {
    #[serde(rename = "CANDIDATE_FEAT")]
    pub candidateFeat: String,

    #[serde(rename = "CANDIDATE_FEAT_ID")]
    pub candidateFeatId: i32,

    #[serde(rename = "CANDIDATE_FEAT_USAGE_TYPE")]
    pub candidateFeatUsageType: String,

    #[serde(rename = "FULL_SCORE")]
    pub fullScore: i32,

    #[serde(rename = "GENERATION_MATCH")]
    pub generationMatch: i32,

    #[serde(rename = "GNR_FN")]
    pub gnrFn: i32,

    #[serde(rename = "GNR_GN")]
    pub gnrGn: i32,

    #[serde(rename = "GNR_ON")]
    pub gnrOn: i32,

    #[serde(rename = "GNR_SN")]
    pub gnrSn: i32,

    #[serde(rename = "INBOUND_FEAT")]
    pub inboundFeat: String,

    #[serde(rename = "INBOUND_FEAT_ID")]
    pub inboundFeatId: i32,

    #[serde(rename = "INBOUND_FEAT_USAGE_TYPE")]
    pub inboundFeatUsageType: String,

    #[serde(rename = "SCORE_BEHAVIOR")]
    pub scoreBehavior: String,

    #[serde(rename = "SCORE_BUCKET")]
    pub scoreBucket: String,
}

#[derive(Serialize, Deserialize)]
pub struct FeatureScores {
    #[serde(rename = "ACCOUNT_DOMAIN")]
    pub accountDomain: FeatureScoresForAttribute,

    #[serde(rename = "ACCOUNT_NUMBER")]
    pub accountNumber: FeatureScoresForAttribute,

    #[serde(rename = "ACCT_NUM")]
    pub acctNum: FeatureScoresForAttribute,

    #[serde(rename = "ADDRESS")]
    pub address: FeatureScoresForAttribute,

    #[serde(rename = "ADDRESS_LIST")]
    pub addressList: FeatureScoresForAttribute,

    #[serde(rename = "ADDR_FULL")]
    pub addrFull: FeatureScoresForAttribute,

    #[serde(rename = "ADDR_KEY")]
    pub addrKey: FeatureScoresForAttribute,

    #[serde(rename = "CELL_PHONE_NUMBER")]
    pub cellPhoneNumber: FeatureScoresForAttribute,

    #[serde(rename = "CITIZENSHIP")]
    pub citizenship: FeatureScoresForAttribute,

    #[serde(rename = "COUNTRY_OF_ASSOCIATION")]
    pub countryOfAssociation: FeatureScoresForAttribute,

    #[serde(rename = "DATA_SOURCE")]
    pub dataSource: FeatureScoresForAttribute,

    #[serde(rename = "DATE_OF_BIRTH")]
    pub dateOfBirth: FeatureScoresForAttribute,

    #[serde(rename = "DATE_OF_DEATH")]
    pub dateOfDeath: FeatureScoresForAttribute,

    #[serde(rename = "DOB")]
    pub dob: FeatureScoresForAttribute,

    #[serde(rename = "DOD")]
    pub dod: FeatureScoresForAttribute,

    #[serde(rename = "DRIVERS_LICENSE_NUMBER")]
    pub driversLicenseNumber: FeatureScoresForAttribute,

    #[serde(rename = "DRIVERS_LICENSE_STATE")]
    pub driversLicenseState: FeatureScoresForAttribute,

    #[serde(rename = "DRLIC")]
    pub drlic: FeatureScoresForAttribute,

    #[serde(rename = "DUNS_NUMBER")]
    pub dunsNumber: FeatureScoresForAttribute,

    #[serde(rename = "EMAIL")]
    pub email: FeatureScoresForAttribute,

    #[serde(rename = "EMAIL_ADDRESS")]
    pub emailAddress: FeatureScoresForAttribute,

    #[serde(rename = "EMAIL_KEY")]
    pub emailKey: FeatureScoresForAttribute,

    #[serde(rename = "EMPLOYER_NAME")]
    pub employerName: FeatureScoresForAttribute,

    #[serde(rename = "ENTITY_TYPE")]
    pub entityType: FeatureScoresForAttribute,

    #[serde(rename = "FACEBOOK")]
    pub facebook: FeatureScoresForAttribute,

    #[serde(rename = "GENDER")]
    pub gender: FeatureScoresForAttribute,

    #[serde(rename = "GROUP_ASSN_ID_NUMBER")]
    pub groupAssnIdNumber: FeatureScoresForAttribute,

    #[serde(rename = "GROUP_ASSN_ID_TYPE")]
    pub groupAssnIdType: FeatureScoresForAttribute,

    #[serde(rename = "GROUP_ASSOCIATION_ORG_NAME")]
    pub groupAssociationOrgName: FeatureScoresForAttribute,

    #[serde(rename = "GROUP_ASSOCIATION_TYPE")]
    pub groupAssociationType: FeatureScoresForAttribute,

    #[serde(rename = "ID_KEY")]
    pub idKey: FeatureScoresForAttribute,

    #[serde(rename = "INSTAGRAM")]
    pub instagram: FeatureScoresForAttribute,

    #[serde(rename = "LEI_NUMBER")]
    pub leiNumber: FeatureScoresForAttribute,

    #[serde(rename = "LINKEDIN")]
    pub linkedin: FeatureScoresForAttribute,

    #[serde(rename = "LOAD_ID")]
    pub loadId: FeatureScoresForAttribute,

    #[serde(rename = "LOGIN_ID")]
    pub loginId: FeatureScoresForAttribute,

    #[serde(rename = "NAME")]
    pub name: FeatureScoresForAttribute,

    #[serde(rename = "NAME_FULL")]
    pub nameFull: FeatureScoresForAttribute,

    #[serde(rename = "NAME_KEY")]
    pub nameKey: FeatureScoresForAttribute,

    #[serde(rename = "NAME_LIST")]
    pub nameList: FeatureScoresForAttribute,

    #[serde(rename = "NATIONALITY")]
    pub nationality: FeatureScoresForAttribute,

    #[serde(rename = "NATIONAL_ID")]
    pub nationalId: FeatureScoresForAttribute,

    #[serde(rename = "NATIONAL_ID_COUNTRY")]
    pub nationalIdCountry: FeatureScoresForAttribute,

    #[serde(rename = "NATIONAL_ID_NUMBER")]
    pub nationalIdNumber: FeatureScoresForAttribute,

    #[serde(rename = "NIN_COUNTRY")]
    pub ninCountry: FeatureScoresForAttribute,

    #[serde(rename = "NIN_NUMBER")]
    pub ninNumber: FeatureScoresForAttribute,

    #[serde(rename = "NPI_NUMBER")]
    pub npiNumber: FeatureScoresForAttribute,

    #[serde(rename = "OTHER_ID_COUNTRY")]
    pub otherIdCountry: FeatureScoresForAttribute,

    #[serde(rename = "OTHER_ID_NUMBER")]
    pub otherIdNumber: FeatureScoresForAttribute,

    #[serde(rename = "OTHER_ID_TYPE")]
    pub otherIdType: FeatureScoresForAttribute,

    #[serde(rename = "PASSPORT")]
    pub passport: FeatureScoresForAttribute,

    #[serde(rename = "PASSPORTS")]
    pub passports: FeatureScoresForAttribute,

    #[serde(rename = "PASSPORT_COUNTRY")]
    pub passportCountry: FeatureScoresForAttribute,

    #[serde(rename = "PASSPORT_NUMBER")]
    pub passportNumber: FeatureScoresForAttribute,

    #[serde(rename = "PHONE")]
    pub phone: FeatureScoresForAttribute,

    #[serde(rename = "PHONES")]
    pub phones: FeatureScoresForAttribute,

    #[serde(rename = "PHONE_KEY")]
    pub phoneKey: FeatureScoresForAttribute,

    #[serde(rename = "PLACE_OF_BIRTH")]
    pub placeOfBirth: FeatureScoresForAttribute,

    #[serde(rename = "PRIMARY_NAME_FIRST")]
    pub primaryNameFirst: FeatureScoresForAttribute,

    #[serde(rename = "PRIMARY_NAME_LAST")]
    pub primaryNameLast: FeatureScoresForAttribute,

    #[serde(rename = "PRIMARY_NAME_MIDDLE")]
    pub primaryNameMiddle: FeatureScoresForAttribute,

    #[serde(rename = "PRIMARY_NAME_ORG")]
    pub primaryNameOrg: FeatureScoresForAttribute,

    #[serde(rename = "PRIMARY_NAME_PREFIX")]
    pub primaryNamePrefix: FeatureScoresForAttribute,

    #[serde(rename = "PRIMARY_NAME_SUFFIX")]
    pub primaryNameSuffix: FeatureScoresForAttribute,

    #[serde(rename = "PRIMARY_PHONE_NUMBER")]
    pub primaryPhoneNumber: FeatureScoresForAttribute,

    #[serde(rename = "RECORD_TYPE")]
    pub recordType: FeatureScoresForAttribute,

    #[serde(rename = "REGISTRATION_COUNTRY")]
    pub registrationCountry: FeatureScoresForAttribute,

    #[serde(rename = "REGISTRATION_DATE")]
    pub registrationDate: FeatureScoresForAttribute,

    #[serde(rename = "REL_ANCHOR")]
    pub relAnchor: FeatureScoresForAttribute,

    #[serde(rename = "REL_ANCHOR_DOMAIN")]
    pub relAnchorDomain: FeatureScoresForAttribute,

    #[serde(rename = "REL_ANCHOR_KEY")]
    pub relAnchorKey: FeatureScoresForAttribute,

    #[serde(rename = "REL_LINK")]
    pub relLink: FeatureScoresForAttribute,

    #[serde(rename = "REL_POINTER")]
    pub relPointer: FeatureScoresForAttribute,

    #[serde(rename = "REL_POINTER_DOMAIN")]
    pub relPointerDomain: FeatureScoresForAttribute,

    #[serde(rename = "REL_POINTER_KEY")]
    pub relPointerKey: FeatureScoresForAttribute,

    #[serde(rename = "REL_POINTER_ROLE")]
    pub relPointerRole: FeatureScoresForAttribute,

    #[serde(rename = "SIGNAL")]
    pub signal: FeatureScoresForAttribute,

    #[serde(rename = "SKYPE")]
    pub skype: FeatureScoresForAttribute,

    #[serde(rename = "SOCIAL_HANDLE")]
    pub socialHandle: FeatureScoresForAttribute,

    #[serde(rename = "SOCIAL_NETWORK")]
    pub socialNetwork: FeatureScoresForAttribute,

    #[serde(rename = "SOURCE_ID")]
    pub sourceId: FeatureScoresForAttribute,

    #[serde(rename = "SSN")]
    pub ssn: FeatureScoresForAttribute,

    #[serde(rename = "SSN_LAST4")]
    pub ssnLast4: FeatureScoresForAttribute,

    #[serde(rename = "SSN_NUMBER")]
    pub ssnNumber: FeatureScoresForAttribute,

    #[serde(rename = "TANGO")]
    pub tango: FeatureScoresForAttribute,

    #[serde(rename = "TAX_ID_COUNTRY")]
    pub taxIdCountry: FeatureScoresForAttribute,

    #[serde(rename = "TAX_ID_NUMBER")]
    pub taxIdNumber: FeatureScoresForAttribute,

    #[serde(rename = "TAX_ID_TYPE")]
    pub taxIdType: FeatureScoresForAttribute,

    #[serde(rename = "TELEGRAM")]
    pub telegram: FeatureScoresForAttribute,

    #[serde(rename = "TRUSTED_ID_NUMBER")]
    pub trustedIdNumber: FeatureScoresForAttribute,

    #[serde(rename = "TRUSTED_ID_TYPE")]
    pub trustedIdType: FeatureScoresForAttribute,

    #[serde(rename = "TWITTER")]
    pub twitter: FeatureScoresForAttribute,

    #[serde(rename = "VIBER")]
    pub viber: FeatureScoresForAttribute,

    #[serde(rename = "WEBSITE_ADDRESS")]
    pub websiteAddress: FeatureScoresForAttribute,

    #[serde(rename = "WECHAT")]
    pub wechat: FeatureScoresForAttribute,

    #[serde(rename = "WHATSAPP")]
    pub whatsapp: FeatureScoresForAttribute,

    #[serde(rename = "WORK_PHONE_NUMBER")]
    pub workPhoneNumber: FeatureScoresForAttribute,

    #[serde(rename = "ZOOMROOM")]
    pub zoomroom: FeatureScoresForAttribute,
}

pub type FeatureScoresForAttribute = Vec<FeatureScoreForAttribute>;

pub type FeaturesForAttribute = Vec<FeatureForAttribute>;

#[derive(Serialize, Deserialize)]
pub struct FeaturesXxx {
    #[serde(rename = "ACCOUNT_DOMAIN")]
    pub accountDomain: FeaturesForAttribute,

    #[serde(rename = "ACCOUNT_NUMBER")]
    pub accountNumber: FeaturesForAttribute,

    #[serde(rename = "ACCT_NUM")]
    pub acctNum: FeaturesForAttribute,

    #[serde(rename = "ADDRESS")]
    pub address: FeaturesForAttribute,

    #[serde(rename = "ADDRESS_LIST")]
    pub addressList: FeaturesForAttribute,

    #[serde(rename = "ADDR_FULL")]
    pub addrFull: FeaturesForAttribute,

    #[serde(rename = "ADDR_KEY")]
    pub addrKey: FeaturesForAttribute,

    #[serde(rename = "CELL_PHONE_NUMBER")]
    pub cellPhoneNumber: FeaturesForAttribute,

    #[serde(rename = "CITIZENSHIP")]
    pub citizenship: FeaturesForAttribute,

    #[serde(rename = "COUNTRY_OF_ASSOCIATION")]
    pub countryOfAssociation: FeaturesForAttribute,

    #[serde(rename = "DATA_SOURCE")]
    pub dataSource: FeaturesForAttribute,

    #[serde(rename = "DATE_OF_BIRTH")]
    pub dateOfBirth: FeaturesForAttribute,

    #[serde(rename = "DATE_OF_DEATH")]
    pub dateOfDeath: FeaturesForAttribute,

    #[serde(rename = "DOB")]
    pub dob: FeaturesForAttribute,

    #[serde(rename = "DOD")]
    pub dod: FeaturesForAttribute,

    #[serde(rename = "DRIVERS_LICENSE_NUMBER")]
    pub driversLicenseNumber: FeaturesForAttribute,

    #[serde(rename = "DRIVERS_LICENSE_STATE")]
    pub driversLicenseState: FeaturesForAttribute,

    #[serde(rename = "DRLIC")]
    pub drlic: FeaturesForAttribute,

    #[serde(rename = "DUNS_NUMBER")]
    pub dunsNumber: FeaturesForAttribute,

    #[serde(rename = "EMAIL")]
    pub email: FeaturesForAttribute,

    #[serde(rename = "EMAIL_ADDRESS")]
    pub emailAddress: FeaturesForAttribute,

    #[serde(rename = "EMAIL_KEY")]
    pub emailKey: FeaturesForAttribute,

    #[serde(rename = "EMPLOYER_NAME")]
    pub employerName: FeaturesForAttribute,

    #[serde(rename = "ENTITY_TYPE")]
    pub entityType: FeaturesForAttribute,

    #[serde(rename = "FACEBOOK")]
    pub facebook: FeaturesForAttribute,

    #[serde(rename = "GENDER")]
    pub gender: FeaturesForAttribute,

    #[serde(rename = "GROUP_ASSN_ID_NUMBER")]
    pub groupAssnIdNumber: FeaturesForAttribute,

    #[serde(rename = "GROUP_ASSN_ID_TYPE")]
    pub groupAssnIdType: FeaturesForAttribute,

    #[serde(rename = "GROUP_ASSOCIATION_ORG_NAME")]
    pub groupAssociationOrgName: FeaturesForAttribute,

    #[serde(rename = "GROUP_ASSOCIATION_TYPE")]
    pub groupAssociationType: FeaturesForAttribute,

    #[serde(rename = "ID_KEY")]
    pub idKey: FeaturesForAttribute,

    #[serde(rename = "INSTAGRAM")]
    pub instagram: FeaturesForAttribute,

    #[serde(rename = "LEI_NUMBER")]
    pub leiNumber: FeaturesForAttribute,

    #[serde(rename = "LINKEDIN")]
    pub linkedin: FeaturesForAttribute,

    #[serde(rename = "LOAD_ID")]
    pub loadId: FeaturesForAttribute,

    #[serde(rename = "LOGIN_ID")]
    pub loginId: FeaturesForAttribute,

    #[serde(rename = "NAME")]
    pub name: FeaturesForAttribute,

    #[serde(rename = "NAME_FULL")]
    pub nameFull: FeaturesForAttribute,

    #[serde(rename = "NAME_KEY")]
    pub nameKey: FeaturesForAttribute,

    #[serde(rename = "NAME_LIST")]
    pub nameList: FeaturesForAttribute,

    #[serde(rename = "NATIONALITY")]
    pub nationality: FeaturesForAttribute,

    #[serde(rename = "NATIONAL_ID")]
    pub nationalId: FeaturesForAttribute,

    #[serde(rename = "NATIONAL_ID_COUNTRY")]
    pub nationalIdCountry: FeaturesForAttribute,

    #[serde(rename = "NATIONAL_ID_NUMBER")]
    pub nationalIdNumber: FeaturesForAttribute,

    #[serde(rename = "NIN_COUNTRY")]
    pub ninCountry: FeaturesForAttribute,

    #[serde(rename = "NIN_NUMBER")]
    pub ninNumber: FeaturesForAttribute,

    #[serde(rename = "NPI_NUMBER")]
    pub npiNumber: FeaturesForAttribute,

    #[serde(rename = "OTHER_ID_COUNTRY")]
    pub otherIdCountry: FeaturesForAttribute,

    #[serde(rename = "OTHER_ID_NUMBER")]
    pub otherIdNumber: FeaturesForAttribute,

    #[serde(rename = "OTHER_ID_TYPE")]
    pub otherIdType: FeaturesForAttribute,

    #[serde(rename = "PASSPORT")]
    pub passport: FeaturesForAttribute,

    #[serde(rename = "PASSPORTS")]
    pub passports: FeaturesForAttribute,

    #[serde(rename = "PASSPORT_COUNTRY")]
    pub passportCountry: FeaturesForAttribute,

    #[serde(rename = "PASSPORT_NUMBER")]
    pub passportNumber: FeaturesForAttribute,

    #[serde(rename = "PHONE")]
    pub phone: FeaturesForAttribute,

    #[serde(rename = "PHONES")]
    pub phones: FeaturesForAttribute,

    #[serde(rename = "PHONE_KEY")]
    pub phoneKey: FeaturesForAttribute,

    #[serde(rename = "PLACE_OF_BIRTH")]
    pub placeOfBirth: FeaturesForAttribute,

    #[serde(rename = "PRIMARY_NAME_FIRST")]
    pub primaryNameFirst: FeaturesForAttribute,

    #[serde(rename = "PRIMARY_NAME_LAST")]
    pub primaryNameLast: FeaturesForAttribute,

    #[serde(rename = "PRIMARY_NAME_MIDDLE")]
    pub primaryNameMiddle: FeaturesForAttribute,

    #[serde(rename = "PRIMARY_NAME_ORG")]
    pub primaryNameOrg: FeaturesForAttribute,

    #[serde(rename = "PRIMARY_NAME_PREFIX")]
    pub primaryNamePrefix: FeaturesForAttribute,

    #[serde(rename = "PRIMARY_NAME_SUFFIX")]
    pub primaryNameSuffix: FeaturesForAttribute,

    #[serde(rename = "PRIMARY_PHONE_NUMBER")]
    pub primaryPhoneNumber: FeaturesForAttribute,

    #[serde(rename = "RECORD_TYPE")]
    pub recordType: FeaturesForAttribute,

    #[serde(rename = "REGISTRATION_COUNTRY")]
    pub registrationCountry: FeaturesForAttribute,

    #[serde(rename = "REGISTRATION_DATE")]
    pub registrationDate: FeaturesForAttribute,

    #[serde(rename = "REL_ANCHOR")]
    pub relAnchor: FeaturesForAttribute,

    #[serde(rename = "REL_ANCHOR_DOMAIN")]
    pub relAnchorDomain: FeaturesForAttribute,

    #[serde(rename = "REL_ANCHOR_KEY")]
    pub relAnchorKey: FeaturesForAttribute,

    #[serde(rename = "REL_LINK")]
    pub relLink: FeaturesForAttribute,

    #[serde(rename = "REL_POINTER")]
    pub relPointer: FeaturesForAttribute,

    #[serde(rename = "REL_POINTER_DOMAIN")]
    pub relPointerDomain: FeaturesForAttribute,

    #[serde(rename = "REL_POINTER_KEY")]
    pub relPointerKey: FeaturesForAttribute,

    #[serde(rename = "REL_POINTER_ROLE")]
    pub relPointerRole: FeaturesForAttribute,

    #[serde(rename = "SIGNAL")]
    pub signal: FeaturesForAttribute,

    #[serde(rename = "SKYPE")]
    pub skype: FeaturesForAttribute,

    #[serde(rename = "SOCIAL_HANDLE")]
    pub socialHandle: FeaturesForAttribute,

    #[serde(rename = "SOCIAL_NETWORK")]
    pub socialNetwork: FeaturesForAttribute,

    #[serde(rename = "SOURCE_ID")]
    pub sourceId: FeaturesForAttribute,

    #[serde(rename = "SSN")]
    pub ssn: FeaturesForAttribute,

    #[serde(rename = "SSN_LAST4")]
    pub ssnLast4: FeaturesForAttribute,

    #[serde(rename = "SSN_NUMBER")]
    pub ssnNumber: FeaturesForAttribute,

    #[serde(rename = "TANGO")]
    pub tango: FeaturesForAttribute,

    #[serde(rename = "TAX_ID_COUNTRY")]
    pub taxIdCountry: FeaturesForAttribute,

    #[serde(rename = "TAX_ID_NUMBER")]
    pub taxIdNumber: FeaturesForAttribute,

    #[serde(rename = "TAX_ID_TYPE")]
    pub taxIdType: FeaturesForAttribute,

    #[serde(rename = "TELEGRAM")]
    pub telegram: FeaturesForAttribute,

    #[serde(rename = "TRUSTED_ID_NUMBER")]
    pub trustedIdNumber: FeaturesForAttribute,

    #[serde(rename = "TRUSTED_ID_TYPE")]
    pub trustedIdType: FeaturesForAttribute,

    #[serde(rename = "TWITTER")]
    pub twitter: FeaturesForAttribute,

    #[serde(rename = "VIBER")]
    pub viber: FeaturesForAttribute,

    #[serde(rename = "WEBSITE_ADDRESS")]
    pub websiteAddress: FeaturesForAttribute,

    #[serde(rename = "WECHAT")]
    pub wechat: FeaturesForAttribute,

    #[serde(rename = "WHATSAPP")]
    pub whatsapp: FeaturesForAttribute,

    #[serde(rename = "WORK_PHONE_NUMBER")]
    pub workPhoneNumber: FeaturesForAttribute,

    #[serde(rename = "ZOOMROOM")]
    pub zoomroom: FeaturesForAttribute,
}

#[derive(Serialize, Deserialize)]
pub struct FinalState {
    #[serde(rename = "NEED_REEVALUATION")]
    pub needReevaluation: i32,

    #[serde(rename = "VIRTUAL_ENTITIES")]
    pub virtualEntities: Vec<VirtualEntitySynopsis>,
}

pub type FixmeUnknown = String;

#[derive(Serialize, Deserialize)]
pub struct FocusRecord {
    #[serde(rename = "DATA_SOURCE")]
    pub dataSource: String,

    #[serde(rename = "RECORD_ID")]
    pub recordId: String,
}

pub type FocusRecords = Vec<FocusRecord>;

#[derive(Serialize, Deserialize)]
pub struct G2config {
    #[serde(rename = "CFG_ATTR")]
    pub cfgAttr: Vec<CfgAttr>,

    #[serde(rename = "CFG_CFBOM")]
    pub cfgCfbom: Vec<CfgCfbom>,

    #[serde(rename = "CFG_CFCALL")]
    pub cfgCfcall: Vec<CfgCfcall>,

    #[serde(rename = "CFG_CFRTN")]
    pub cfgCfrtn: Vec<CfgCfrtn>,

    #[serde(rename = "CFG_CFUNC")]
    pub cfgCfunc: Vec<CfgCfunc>,

    #[serde(rename = "CFG_DFBOM")]
    pub cfgDfbom: Vec<CfgDfbom>,

    #[serde(rename = "CFG_DFCALL")]
    pub cfgDfcall: Vec<CfgDfcall>,

    #[serde(rename = "CFG_DFUNC")]
    pub cfgDfunc: Vec<CfgDfunc>,

    #[serde(rename = "CFG_DSRC")]
    pub cfgDsrc: Vec<CfgDsrc>,

    #[serde(rename = "CFG_DSRC_INTEREST")]
    pub cfgDsrcInterest: Vec<CfgDsrcInterest>,

    #[serde(rename = "CFG_EBOM")]
    pub cfgEbom: Vec<CfgEbom>,

    #[serde(rename = "CFG_ECLASS")]
    pub cfgEclass: Vec<CfgEclass>,

    #[serde(rename = "CFG_EFBOM")]
    pub cfgEfbom: Vec<CfgEfbom>,

    #[serde(rename = "CFG_EFCALL")]
    pub cfgEfcall: Vec<CfgEfcall>,

    #[serde(rename = "CFG_EFUNC")]
    pub cfgEfunc: Vec<CfgEfunc>,

    #[serde(rename = "CFG_ERFRAG")]
    pub cfgErfrag: Vec<CfgErfrag>,

    #[serde(rename = "CFG_ERRULE")]
    pub cfgErrule: Vec<CfgErrule>,

    #[serde(rename = "CFG_ETYPE")]
    pub cfgEtype: Vec<CfgEtype>,

    #[serde(rename = "CFG_FBOM")]
    pub cfgFbom: Vec<CfgFbom>,

    #[serde(rename = "CFG_FBOVR")]
    pub cfgFbovr: Vec<CfgFbovr>,

    #[serde(rename = "CFG_FCLASS")]
    pub cfgFclass: Vec<CfgFclass>,

    #[serde(rename = "CFG_FELEM")]
    pub cfgFelem: Vec<CfgFelem>,

    #[serde(rename = "CFG_FTYPE")]
    pub cfgFtype: Vec<CfgFtype>,

    #[serde(rename = "CFG_GENERIC_THRESHOLD")]
    pub cfgGenericThreshold: Vec<CfgGenericThreshold>,

    #[serde(rename = "CFG_GPLAN")]
    pub cfgGplan: Vec<CfgGplan>,

    #[serde(rename = "CFG_LENS")]
    pub cfgLens: Vec<CfgLens>,

    #[serde(rename = "CFG_LENSRL")]
    pub cfgLensrl: Vec<CfgLensrl>,

    #[serde(rename = "CFG_RCLASS")]
    pub cfgRclass: Vec<CfgRclass>,

    #[serde(rename = "CFG_RTYPE")]
    pub cfgRtype: Vec<CfgRtype>,

    #[serde(rename = "CFG_SFCALL")]
    pub cfgSfcall: Vec<CfgSfcall>,

    #[serde(rename = "CFG_SFUNC")]
    pub cfgSfunc: Vec<CfgSfunc>,

    #[serde(rename = "CONFIG_BASE_VERSION")]
    pub configBaseVersion: ConfigBaseVersion,

    #[serde(rename = "SYS_OOM")]
    pub sysOom: Vec<SysOom>,
}

#[derive(Serialize, Deserialize)]
pub struct G2configAddDataSourceResponse {
    #[serde(rename = "DSRC_ID")]
    pub dsrcId: i32,
}

#[derive(Serialize, Deserialize)]
pub struct G2configListDataSourcesResponse {
    #[serde(rename = "DATA_SOURCES")]
    pub dataSources: DataSources,
}

#[derive(Serialize, Deserialize)]
pub struct G2configSaveResponse {
    #[serde(rename = "G2_CONFIG")]
    pub g2Config: G2config,
}

#[derive(Serialize, Deserialize)]
pub struct G2configmgrGetConfigListResponse {
    #[serde(rename = "CONFIGS")]
    pub configs: Configs,
}

#[derive(Serialize, Deserialize)]
pub struct G2configmgrGetConfigResponse {
    #[serde(rename = "G2_CONFIG")]
    pub g2Config: G2config,
}

#[derive(Serialize, Deserialize)]
pub struct G2diagnosticCheckDbperfResponse {
    #[serde(rename = "insertTime")]
    pub insertTime: i32,

    #[serde(rename = "numRecordsInserted")]
    pub numRecordsInserted: i32,
}

pub type G2diagnosticFetchNextEntityBySizeResponse = Vec<EntityBySize>;

#[derive(Serialize, Deserialize)]
pub struct G2diagnosticFindEntitiesByFeatureIdsResponseXxx0 {
    #[serde(rename = "LIB_FEAT_ID")]
    pub libFeatId: i32,

    #[serde(rename = "RES_ENT_ID")]
    pub resEntId: i32,

    #[serde(rename = "USAGE_TYPE")]
    pub usageType: String,
}

pub type G2diagnosticFindEntitiesByFeatureIdsResponseXxx = Vec<G2diagnosticFindEntitiesByFeatureIdsResponseXxx0>;

#[derive(Serialize, Deserialize)]
pub struct G2diagnosticGetDbinfoResponseDetail {
    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Type")]
    pub type_: String,
}

#[derive(Serialize, Deserialize)]
pub struct G2diagnosticGetDbinfoResponse {
    #[serde(rename = "Database Details")]
    pub databaseDetails: Vec<G2diagnosticGetDbinfoResponseDetail>,

    #[serde(rename = "Hybrid Mode")]
    pub hybridMode: bool,
}

#[derive(Serialize, Deserialize)]
pub struct G2diagnosticGetDataSourceCountsResponse0 {
    #[serde(rename = "DSRC_CODE")]
    pub dsrcCode: String,

    #[serde(rename = "DSRC_ID")]
    pub dsrcId: i32,

    #[serde(rename = "DSRC_RECORD_COUNT")]
    pub dsrcRecordCount: i32,

    #[serde(rename = "ETYPE_CODE")]
    pub etypeCode: String,

    #[serde(rename = "ETYPE_ID")]
    pub etypeId: i32,

    #[serde(rename = "OBS_ENT_COUNT")]
    pub obsEntCount: i32,
}

pub type G2diagnosticGetDataSourceCountsResponse = Vec<G2diagnosticGetDataSourceCountsResponse0>;

#[derive(Serialize, Deserialize)]
pub struct G2diagnosticGetEntityDetailsResponse0 {
    #[serde(rename = "DERIVED")]
    pub derived: String,

    #[serde(rename = "DSRC_CODE")]
    pub dsrcCode: String,

    #[serde(rename = "ERRULE_CODE")]
    pub erruleCode: String,

    #[serde(rename = "ETYPE_CODE")]
    pub etypeCode: String,

    #[serde(rename = "FEAT_DESC")]
    pub featDesc: String,

    #[serde(rename = "FTYPE_CODE")]
    pub ftypeCode: String,

    #[serde(rename = "MATCH_KEY")]
    pub matchKey: String,

    #[serde(rename = "OBS_ENT_ID")]
    pub obsEntId: i32,

    #[serde(rename = "RECORD_ID")]
    pub recordId: i32,

    #[serde(rename = "RES_ENT_ID")]
    pub resEntId: i32,

    #[serde(rename = "USAGE_TYPE")]
    pub usageType: String,
}

pub type G2diagnosticGetEntityDetailsResponse = Vec<G2diagnosticGetEntityDetailsResponse0>;

#[derive(Serialize, Deserialize)]
pub struct G2diagnosticGetEntityResumeResponse0 {
    #[serde(rename = "DSRC_CODE")]
    pub dsrcCode: String,

    #[serde(rename = "ENT_SRC_DESC")]
    pub entSrcDesc: String,

    #[serde(rename = "ERRULE_CODE")]
    pub erruleCode: String,

    #[serde(rename = "ETYPE_CODE")]
    pub etypeCode: String,

    #[serde(rename = "JSON_DATA")]
    pub jsonData: JsonData,

    #[serde(rename = "MATCH_KEY")]
    pub matchKey: String,

    #[serde(rename = "RECORD_ID")]
    pub recordId: String,

    #[serde(rename = "REL_ENT_ID")]
    pub relEntId: i32,

    #[serde(rename = "RES_ENT_ID")]
    pub resEntId: i32,
}

pub type G2diagnosticGetEntityResumeResponse = Vec<G2diagnosticGetEntityResumeResponse0>;

pub type G2diagnosticGetEntitySizeBreakdownResponse = AttributeCounters;

#[derive(Serialize, Deserialize)]
pub struct G2diagnosticGetFeatureResponseElements {
    #[serde(rename = "FELEM_CODE")]
    pub felemCode: String,

    #[serde(rename = "FELEM_VALUE")]
    pub felemValue: String,
}

#[derive(Serialize, Deserialize)]
pub struct G2diagnosticGetFeatureResponse {
    #[serde(rename = "ELEMENTS")]
    pub elements: Vec<G2diagnosticGetFeatureResponseElements>,

    #[serde(rename = "FTYPE_CODE")]
    pub ftypeCode: String,

    #[serde(rename = "LIB_FEAT_ID")]
    pub libFeatId: i32,
}

#[derive(Serialize, Deserialize)]
pub struct G2diagnosticGetGenericFeaturesResponse0 {
    #[serde(rename = "CANDIDATE_CAP_REACHED")]
    pub candidateCapReached: String,

    #[serde(rename = "ESTIMATED_COUNT")]
    pub estimatedCount: i32,

    #[serde(rename = "FEAT_DESC")]
    pub featDesc: String,

    #[serde(rename = "FTYPE_CODE")]
    pub ftypeCode: String,

    #[serde(rename = "LIB_FEAT_ID")]
    pub libFeatId: i32,

    #[serde(rename = "SCORING_CAP_REACHED")]
    pub scoringCapReached: String,
}

pub type G2diagnosticGetGenericFeaturesResponse = Vec<G2diagnosticGetGenericFeaturesResponse0>;

#[derive(Serialize, Deserialize)]
pub struct G2diagnosticGetMappingStatisticsResponse0 {
    #[serde(rename = "DERIVED")]
    pub derived: String,

    #[serde(rename = "DSRC_CODE")]
    pub dsrcCode: String,

    #[serde(rename = "ETYPE_CODE")]
    pub etypeCode: String,

    #[serde(rename = "FTYPE_CODE")]
    pub ftypeCode: String,

    #[serde(rename = "MAX_FEAT_DESC")]
    pub maxFeatDesc: String,

    #[serde(rename = "MIN_FEAT_DESC")]
    pub minFeatDesc: String,

    #[serde(rename = "REC_COUNT")]
    pub recCount: i32,

    #[serde(rename = "REC_PCT")]
    pub recPct: f64,

    #[serde(rename = "UNIQ_COUNT")]
    pub uniqCount: i32,

    #[serde(rename = "UNIQ_PCT")]
    pub uniqPct: f64,

    #[serde(rename = "USAGE_TYPE")]
    pub usageType: String,
}

pub type G2diagnosticGetMappingStatisticsResponse = Vec<G2diagnosticGetMappingStatisticsResponse0>;

#[derive(Serialize, Deserialize)]
pub struct G2diagnosticGetRelationshipDetailsResponse0 {
    #[serde(rename = "ERRULE_CODE")]
    pub erruleCode: String,

    #[serde(rename = "FEAT_DESC")]
    pub featDesc: String,

    #[serde(rename = "FTYPE_CODE")]
    pub ftypeCode: String,

    #[serde(rename = "MATCH_KEY")]
    pub matchKey: String,

    #[serde(rename = "RES_ENT_ID")]
    pub resEntId: i32,
}

pub type G2diagnosticGetRelationshipDetailsResponse = Vec<G2diagnosticGetRelationshipDetailsResponse0>;

#[derive(Serialize, Deserialize)]
pub struct G2diagnosticGetResolutionStatisticsResponseRawMatchKeys {
    #[serde(rename = "MATCH_KEY")]
    pub matchKey: String,
}

#[derive(Serialize, Deserialize)]
pub struct G2diagnosticGetResolutionStatisticsResponse0 {
    #[serde(rename = "ERRULE_CODE")]
    pub erruleCode: String,

    #[serde(rename = "ERRULE_ID")]
    pub erruleId: i32,

    #[serde(rename = "IS_AMBIGUOUS")]
    pub isAmbiguous: String,

    #[serde(rename = "MATCH_KEY")]
    pub matchKey: String,

    #[serde(rename = "MATCH_LEVEL")]
    pub matchLevel: i32,

    #[serde(rename = "MAX_RES_ENT_ID")]
    pub maxResEntId: i32,

    #[serde(rename = "MAX_RES_REL_ID")]
    pub maxResRelId: i32,

    #[serde(rename = "MIN_RES_ENT_ID")]
    pub minResEntId: i32,

    #[serde(rename = "MIN_RES_REL_ID")]
    pub minResRelId: i32,

    #[serde(rename = "RAW_MATCH_KEYS")]
    pub rawMatchKeys: Vec<G2diagnosticGetResolutionStatisticsResponseRawMatchKeys>,

    #[serde(rename = "RECORD_COUNT")]
    pub recordCount: i32,
}

pub type G2diagnosticGetResolutionStatisticsResponse = Vec<G2diagnosticGetResolutionStatisticsResponse0>;

pub type G2diagnosticStreamEntityListBySizeResponse = FixmeUnknown;

pub type G2engineAddRecordWithInfoResponse = WithInfo;

pub type G2engineAddRecordWithInfoWithReturnedRecordIdResponse = WithInfo;

#[derive(Serialize, Deserialize)]
pub struct G2engineCheckRecordResponseCheckRecordResponse {
    #[serde(rename = "CANDIDATE_MATCH")]
    pub candidateMatch: String,

    #[serde(rename = "DSRC_CODE")]
    pub dsrcCode: String,

    #[serde(rename = "ERRULE_CODE")]
    pub erruleCode: String,

    #[serde(rename = "ERRULE_ID")]
    pub erruleId: i32,

    #[serde(rename = "MATCH_KEY")]
    pub matchKey: String,

    #[serde(rename = "MATCH_LEVEL")]
    pub matchLevel: i32,

    #[serde(rename = "MATCH_LEVEL_CODE")]
    pub matchLevelCode: String,

    #[serde(rename = "NON_GENERIC_CANDIDATE_MATCH")]
    pub nonGenericCandidateMatch: String,

    #[serde(rename = "RECORD_ID")]
    pub recordId: String,
}

#[derive(Serialize, Deserialize)]
pub struct G2engineCheckRecordResponse {
    #[serde(rename = "CHECK_RECORD_RESPONSE")]
    pub checkRecordResponse: Vec<G2engineCheckRecordResponseCheckRecordResponse>,
}

pub type G2engineDeleteRecordWithInfoResponse = WithInfo;

#[derive(Serialize, Deserialize)]
pub struct G2engineExportConfigAndConfigIdResponse {
    #[serde(rename = "G2_CONFIG")]
    pub g2Config: G2config,
}

#[derive(Serialize, Deserialize)]
pub struct G2engineExportConfigResponse {
    #[serde(rename = "G2_CONFIG")]
    pub g2Config: G2config,
}

pub type G2engineFetchNextResponse = FixmeUnknown;

pub type G2engineFindInterestingEntitiesByEntityIdResponse = Interesting;

pub type G2engineFindInterestingEntitiesByRecordIdResponse = Interesting;

pub type G2engineFindNetworkByEntityIdv2response = Network;

pub type G2engineFindNetworkByEntityIdResponse = Network;

pub type G2engineFindNetworkByRecordIdv2response = Network;

pub type G2engineFindNetworkByRecordIdResponse = Network;

pub type G2engineFindPathByEntityIdv2response = Path;

pub type G2engineFindPathByEntityIdResponse = Path;

pub type G2engineFindPathByRecordIdv2response = Path;

pub type G2engineFindPathByRecordIdResponse = Path;

pub type G2engineFindPathExcludingByEntityIdv2response = Path;

pub type G2engineFindPathExcludingByEntityIdResponse = Path;

pub type G2engineFindPathExcludingByRecordIdv2response = Path;

pub type G2engineFindPathExcludingByRecordIdResponse = Path;

pub type G2engineFindPathIncludingSourceByEntityIdv2response = Path;

pub type G2engineFindPathIncludingSourceByEntityIdResponse = Path;

pub type G2engineFindPathIncludingSourceByRecordIdv2response = Path;

pub type G2engineFindPathIncludingSourceByRecordIdResponse = Path;

pub type G2engineGetEntityByEntityIdv2response = Entity;

pub type G2engineGetEntityByEntityIdResponse = Entity;

pub type G2engineGetEntityByRecordIdv2response = Entity;

pub type G2engineGetEntityByRecordIdResponse = Entity;

pub type G2engineGetRecordResponse = Record;

pub type G2engineGetRecordV2response = Record;

pub type G2engineGetRedoRecordResponse = FixmeUnknown;

pub type G2engineGetVirtualEntityByRecordIdv2response = VirtualEntity;

pub type G2engineGetVirtualEntityByRecordIdResponse = VirtualEntity;

pub type G2engineHowEntityByEntityIdv2response = How;

pub type G2engineHowEntityByEntityIdResponse = How;

pub type G2engineProcessRedoRecordResponse = FixmeUnknown;

pub type G2engineProcessRedoRecordWithInfoResponse = WithInfo;

pub type G2engineProcessWithInfoResponse = WithInfo;

pub type G2engineProcessWithResponseResizeResponse = Process;

pub type G2engineProcessWithResponseResponse = Process;

pub type G2engineReevaluateEntityWithInfoResponse = WithInfo;

pub type G2engineReevaluateRecordWithInfoResponse = WithInfo;

pub type G2engineReplaceRecordWithInfoResponse = WithInfo;

pub type G2engineSearchByAttributesResponse = Search;

pub type G2engineSearchByAttributesResponseXxx = EntitiesByFeatureId;

pub type G2engineSearchByAttributesV2response = Search;

pub type G2engineSearchByAttributesV3response = Search;

#[derive(Serialize, Deserialize)]
pub struct G2engineStatsResponseDuration {
    #[serde(rename = "PATTERN")]
    pub pattern: String,

    #[serde(rename = "TYPE")]
    pub type_: String,
}

#[derive(Serialize, Deserialize)]
pub struct G2engineStatsResponseReresolveTriggers {
    #[serde(rename = "abortRetry")]
    pub abortRetry: i32,

    #[serde(rename = "multipleResolvableCandidates")]
    pub multipleResolvableCandidates: i32,

    #[serde(rename = "resolveNewFeatures")]
    pub resolveNewFeatures: i32,

    #[serde(rename = "unresolveMovement")]
    pub unresolveMovement: i32,
}

#[derive(Serialize, Deserialize)]
pub struct G2engineStatsResponseUnresolveTriggers {
    #[serde(rename = "extensiveResolve")]
    pub extensiveResolve: i32,

    #[serde(rename = "normalResolve")]
    pub normalResolve: i32,
}

#[derive(Serialize, Deserialize)]
pub struct G2engineStatsResponseWorkloadExpressedFeatureCall {
    #[serde(rename = "EFCALL_ID")]
    pub efcallId: i32,

    #[serde(rename = "EFUNC_CODE")]
    pub efuncCode: String,

    #[serde(rename = "numCalls")]
    pub numCalls: i32,
}

#[derive(Serialize, Deserialize)]
pub struct G2engineStatsResponseWorkloadReresolveTriggers {
    #[serde(rename = "abortRetry")]
    pub abortRetry: i32,

    #[serde(rename = "multipleResolvableCandidates")]
    pub multipleResolvableCandidates: i32,

    #[serde(rename = "newFeatureFTypes")]
    pub newFeatureFtypes: AttributeCounters,

    #[serde(rename = "resolveNewFeatures")]
    pub resolveNewFeatures: i32,

    #[serde(rename = "unresolveMovement")]
    pub unresolveMovement: i32,
}

#[derive(Serialize, Deserialize)]
pub struct G2engineStatsResponseWorkloadSystemResourcesCurrResourceSystemLoad {
    #[serde(rename = "cpuIdle")]
    pub cpuIdle: f64,

    #[serde(rename = "cpuSoftIrq")]
    pub cpuSoftIrq: f64,

    #[serde(rename = "cpuSystem")]
    pub cpuSystem: f64,

    #[serde(rename = "cpuUser")]
    pub cpuUser: f64,

    #[serde(rename = "cpuWait")]
    pub cpuWait: f64,
}

#[derive(Serialize, Deserialize)]
pub struct G2engineStatsResponseWorkloadSystemResourcesCurrResource {
    #[serde(rename = "activeThreads")]
    pub activeThreads: i32,

    #[serde(rename = "availableMemory")]
    pub availableMemory: String,

    #[serde(rename = "systemLoad")]
    pub systemLoad: Vec<G2engineStatsResponseWorkloadSystemResourcesCurrResourceSystemLoad>,

    #[serde(rename = "workerThreads")]
    pub workerThreads: i32,
}

#[derive(Serialize, Deserialize)]
pub struct G2engineStatsResponseWorkloadSystemResourcesInitResource {
    #[serde(rename = "availableMemory")]
    pub availableMemory: String,

    #[serde(rename = "logicalCores")]
    pub logicalCores: i32,

    #[serde(rename = "physicalCores")]
    pub physicalCores: i32,

    #[serde(rename = "totalMemory")]
    pub totalMemory: String,
}

#[derive(Serialize, Deserialize)]
pub struct G2engineStatsResponseWorkloadSystemResources {
    #[serde(rename = "currResources")]
    pub currResources: Vec<G2engineStatsResponseWorkloadSystemResourcesCurrResource>,

    #[serde(rename = "initResources")]
    pub initResources: Vec<G2engineStatsResponseWorkloadSystemResourcesInitResource>,
}

#[derive(Serialize, Deserialize)]
pub struct G2engineStatsResponseWorkloadThreadState {
    #[serde(rename = "active")]
    pub active: i32,

    #[serde(rename = "dataLatchContention")]
    pub dataLatchContention: i32,

    #[serde(rename = "idle")]
    pub idle: i32,

    #[serde(rename = "loader")]
    pub loader: i32,

    #[serde(rename = "obsEntContention")]
    pub obsEntContention: i32,

    #[serde(rename = "resEntContention")]
    pub resEntContention: i32,

    #[serde(rename = "resolver")]
    pub resolver: i32,

    #[serde(rename = "scoring")]
    pub scoring: i32,

    #[serde(rename = "sqlExecuting")]
    pub sqlExecuting: i32,
}

#[derive(Serialize, Deserialize)]
pub struct G2engineStatsResponseWorkloadUnresolveTriggers {
    #[serde(rename = "ambiguousMultiResolve")]
    pub ambiguousMultiResolve: i32,

    #[serde(rename = "ambiguousNoResolve")]
    pub ambiguousNoResolve: i32,

    #[serde(rename = "extensiveResolve")]
    pub extensiveResolve: i32,

    #[serde(rename = "normalResolve")]
    pub normalResolve: i32,

    #[serde(rename = "relLink")]
    pub relLink: i32,

    #[serde(rename = "update")]
    pub update: i32,
}

#[derive(Serialize, Deserialize)]
pub struct G2engineStatsResponseWorkload {
    #[serde(rename = "CorruptEntityTestDiagnosis")]
    pub corruptEntityTestDiagnosis: FixmeUnknown,

    #[serde(rename = "abortedUnresolve")]
    pub abortedUnresolve: i32,

    #[serde(rename = "actualAmbiguousTest")]
    pub actualAmbiguousTest: i32,

    #[serde(rename = "addedRecords")]
    pub addedRecords: i32,

    #[serde(rename = "apiVersion")]
    pub apiVersion: String,

    #[serde(rename = "cacheHit")]
    pub cacheHit: AttributeCounters,

    #[serde(rename = "cacheMiss")]
    pub cacheMiss: AttributeCounters,

    #[serde(rename = "cachedAmbiguousTest")]
    pub cachedAmbiguousTest: i32,

    #[serde(rename = "candidateBuilders")]
    pub candidateBuilders: AttributeCounters,

    #[serde(rename = "candidates")]
    pub candidates: i32,

    #[serde(rename = "deletedRecords")]
    pub deletedRecords: i32,

    #[serde(rename = "duration")]
    pub duration: i32,

    #[serde(rename = "expressedFeatureCalls")]
    pub expressedFeatureCalls: Vec<G2engineStatsResponseWorkloadExpressedFeatureCall>,

    #[serde(rename = "expressedFeaturesCreated")]
    pub expressedFeaturesCreated: AttributeCounters,

    #[serde(rename = "filteredObsFeat")]
    pub filteredObsFeat: i32,

    #[serde(rename = "genericDetect")]
    pub genericDetect: AttributeCounters,

    #[serde(rename = "gnrScorersUsed")]
    pub gnrScorersUsed: i32,

    #[serde(rename = "highContentionFeat")]
    pub highContentionFeat: AttributeCounters,

    #[serde(rename = "highContentionResEnt")]
    pub highContentionResEnt: AttributeCounters,

    #[serde(rename = "latchContention")]
    pub latchContention: AttributeCounters,

    #[serde(rename = "libFeatCacheHit")]
    pub libFeatCacheHit: i32,

    #[serde(rename = "libFeatCacheMiss")]
    pub libFeatCacheMiss: i32,

    #[serde(rename = "loadedRecords")]
    pub loadedRecords: i32,

    #[serde(rename = "redoTriggers")]
    pub redoTriggers: AttributeCounters,

    #[serde(rename = "reducedScoredFeatureType")]
    pub reducedScoredFeatureType: AttributeCounters,

    #[serde(rename = "reevaluations")]
    pub reevaluations: i32,

    #[serde(rename = "repairedEntities")]
    pub repairedEntities: i32,

    #[serde(rename = "reresolveSkipped")]
    pub reresolveSkipped: i32,

    #[serde(rename = "reresolveTriggers")]
    pub reresolveTriggers: G2engineStatsResponseWorkloadReresolveTriggers,

    #[serde(rename = "resFeatStatCacheHit")]
    pub resFeatStatCacheHit: i32,

    #[serde(rename = "resFeatStatCacheMiss")]
    pub resFeatStatCacheMiss: i32,

    #[serde(rename = "resFeatStatUpdate")]
    pub resFeatStatUpdate: i32,

    #[serde(rename = "retries")]
    pub retries: i32,

    #[serde(rename = "scoredPairs")]
    pub scoredPairs: AttributeCounters,

    #[serde(rename = "suppressedCandidateBuilders")]
    pub suppressedCandidateBuilders: AttributeCounters,

    #[serde(rename = "suppressedDisclosedRelationshipDomainCount")]
    pub suppressedDisclosedRelationshipDomainCount: i32,

    #[serde(rename = "suppressedScoredFeatureType")]
    pub suppressedScoredFeatureType: AttributeCounters,

    #[serde(rename = "systemResources")]
    pub systemResources: G2engineStatsResponseWorkloadSystemResources,

    #[serde(rename = "threadState")]
    pub threadState: G2engineStatsResponseWorkloadThreadState,

    #[serde(rename = "unresolveTest")]
    pub unresolveTest: i32,

    #[serde(rename = "unresolveTriggers")]
    pub unresolveTriggers: G2engineStatsResponseWorkloadUnresolveTriggers,
}

#[derive(Serialize, Deserialize)]
pub struct G2engineStatsResponse {
    #[serde(rename = "MISSING_RES_ENT")]
    pub missingResEnt: i32,

    #[serde(rename = "MISSING_RES_ENT_AND_OKEY")]
    pub missingResEntAndOkey: i32,

    #[serde(rename = "abortedUnresolve")]
    pub abortedUnresolve: i32,

    #[serde(rename = "actualAmbiguousTest")]
    pub actualAmbiguousTest: i32,

    #[serde(rename = "addedRecords")]
    pub addedRecords: i32,

    #[serde(rename = "cacheHit")]
    pub cacheHit: AttributeCounters,

    #[serde(rename = "candidateBuilders")]
    pub candidateBuilders: AttributeCounters,

    #[serde(rename = "candidates")]
    pub candidates: i32,

    #[serde(rename = "deletedRecords")]
    pub deletedRecords: i32,

    #[serde(rename = "duration")]
    pub duration: G2engineStatsResponseDuration,

    #[serde(rename = "filteredObsFeat")]
    pub filteredObsFeat: i32,

    #[serde(rename = "genericDetect")]
    pub genericDetect: AttributeCounters,

    #[serde(rename = "latchContention")]
    pub latchContention: AttributeCounters,

    #[serde(rename = "loadedRecords")]
    pub loadedRecords: i32,

    #[serde(rename = "redoTriggers")]
    pub redoTriggers: AttributeCounters,

    #[serde(rename = "reducedScoredFeatureType")]
    pub reducedScoredFeatureType: AttributeCounters,

    #[serde(rename = "reevaluations")]
    pub reevaluations: i32,

    #[serde(rename = "repairedEntities")]
    pub repairedEntities: i32,

    #[serde(rename = "reresolveSkipped")]
    pub reresolveSkipped: i32,

    #[serde(rename = "reresolveTriggers")]
    pub reresolveTriggers: G2engineStatsResponseReresolveTriggers,

    #[serde(rename = "retries")]
    pub retries: i32,

    #[serde(rename = "scoredPairs")]
    pub scoredPairs: AttributeCounters,

    #[serde(rename = "suppressedCandidateBuilders")]
    pub suppressedCandidateBuilders: AttributeCounters,

    #[serde(rename = "suppressedScoredFeatureType")]
    pub suppressedScoredFeatureType: AttributeCounters,

    #[serde(rename = "unresolveTest")]
    pub unresolveTest: i32,

    #[serde(rename = "unresolveTriggers")]
    pub unresolveTriggers: G2engineStatsResponseUnresolveTriggers,

    #[serde(rename = "workload")]
    pub workload: G2engineStatsResponseWorkload,
}

pub type G2engineStreamExportJsonentityReportResponse = FixmeUnknown;

pub type G2engineWhyEntitiesResponse = WhyEntities;

pub type G2engineWhyEntitiesV2response = WhyEntities;

pub type G2engineWhyEntityByEntityIdv2response = WhyEntity;

pub type G2engineWhyEntityByEntityIdResponse = WhyEntity;

pub type G2engineWhyEntityByRecordIdv2response = WhyEntity;

pub type G2engineWhyEntityByRecordIdResponse = WhyEntity;

pub type G2engineWhyRecordsResponse = WhyRecords;

pub type G2engineWhyRecordsV2response = WhyRecords;

#[derive(Serialize, Deserialize)]
pub struct G2productLicenseResponse {
    #[serde(rename = "billing")]
    pub billing: String,

    #[serde(rename = "contract")]
    pub contract: String,

    #[serde(rename = "customer")]
    pub customer: String,

    #[serde(rename = "expireDate")]
    pub expireDate: String,

    #[serde(rename = "issueDate")]
    pub issueDate: String,

    #[serde(rename = "licenseLevel")]
    pub licenseLevel: String,

    #[serde(rename = "licenseType")]
    pub licenseType: String,

    #[serde(rename = "recordLimit")]
    pub recordLimit: i32,
}

#[derive(Serialize, Deserialize)]
pub struct G2productVersionResponse {
    #[serde(rename = "BUILD_DATE")]
    pub buildDate: String,

    #[serde(rename = "BUILD_NUMBER")]
    pub buildNumber: String,

    #[serde(rename = "BUILD_VERSION")]
    pub buildVersion: String,

    #[serde(rename = "COMPATIBILITY_VERSION")]
    pub compatibilityVersion: CompatibilityVersion,

    #[serde(rename = "PRODUCT_NAME")]
    pub productName: String,

    #[serde(rename = "SCHEMA_VERSION")]
    pub schemaVersion: SchemaVersion,

    #[serde(rename = "VERSION")]
    pub version: String,
}

#[derive(Serialize, Deserialize)]
pub struct How {
    #[serde(rename = "HOW_RESULTS")]
    pub howResults: HowResults,
}

#[derive(Serialize, Deserialize)]
pub struct HowResults {
    #[serde(rename = "FINAL_STATE")]
    pub finalState: FinalState,

    #[serde(rename = "RESOLUTION_STEPS")]
    pub resolutionSteps: ResolutionSteps,
}

#[derive(Serialize, Deserialize)]
pub struct Interesting {
    #[serde(rename = "INTERESTING_ENTITIES")]
    pub interestingEntities: InterestingEntities,
}

#[derive(Serialize, Deserialize)]
pub struct InterestingEntities {
    #[serde(rename = "ENTITIES")]
    pub entities: Vec<InterestingEntity>,

    #[serde(rename = "NOTICES")]
    pub notices: Notices,
}

#[derive(Serialize, Deserialize)]
pub struct InterestingEntitySampleRecords {
    #[serde(rename = "DATA_SOURCE")]
    pub dataSource: String,

    #[serde(rename = "FLAGS")]
    pub flags: Vec<String>,

    #[serde(rename = "RECORD_ID")]
    pub recordId: String,
}

#[derive(Serialize, Deserialize)]
pub struct InterestingEntity {
    #[serde(rename = "DEGREES")]
    pub degrees: i32,

    #[serde(rename = "ENTITY_ID")]
    pub entityId: i32,

    #[serde(rename = "FLAGS")]
    pub flags: Vec<String>,

    #[serde(rename = "SAMPLE_RECORDS")]
    pub sampleRecords: Vec<InterestingEntitySampleRecords>,
}

#[derive(Serialize, Deserialize)]
pub struct JsonDataAcctNum {
    #[serde(rename = "ACCOUNT_DOMAIN")]
    pub accountDomain: String,

    #[serde(rename = "ACCOUNT_NUMBER")]
    pub accountNumber: String,
}

#[derive(Serialize, Deserialize)]
pub struct JsonDataSsn {
    #[serde(rename = "PASSPORT_NUMBER")]
    pub passportNumber: String,

    #[serde(rename = "SSN_NUMBER")]
    pub ssnNumber: String,
}

#[derive(Serialize, Deserialize)]
pub struct JsonDataSsnLast4 {
    #[serde(rename = "SSN_LAST4")]
    pub ssnLast4: i32,
}

#[derive(Serialize, Deserialize)]
pub struct JsonData {
    #[serde(rename = "ACCOUNT_DOMAIN")]
    pub accountDomain: String,

    #[serde(rename = "ACCOUNT_NUMBER")]
    pub accountNumber: String,

    #[serde(rename = "ACCT_NUM")]
    pub acctNum: Vec<JsonDataAcctNum>,

    #[serde(rename = "ADDRESS")]
    pub address: String,

    #[serde(rename = "ADDRESS_LIST")]
    pub addressList: Addresses,

    #[serde(rename = "ADDR_FULL")]
    pub addrFull: String,

    #[serde(rename = "ADDR_KEY")]
    pub addrKey: String,

    #[serde(rename = "CELL_PHONE_NUMBER")]
    pub cellPhoneNumber: String,

    #[serde(rename = "CITIZENSHIP")]
    pub citizenship: String,

    #[serde(rename = "COUNTRY_OF_ASSOCIATION")]
    pub countryOfAssociation: String,

    #[serde(rename = "DATA_SOURCE")]
    pub dataSource: String,

    #[serde(rename = "DATE_OF_BIRTH")]
    pub dateOfBirth: String,

    #[serde(rename = "DATE_OF_DEATH")]
    pub dateOfDeath: String,

    #[serde(rename = "DOB")]
    pub dob: String,

    #[serde(rename = "DOD")]
    pub dod: String,

    #[serde(rename = "DRIVERS_LICENSE_NUMBER")]
    pub driversLicenseNumber: String,

    #[serde(rename = "DRIVERS_LICENSE_STATE")]
    pub driversLicenseState: String,

    #[serde(rename = "DRLIC")]
    pub drlic: String,

    #[serde(rename = "DSRC_ACTION")]
    pub dsrcAction: String,

    #[serde(rename = "DSRC_CODE")]
    pub dsrcCode: String,

    #[serde(rename = "DUNS_NUMBER")]
    pub dunsNumber: String,

    #[serde(rename = "EMAIL")]
    pub email: String,

    #[serde(rename = "EMAIL_ADDRESS")]
    pub emailAddress: String,

    #[serde(rename = "EMAIL_KEY")]
    pub emailKey: String,

    #[serde(rename = "EMPLOYER_NAME")]
    pub employerName: String,

    #[serde(rename = "ENTITY_TYPE")]
    pub entityType: String,

    #[serde(rename = "ENT_SRC_DESC")]
    pub entSrcDesc: String,

    #[serde(rename = "ENT_SRC_KEY")]
    pub entSrcKey: String,

    #[serde(rename = "ETYPE_CODE")]
    pub etypeCode: String,

    #[serde(rename = "FACEBOOK")]
    pub facebook: String,

    #[serde(rename = "GENDER")]
    pub gender: String,

    #[serde(rename = "GROUP_ASSN_ID_NUMBER")]
    pub groupAssnIdNumber: String,

    #[serde(rename = "GROUP_ASSN_ID_TYPE")]
    pub groupAssnIdType: String,

    #[serde(rename = "GROUP_ASSOCIATION_ORG_NAME")]
    pub groupAssociationOrgName: String,

    #[serde(rename = "GROUP_ASSOCIATION_TYPE")]
    pub groupAssociationType: String,

    #[serde(rename = "ID_KEY")]
    pub idKey: String,

    #[serde(rename = "INSTAGRAM")]
    pub instagram: String,

    #[serde(rename = "LEI_NUMBER")]
    pub leiNumber: String,

    #[serde(rename = "LINKEDIN")]
    pub linkedin: String,

    #[serde(rename = "LOAD_ID")]
    pub loadId: String,

    #[serde(rename = "LOGIN_ID")]
    pub loginId: String,

    #[serde(rename = "NAME")]
    pub name: Names,

    #[serde(rename = "NAME_FULL")]
    pub nameFull: String,

    #[serde(rename = "NAME_KEY")]
    pub nameKey: String,

    #[serde(rename = "NAME_LIST")]
    pub nameList: Names,

    #[serde(rename = "NATIONALITY")]
    pub nationality: String,

    #[serde(rename = "NATIONAL_ID")]
    pub nationalId: String,

    #[serde(rename = "NATIONAL_ID_COUNTRY")]
    pub nationalIdCountry: String,

    #[serde(rename = "NATIONAL_ID_NUMBER")]
    pub nationalIdNumber: String,

    #[serde(rename = "NIN_COUNTRY")]
    pub ninCountry: String,

    #[serde(rename = "NIN_NUMBER")]
    pub ninNumber: String,

    #[serde(rename = "NPI_NUMBER")]
    pub npiNumber: String,

    #[serde(rename = "OBS_SRC_KEY")]
    pub obsSrcKey: String,

    #[serde(rename = "OTHER_ID_COUNTRY")]
    pub otherIdCountry: String,

    #[serde(rename = "OTHER_ID_NUMBER")]
    pub otherIdNumber: String,

    #[serde(rename = "OTHER_ID_TYPE")]
    pub otherIdType: String,

    #[serde(rename = "PASSPORT")]
    pub passport: String,

    #[serde(rename = "PASSPORTS")]
    pub passports: Passports,

    #[serde(rename = "PASSPORT_COUNTRY")]
    pub passportCountry: String,

    #[serde(rename = "PASSPORT_NUMBER")]
    pub passportNumber: String,

    #[serde(rename = "PHONE")]
    pub phone: String,

    #[serde(rename = "PHONES")]
    pub phones: Phones,

    #[serde(rename = "PHONE_KEY")]
    pub phoneKey: String,

    #[serde(rename = "PLACE_OF_BIRTH")]
    pub placeOfBirth: String,

    #[serde(rename = "PRIMARY_NAME_FIRST")]
    pub primaryNameFirst: String,

    #[serde(rename = "PRIMARY_NAME_LAST")]
    pub primaryNameLast: String,

    #[serde(rename = "PRIMARY_NAME_MIDDLE")]
    pub primaryNameMiddle: String,

    #[serde(rename = "PRIMARY_NAME_ORG")]
    pub primaryNameOrg: String,

    #[serde(rename = "PRIMARY_NAME_PREFIX")]
    pub primaryNamePrefix: String,

    #[serde(rename = "PRIMARY_NAME_SUFFIX")]
    pub primaryNameSuffix: String,

    #[serde(rename = "PRIMARY_PHONE_NUMBER")]
    pub primaryPhoneNumber: String,

    #[serde(rename = "RECORD_ID")]
    pub recordId: String,

    #[serde(rename = "RECORD_TYPE")]
    pub recordType: String,

    #[serde(rename = "REGISTRATION_COUNTRY")]
    pub registrationCountry: String,

    #[serde(rename = "REGISTRATION_DATE")]
    pub registrationDate: String,

    #[serde(rename = "RELATIONSHIPS")]
    pub relationships: Relationships,

    #[serde(rename = "REL_ANCHOR")]
    pub relAnchor: String,

    #[serde(rename = "REL_ANCHOR_DOMAIN")]
    pub relAnchorDomain: String,

    #[serde(rename = "REL_ANCHOR_KEY")]
    pub relAnchorKey: String,

    #[serde(rename = "REL_LINK")]
    pub relLink: String,

    #[serde(rename = "REL_POINTER")]
    pub relPointer: String,

    #[serde(rename = "REL_POINTER_DOMAIN")]
    pub relPointerDomain: String,

    #[serde(rename = "REL_POINTER_KEY")]
    pub relPointerKey: String,

    #[serde(rename = "REL_POINTER_ROLE")]
    pub relPointerRole: String,

    #[serde(rename = "SIGNAL")]
    pub signal: String,

    #[serde(rename = "SKYPE")]
    pub skype: String,

    #[serde(rename = "SOCIAL_HANDLE")]
    pub socialHandle: String,

    #[serde(rename = "SOCIAL_NETWORK")]
    pub socialNetwork: String,

    #[serde(rename = "SOURCE_ID")]
    pub sourceId: String,

    #[serde(rename = "SSN")]
    pub ssn: Vec<JsonDataSsn>,

    #[serde(rename = "SSN_LAST4")]
    pub ssnLast4: Vec<JsonDataSsnLast4>,

    #[serde(rename = "SSN_NUMBER")]
    pub ssnNumber: String,

    #[serde(rename = "TANGO")]
    pub tango: String,

    #[serde(rename = "TAX_ID_COUNTRY")]
    pub taxIdCountry: String,

    #[serde(rename = "TAX_ID_NUMBER")]
    pub taxIdNumber: String,

    #[serde(rename = "TAX_ID_TYPE")]
    pub taxIdType: String,

    #[serde(rename = "TELEGRAM")]
    pub telegram: String,

    #[serde(rename = "TRUSTED_ID_NUMBER")]
    pub trustedIdNumber: String,

    #[serde(rename = "TRUSTED_ID_TYPE")]
    pub trustedIdType: String,

    #[serde(rename = "TWITTER")]
    pub twitter: String,

    #[serde(rename = "VIBER")]
    pub viber: String,

    #[serde(rename = "WEBSITE_ADDRESS")]
    pub websiteAddress: String,

    #[serde(rename = "WECHAT")]
    pub wechat: String,

    #[serde(rename = "WHATSAPP")]
    pub whatsapp: String,

    #[serde(rename = "WORK_PHONE_NUMBER")]
    pub workPhoneNumber: String,

    #[serde(rename = "ZOOMROOM")]
    pub zoomroom: String,

    #[serde(rename = "name")]
    pub name0: Names,
}

#[derive(Serialize, Deserialize)]
pub struct MatchInfoDisclosedRelationsRelAnchor {
    #[serde(rename = "DOMAIN")]
    pub domain: String,

    #[serde(rename = "FEAT_DESC")]
    pub featDesc: String,

    #[serde(rename = "FEAT_ID")]
    pub featId: i32,

    #[serde(rename = "LINKED_FEAT_DESC")]
    pub linkedFeatDesc: String,

    #[serde(rename = "LINKED_FEAT_ID")]
    pub linkedFeatId: i32,

    #[serde(rename = "LINKED_FEAT_TYPE")]
    pub linkedFeatType: String,

    #[serde(rename = "LINKED_FEAT_USAGE_TYPE")]
    pub linkedFeatUsageType: String,
}

#[derive(Serialize, Deserialize)]
pub struct MatchInfoDisclosedRelationsRelLink {
    #[serde(rename = "DOMAIN")]
    pub domain: String,

    #[serde(rename = "FEAT_DESC")]
    pub featDesc: String,

    #[serde(rename = "FEAT_ID")]
    pub featId: i32,

    #[serde(rename = "FEAT_USAGE_TYPE")]
    pub featUsageType: String,

    #[serde(rename = "LINKED_FEAT_DESC")]
    pub linkedFeatDesc: String,

    #[serde(rename = "LINKED_FEAT_ID")]
    pub linkedFeatId: i32,

    #[serde(rename = "LINKED_FEAT_TYPE")]
    pub linkedFeatType: String,

    #[serde(rename = "LINKED_FEAT_USAGE_TYPE")]
    pub linkedFeatUsageType: String,
}

#[derive(Serialize, Deserialize)]
pub struct MatchInfoDisclosedRelationsRelPointer {
    #[serde(rename = "DOMAIN")]
    pub domain: String,

    #[serde(rename = "FEAT_DESC")]
    pub featDesc: String,

    #[serde(rename = "FEAT_ID")]
    pub featId: i32,

    #[serde(rename = "FEAT_USAGE_TYPE")]
    pub featUsageType: String,

    #[serde(rename = "LINKED_FEAT_DESC")]
    pub linkedFeatDesc: String,

    #[serde(rename = "LINKED_FEAT_ID")]
    pub linkedFeatId: i32,

    #[serde(rename = "LINKED_FEAT_TYPE")]
    pub linkedFeatType: String,
}

#[derive(Serialize, Deserialize)]
pub struct MatchInfoDisclosedRelations {
    #[serde(rename = "REL_ANCHOR")]
    pub relAnchor: Vec<MatchInfoDisclosedRelationsRelAnchor>,

    #[serde(rename = "REL_LINK")]
    pub relLink: Vec<MatchInfoDisclosedRelationsRelLink>,

    #[serde(rename = "REL_POINTER")]
    pub relPointer: Vec<MatchInfoDisclosedRelationsRelPointer>,
}

#[derive(Serialize, Deserialize)]
pub struct MatchInfo {
    #[serde(rename = "CANDIDATE_KEYS")]
    pub candidateKeys: MatchInfoCandidateKeys,

    #[serde(rename = "DISCLOSED_RELATIONS")]
    pub disclosedRelations: MatchInfoDisclosedRelations,

    #[serde(rename = "ERRULE_CODE")]
    pub erruleCode: String,

    #[serde(rename = "FEATURE_SCORES")]
    pub featureScores: FeatureScores,

    #[serde(rename = "MATCH_KEY")]
    pub matchKey: String,

    #[serde(rename = "MATCH_LEVEL")]
    pub matchLevel: i32,

    #[serde(rename = "MATCH_LEVEL_CODE")]
    pub matchLevelCode: String,

    #[serde(rename = "WHY_ERRULE_CODE")]
    pub whyErruleCode: String,

    #[serde(rename = "WHY_KEY")]
    pub whyKey: String,
}

#[derive(Serialize, Deserialize)]
pub struct MatchInfoCandidateKeys {
    #[serde(rename = "ACCOUNT_DOMAIN")]
    pub accountDomain: MatchInfosForAttribute,

    #[serde(rename = "ACCOUNT_NUMBER")]
    pub accountNumber: MatchInfosForAttribute,

    #[serde(rename = "ACCT_NUM")]
    pub acctNum: MatchInfosForAttribute,

    #[serde(rename = "ADDRESS")]
    pub address: MatchInfosForAttribute,

    #[serde(rename = "ADDRESS_LIST")]
    pub addressList: MatchInfosForAttribute,

    #[serde(rename = "ADDR_FULL")]
    pub addrFull: MatchInfosForAttribute,

    #[serde(rename = "ADDR_KEY")]
    pub addrKey: MatchInfosForAttribute,

    #[serde(rename = "CELL_PHONE_NUMBER")]
    pub cellPhoneNumber: MatchInfosForAttribute,

    #[serde(rename = "CITIZENSHIP")]
    pub citizenship: MatchInfosForAttribute,

    #[serde(rename = "COUNTRY_OF_ASSOCIATION")]
    pub countryOfAssociation: MatchInfosForAttribute,

    #[serde(rename = "DATA_SOURCE")]
    pub dataSource: MatchInfosForAttribute,

    #[serde(rename = "DATE_OF_BIRTH")]
    pub dateOfBirth: MatchInfosForAttribute,

    #[serde(rename = "DATE_OF_DEATH")]
    pub dateOfDeath: MatchInfosForAttribute,

    #[serde(rename = "DOB")]
    pub dob: MatchInfosForAttribute,

    #[serde(rename = "DOD")]
    pub dod: MatchInfosForAttribute,

    #[serde(rename = "DRIVERS_LICENSE_NUMBER")]
    pub driversLicenseNumber: MatchInfosForAttribute,

    #[serde(rename = "DRIVERS_LICENSE_STATE")]
    pub driversLicenseState: MatchInfosForAttribute,

    #[serde(rename = "DRLIC")]
    pub drlic: MatchInfosForAttribute,

    #[serde(rename = "DUNS_NUMBER")]
    pub dunsNumber: MatchInfosForAttribute,

    #[serde(rename = "EMAIL")]
    pub email: MatchInfosForAttribute,

    #[serde(rename = "EMAIL_ADDRESS")]
    pub emailAddress: MatchInfosForAttribute,

    #[serde(rename = "EMAIL_KEY")]
    pub emailKey: MatchInfosForAttribute,

    #[serde(rename = "EMPLOYER_NAME")]
    pub employerName: MatchInfosForAttribute,

    #[serde(rename = "ENTITY_TYPE")]
    pub entityType: MatchInfosForAttribute,

    #[serde(rename = "FACEBOOK")]
    pub facebook: MatchInfosForAttribute,

    #[serde(rename = "GENDER")]
    pub gender: MatchInfosForAttribute,

    #[serde(rename = "GROUP_ASSN_ID_NUMBER")]
    pub groupAssnIdNumber: MatchInfosForAttribute,

    #[serde(rename = "GROUP_ASSN_ID_TYPE")]
    pub groupAssnIdType: MatchInfosForAttribute,

    #[serde(rename = "GROUP_ASSOCIATION_ORG_NAME")]
    pub groupAssociationOrgName: MatchInfosForAttribute,

    #[serde(rename = "GROUP_ASSOCIATION_TYPE")]
    pub groupAssociationType: MatchInfosForAttribute,

    #[serde(rename = "ID_KEY")]
    pub idKey: MatchInfosForAttribute,

    #[serde(rename = "INSTAGRAM")]
    pub instagram: MatchInfosForAttribute,

    #[serde(rename = "LEI_NUMBER")]
    pub leiNumber: MatchInfosForAttribute,

    #[serde(rename = "LINKEDIN")]
    pub linkedin: MatchInfosForAttribute,

    #[serde(rename = "LOAD_ID")]
    pub loadId: MatchInfosForAttribute,

    #[serde(rename = "LOGIN_ID")]
    pub loginId: MatchInfosForAttribute,

    #[serde(rename = "NAME")]
    pub name: MatchInfosForAttribute,

    #[serde(rename = "NAME_FULL")]
    pub nameFull: MatchInfosForAttribute,

    #[serde(rename = "NAME_KEY")]
    pub nameKey: MatchInfosForAttribute,

    #[serde(rename = "NAME_LIST")]
    pub nameList: MatchInfosForAttribute,

    #[serde(rename = "NATIONALITY")]
    pub nationality: MatchInfosForAttribute,

    #[serde(rename = "NATIONAL_ID")]
    pub nationalId: MatchInfosForAttribute,

    #[serde(rename = "NATIONAL_ID_COUNTRY")]
    pub nationalIdCountry: MatchInfosForAttribute,

    #[serde(rename = "NATIONAL_ID_NUMBER")]
    pub nationalIdNumber: MatchInfosForAttribute,

    #[serde(rename = "NIN_COUNTRY")]
    pub ninCountry: MatchInfosForAttribute,

    #[serde(rename = "NIN_NUMBER")]
    pub ninNumber: MatchInfosForAttribute,

    #[serde(rename = "NPI_NUMBER")]
    pub npiNumber: MatchInfosForAttribute,

    #[serde(rename = "OTHER_ID_COUNTRY")]
    pub otherIdCountry: MatchInfosForAttribute,

    #[serde(rename = "OTHER_ID_NUMBER")]
    pub otherIdNumber: MatchInfosForAttribute,

    #[serde(rename = "OTHER_ID_TYPE")]
    pub otherIdType: MatchInfosForAttribute,

    #[serde(rename = "PASSPORT")]
    pub passport: MatchInfosForAttribute,

    #[serde(rename = "PASSPORTS")]
    pub passports: MatchInfosForAttribute,

    #[serde(rename = "PASSPORT_COUNTRY")]
    pub passportCountry: MatchInfosForAttribute,

    #[serde(rename = "PASSPORT_NUMBER")]
    pub passportNumber: MatchInfosForAttribute,

    #[serde(rename = "PHONE")]
    pub phone: MatchInfosForAttribute,

    #[serde(rename = "PHONES")]
    pub phones: MatchInfosForAttribute,

    #[serde(rename = "PHONE_KEY")]
    pub phoneKey: MatchInfosForAttribute,

    #[serde(rename = "PLACE_OF_BIRTH")]
    pub placeOfBirth: MatchInfosForAttribute,

    #[serde(rename = "PRIMARY_NAME_FIRST")]
    pub primaryNameFirst: MatchInfosForAttribute,

    #[serde(rename = "PRIMARY_NAME_LAST")]
    pub primaryNameLast: MatchInfosForAttribute,

    #[serde(rename = "PRIMARY_NAME_MIDDLE")]
    pub primaryNameMiddle: MatchInfosForAttribute,

    #[serde(rename = "PRIMARY_NAME_ORG")]
    pub primaryNameOrg: MatchInfosForAttribute,

    #[serde(rename = "PRIMARY_NAME_PREFIX")]
    pub primaryNamePrefix: MatchInfosForAttribute,

    #[serde(rename = "PRIMARY_NAME_SUFFIX")]
    pub primaryNameSuffix: MatchInfosForAttribute,

    #[serde(rename = "PRIMARY_PHONE_NUMBER")]
    pub primaryPhoneNumber: MatchInfosForAttribute,

    #[serde(rename = "RECORD_TYPE")]
    pub recordType: MatchInfosForAttribute,

    #[serde(rename = "REGISTRATION_COUNTRY")]
    pub registrationCountry: MatchInfosForAttribute,

    #[serde(rename = "REGISTRATION_DATE")]
    pub registrationDate: MatchInfosForAttribute,

    #[serde(rename = "REL_ANCHOR")]
    pub relAnchor: MatchInfosForAttribute,

    #[serde(rename = "REL_ANCHOR_DOMAIN")]
    pub relAnchorDomain: MatchInfosForAttribute,

    #[serde(rename = "REL_ANCHOR_KEY")]
    pub relAnchorKey: MatchInfosForAttribute,

    #[serde(rename = "REL_LINK")]
    pub relLink: MatchInfosForAttribute,

    #[serde(rename = "REL_POINTER")]
    pub relPointer: MatchInfosForAttribute,

    #[serde(rename = "REL_POINTER_DOMAIN")]
    pub relPointerDomain: MatchInfosForAttribute,

    #[serde(rename = "REL_POINTER_KEY")]
    pub relPointerKey: MatchInfosForAttribute,

    #[serde(rename = "REL_POINTER_ROLE")]
    pub relPointerRole: MatchInfosForAttribute,

    #[serde(rename = "SIGNAL")]
    pub signal: MatchInfosForAttribute,

    #[serde(rename = "SKYPE")]
    pub skype: MatchInfosForAttribute,

    #[serde(rename = "SOCIAL_HANDLE")]
    pub socialHandle: MatchInfosForAttribute,

    #[serde(rename = "SOCIAL_NETWORK")]
    pub socialNetwork: MatchInfosForAttribute,

    #[serde(rename = "SOURCE_ID")]
    pub sourceId: MatchInfosForAttribute,

    #[serde(rename = "SSN")]
    pub ssn: MatchInfosForAttribute,

    #[serde(rename = "SSN_LAST4")]
    pub ssnLast4: MatchInfosForAttribute,

    #[serde(rename = "SSN_NUMBER")]
    pub ssnNumber: MatchInfosForAttribute,

    #[serde(rename = "TANGO")]
    pub tango: MatchInfosForAttribute,

    #[serde(rename = "TAX_ID_COUNTRY")]
    pub taxIdCountry: MatchInfosForAttribute,

    #[serde(rename = "TAX_ID_NUMBER")]
    pub taxIdNumber: MatchInfosForAttribute,

    #[serde(rename = "TAX_ID_TYPE")]
    pub taxIdType: MatchInfosForAttribute,

    #[serde(rename = "TELEGRAM")]
    pub telegram: MatchInfosForAttribute,

    #[serde(rename = "TRUSTED_ID_NUMBER")]
    pub trustedIdNumber: MatchInfosForAttribute,

    #[serde(rename = "TRUSTED_ID_TYPE")]
    pub trustedIdType: MatchInfosForAttribute,

    #[serde(rename = "TWITTER")]
    pub twitter: MatchInfosForAttribute,

    #[serde(rename = "VIBER")]
    pub viber: MatchInfosForAttribute,

    #[serde(rename = "WEBSITE_ADDRESS")]
    pub websiteAddress: MatchInfosForAttribute,

    #[serde(rename = "WECHAT")]
    pub wechat: MatchInfosForAttribute,

    #[serde(rename = "WHATSAPP")]
    pub whatsapp: MatchInfosForAttribute,

    #[serde(rename = "WORK_PHONE_NUMBER")]
    pub workPhoneNumber: MatchInfosForAttribute,

    #[serde(rename = "ZOOMROOM")]
    pub zoomroom: MatchInfosForAttribute,
}

#[derive(Serialize, Deserialize)]
pub struct MatchInfoForAttribute {
    #[serde(rename = "FEAT_DESC")]
    pub featDesc: String,

    #[serde(rename = "FEAT_ID")]
    pub featId: i32,
}

pub type MatchInfosForAttribute = Vec<MatchInfoForAttribute>;

#[derive(Serialize, Deserialize)]
pub struct MatchScoreForAttribute {
    #[serde(rename = "CANDIDATE_FEAT")]
    pub candidateFeat: String,

    #[serde(rename = "FULL_SCORE")]
    pub fullScore: i32,

    #[serde(rename = "GENERATION_MATCH")]
    pub generationMatch: i32,

    #[serde(rename = "GNR_FN")]
    pub gnrFn: i32,

    #[serde(rename = "GNR_GN")]
    pub gnrGn: i32,

    #[serde(rename = "GNR_ON")]
    pub gnrOn: i32,

    #[serde(rename = "GNR_SN")]
    pub gnrSn: i32,

    #[serde(rename = "INBOUND_FEAT")]
    pub inboundFeat: String,
}

#[derive(Serialize, Deserialize)]
pub struct MatchScores {
    #[serde(rename = "ACCOUNT_DOMAIN")]
    pub accountDomain: MatchScoresForAttribute,

    #[serde(rename = "ACCOUNT_NUMBER")]
    pub accountNumber: MatchScoresForAttribute,

    #[serde(rename = "ACCT_NUM")]
    pub acctNum: MatchScoresForAttribute,

    #[serde(rename = "ADDRESS")]
    pub address: MatchScoresForAttribute,

    #[serde(rename = "ADDRESS_LIST")]
    pub addressList: MatchScoresForAttribute,

    #[serde(rename = "ADDR_FULL")]
    pub addrFull: MatchScoresForAttribute,

    #[serde(rename = "ADDR_KEY")]
    pub addrKey: MatchScoresForAttribute,

    #[serde(rename = "CELL_PHONE_NUMBER")]
    pub cellPhoneNumber: MatchScoresForAttribute,

    #[serde(rename = "CITIZENSHIP")]
    pub citizenship: MatchScoresForAttribute,

    #[serde(rename = "COUNTRY_OF_ASSOCIATION")]
    pub countryOfAssociation: MatchScoresForAttribute,

    #[serde(rename = "DATA_SOURCE")]
    pub dataSource: MatchScoresForAttribute,

    #[serde(rename = "DATE_OF_BIRTH")]
    pub dateOfBirth: MatchScoresForAttribute,

    #[serde(rename = "DATE_OF_DEATH")]
    pub dateOfDeath: MatchScoresForAttribute,

    #[serde(rename = "DOB")]
    pub dob: MatchScoresForAttribute,

    #[serde(rename = "DOD")]
    pub dod: MatchScoresForAttribute,

    #[serde(rename = "DRIVERS_LICENSE_NUMBER")]
    pub driversLicenseNumber: MatchScoresForAttribute,

    #[serde(rename = "DRIVERS_LICENSE_STATE")]
    pub driversLicenseState: MatchScoresForAttribute,

    #[serde(rename = "DRLIC")]
    pub drlic: MatchScoresForAttribute,

    #[serde(rename = "DUNS_NUMBER")]
    pub dunsNumber: MatchScoresForAttribute,

    #[serde(rename = "EMAIL")]
    pub email: MatchScoresForAttribute,

    #[serde(rename = "EMAIL_ADDRESS")]
    pub emailAddress: MatchScoresForAttribute,

    #[serde(rename = "EMAIL_KEY")]
    pub emailKey: MatchScoresForAttribute,

    #[serde(rename = "EMPLOYER_NAME")]
    pub employerName: MatchScoresForAttribute,

    #[serde(rename = "ENTITY_TYPE")]
    pub entityType: MatchScoresForAttribute,

    #[serde(rename = "FACEBOOK")]
    pub facebook: MatchScoresForAttribute,

    #[serde(rename = "GENDER")]
    pub gender: MatchScoresForAttribute,

    #[serde(rename = "GROUP_ASSN_ID_NUMBER")]
    pub groupAssnIdNumber: MatchScoresForAttribute,

    #[serde(rename = "GROUP_ASSN_ID_TYPE")]
    pub groupAssnIdType: MatchScoresForAttribute,

    #[serde(rename = "GROUP_ASSOCIATION_ORG_NAME")]
    pub groupAssociationOrgName: MatchScoresForAttribute,

    #[serde(rename = "GROUP_ASSOCIATION_TYPE")]
    pub groupAssociationType: MatchScoresForAttribute,

    #[serde(rename = "ID_KEY")]
    pub idKey: MatchScoresForAttribute,

    #[serde(rename = "INSTAGRAM")]
    pub instagram: MatchScoresForAttribute,

    #[serde(rename = "LEI_NUMBER")]
    pub leiNumber: MatchScoresForAttribute,

    #[serde(rename = "LINKEDIN")]
    pub linkedin: MatchScoresForAttribute,

    #[serde(rename = "LOAD_ID")]
    pub loadId: MatchScoresForAttribute,

    #[serde(rename = "LOGIN_ID")]
    pub loginId: MatchScoresForAttribute,

    #[serde(rename = "NAME")]
    pub name: MatchScoresForAttribute,

    #[serde(rename = "NAME_FULL")]
    pub nameFull: MatchScoresForAttribute,

    #[serde(rename = "NAME_KEY")]
    pub nameKey: MatchScoresForAttribute,

    #[serde(rename = "NAME_LIST")]
    pub nameList: MatchScoresForAttribute,

    #[serde(rename = "NATIONALITY")]
    pub nationality: MatchScoresForAttribute,

    #[serde(rename = "NATIONAL_ID")]
    pub nationalId: MatchScoresForAttribute,

    #[serde(rename = "NATIONAL_ID_COUNTRY")]
    pub nationalIdCountry: MatchScoresForAttribute,

    #[serde(rename = "NATIONAL_ID_NUMBER")]
    pub nationalIdNumber: MatchScoresForAttribute,

    #[serde(rename = "NIN_COUNTRY")]
    pub ninCountry: MatchScoresForAttribute,

    #[serde(rename = "NIN_NUMBER")]
    pub ninNumber: MatchScoresForAttribute,

    #[serde(rename = "NPI_NUMBER")]
    pub npiNumber: MatchScoresForAttribute,

    #[serde(rename = "OTHER_ID_COUNTRY")]
    pub otherIdCountry: MatchScoresForAttribute,

    #[serde(rename = "OTHER_ID_NUMBER")]
    pub otherIdNumber: MatchScoresForAttribute,

    #[serde(rename = "OTHER_ID_TYPE")]
    pub otherIdType: MatchScoresForAttribute,

    #[serde(rename = "PASSPORT")]
    pub passport: MatchScoresForAttribute,

    #[serde(rename = "PASSPORTS")]
    pub passports: MatchScoresForAttribute,

    #[serde(rename = "PASSPORT_COUNTRY")]
    pub passportCountry: MatchScoresForAttribute,

    #[serde(rename = "PASSPORT_NUMBER")]
    pub passportNumber: MatchScoresForAttribute,

    #[serde(rename = "PHONE")]
    pub phone: MatchScoresForAttribute,

    #[serde(rename = "PHONES")]
    pub phones: MatchScoresForAttribute,

    #[serde(rename = "PHONE_KEY")]
    pub phoneKey: MatchScoresForAttribute,

    #[serde(rename = "PLACE_OF_BIRTH")]
    pub placeOfBirth: MatchScoresForAttribute,

    #[serde(rename = "PRIMARY_NAME_FIRST")]
    pub primaryNameFirst: MatchScoresForAttribute,

    #[serde(rename = "PRIMARY_NAME_LAST")]
    pub primaryNameLast: MatchScoresForAttribute,

    #[serde(rename = "PRIMARY_NAME_MIDDLE")]
    pub primaryNameMiddle: MatchScoresForAttribute,

    #[serde(rename = "PRIMARY_NAME_ORG")]
    pub primaryNameOrg: MatchScoresForAttribute,

    #[serde(rename = "PRIMARY_NAME_PREFIX")]
    pub primaryNamePrefix: MatchScoresForAttribute,

    #[serde(rename = "PRIMARY_NAME_SUFFIX")]
    pub primaryNameSuffix: MatchScoresForAttribute,

    #[serde(rename = "PRIMARY_PHONE_NUMBER")]
    pub primaryPhoneNumber: MatchScoresForAttribute,

    #[serde(rename = "RECORD_TYPE")]
    pub recordType: MatchScoresForAttribute,

    #[serde(rename = "REGISTRATION_COUNTRY")]
    pub registrationCountry: MatchScoresForAttribute,

    #[serde(rename = "REGISTRATION_DATE")]
    pub registrationDate: MatchScoresForAttribute,

    #[serde(rename = "REL_ANCHOR")]
    pub relAnchor: MatchScoresForAttribute,

    #[serde(rename = "REL_ANCHOR_DOMAIN")]
    pub relAnchorDomain: MatchScoresForAttribute,

    #[serde(rename = "REL_ANCHOR_KEY")]
    pub relAnchorKey: MatchScoresForAttribute,

    #[serde(rename = "REL_LINK")]
    pub relLink: MatchScoresForAttribute,

    #[serde(rename = "REL_POINTER")]
    pub relPointer: MatchScoresForAttribute,

    #[serde(rename = "REL_POINTER_DOMAIN")]
    pub relPointerDomain: MatchScoresForAttribute,

    #[serde(rename = "REL_POINTER_KEY")]
    pub relPointerKey: MatchScoresForAttribute,

    #[serde(rename = "REL_POINTER_ROLE")]
    pub relPointerRole: MatchScoresForAttribute,

    #[serde(rename = "SIGNAL")]
    pub signal: MatchScoresForAttribute,

    #[serde(rename = "SKYPE")]
    pub skype: MatchScoresForAttribute,

    #[serde(rename = "SOCIAL_HANDLE")]
    pub socialHandle: MatchScoresForAttribute,

    #[serde(rename = "SOCIAL_NETWORK")]
    pub socialNetwork: MatchScoresForAttribute,

    #[serde(rename = "SOURCE_ID")]
    pub sourceId: MatchScoresForAttribute,

    #[serde(rename = "SSN")]
    pub ssn: MatchScoresForAttribute,

    #[serde(rename = "SSN_LAST4")]
    pub ssnLast4: MatchScoresForAttribute,

    #[serde(rename = "SSN_NUMBER")]
    pub ssnNumber: MatchScoresForAttribute,

    #[serde(rename = "TANGO")]
    pub tango: MatchScoresForAttribute,

    #[serde(rename = "TAX_ID_COUNTRY")]
    pub taxIdCountry: MatchScoresForAttribute,

    #[serde(rename = "TAX_ID_NUMBER")]
    pub taxIdNumber: MatchScoresForAttribute,

    #[serde(rename = "TAX_ID_TYPE")]
    pub taxIdType: MatchScoresForAttribute,

    #[serde(rename = "TELEGRAM")]
    pub telegram: MatchScoresForAttribute,

    #[serde(rename = "TRUSTED_ID_NUMBER")]
    pub trustedIdNumber: MatchScoresForAttribute,

    #[serde(rename = "TRUSTED_ID_TYPE")]
    pub trustedIdType: MatchScoresForAttribute,

    #[serde(rename = "TWITTER")]
    pub twitter: MatchScoresForAttribute,

    #[serde(rename = "VIBER")]
    pub viber: MatchScoresForAttribute,

    #[serde(rename = "WEBSITE_ADDRESS")]
    pub websiteAddress: MatchScoresForAttribute,

    #[serde(rename = "WECHAT")]
    pub wechat: MatchScoresForAttribute,

    #[serde(rename = "WHATSAPP")]
    pub whatsapp: MatchScoresForAttribute,

    #[serde(rename = "WORK_PHONE_NUMBER")]
    pub workPhoneNumber: MatchScoresForAttribute,

    #[serde(rename = "ZOOMROOM")]
    pub zoomroom: MatchScoresForAttribute,
}

pub type MatchScoresForAttribute = Vec<MatchScoreForAttribute>;

#[derive(Serialize, Deserialize)]
pub struct MemberRecord {
    #[serde(rename = "INTERNAL_ID")]
    pub internalId: i32,

    #[serde(rename = "RECORDS")]
    pub records: Records,
}

pub type MemberRecords = Vec<MemberRecord>;

#[derive(Serialize, Deserialize)]
pub struct Name {
    #[serde(rename = "NAME_FIRST")]
    pub nameFirst: String,

    #[serde(rename = "NAME_FULL")]
    pub nameFull: String,

    #[serde(rename = "NAME_LAST")]
    pub nameLast: String,

    #[serde(rename = "NAME_MIDDLE")]
    pub nameMiddle: String,

    #[serde(rename = "NAME_ORG")]
    pub nameOrg: String,

    #[serde(rename = "NAME_PREFIX")]
    pub namePrefix: String,

    #[serde(rename = "NAME_SUFFIX")]
    pub nameSuffix: String,

    #[serde(rename = "NAME_TYPE")]
    pub nameType: String,
}

pub type Names = Vec<Name>;

#[derive(Serialize, Deserialize)]
pub struct Network {
    #[serde(rename = "ENTITIES")]
    pub entities: Vec<Entity>,

    #[serde(rename = "ENTITY_PATHS")]
    pub entityPaths: EntityPaths,

    #[serde(rename = "MAX_ENTITY_LIMIT_REACHED")]
    pub maxEntityLimitReached: String,
}

#[derive(Serialize, Deserialize)]
pub struct Notice {
    #[serde(rename = "CODE")]
    pub code: String,

    #[serde(rename = "DESCRIPTION")]
    pub description: String,
}

pub type Notices = Vec<Notice>;

#[derive(Serialize, Deserialize)]
pub struct Passport {
    #[serde(rename = "PASSPORT_COUNTRY")]
    pub passportCountry: String,

    #[serde(rename = "PASSPORT_NUMBER")]
    pub passportNumber: String,
}

pub type Passports = Vec<Passport>;

#[derive(Serialize, Deserialize)]
pub struct Path {
    #[serde(rename = "ENTITIES")]
    pub entities: Vec<Entity>,

    #[serde(rename = "ENTITY_PATHS")]
    pub entityPaths: EntityPaths,
}

#[derive(Serialize, Deserialize)]
pub struct Phone {
    #[serde(rename = "PHONE_FROM_DATE")]
    pub phoneFromDate: String,

    #[serde(rename = "PHONE_NUMBER")]
    pub phoneNumber: String,

    #[serde(rename = "PHONE_THRU_DATE")]
    pub phoneThruDate: String,

    #[serde(rename = "PHONE_TYPE")]
    pub phoneType: String,
}

pub type Phones = Vec<Phone>;

#[derive(Serialize, Deserialize)]
pub struct ProcessUmfProc {
    #[serde(rename = "NAME")]
    pub name: String,

    #[serde(rename = "RESULT")]
    pub result: String,
}

#[derive(Serialize, Deserialize)]
pub struct Process {
    #[serde(rename = "AFFECTED_ENTITIES")]
    pub affectedEntities: Vec<AffectedEntity>,

    #[serde(rename = "INTERESTING_ENTITIES")]
    pub interestingEntities: InterestingEntities,

    #[serde(rename = "PROCESS_RESULT")]
    pub processResult: ProcessResult,

    #[serde(rename = "UMF_PROC")]
    pub umfProc: ProcessUmfProc,
}

#[derive(Serialize, Deserialize)]
pub struct ProcessResultResolvedEntities {
    #[serde(rename = "ENTITY_ID")]
    pub entityId: i32,

    #[serde(rename = "ENTITY_NAME")]
    pub entityName: String,

    #[serde(rename = "ERRULE_CODE")]
    pub erruleCode: String,

    #[serde(rename = "FEATURES")]
    pub features: String,

    #[serde(rename = "LAST_SEEN_DT")]
    pub lastSeenDt: String,

    #[serde(rename = "MATCH_KEY")]
    pub matchKey: String,

    #[serde(rename = "MATCH_LEVEL")]
    pub matchLevel: i32,

    #[serde(rename = "MATCH_LEVEL_CODE")]
    pub matchLevelCode: String,

    #[serde(rename = "MATCH_SCORES")]
    pub matchScores: MatchScores,

    #[serde(rename = "RECORDS")]
    pub records: Records,

    #[serde(rename = "RECORD_SUMMARY")]
    pub recordSummary: Vec<RecordSummaryElement>,
}

#[derive(Serialize, Deserialize)]
pub struct ProcessResult {
    #[serde(rename = "RESOLVED_ENTITIES")]
    pub resolvedEntities: Vec<ProcessResultResolvedEntities>,
}

#[derive(Serialize, Deserialize)]
pub struct RecordFeatures {
    #[serde(rename = "LIB_FEAT_ID")]
    pub libFeatId: i32,

    #[serde(rename = "USAGE_TYPE")]
    pub usageType: String,
}

#[derive(Serialize, Deserialize)]
pub struct Record {
    #[serde(rename = "ADDRESS_DATA")]
    pub addressData: Vec<String>,

    #[serde(rename = "ATTRIBUTE_DATA")]
    pub attributeData: Vec<String>,

    #[serde(rename = "DATA_SOURCE")]
    pub dataSource: String,

    #[serde(rename = "ENTITY_DATA")]
    pub entityData: Vec<String>,

    #[serde(rename = "ENTITY_DESC")]
    pub entityDesc: String,

    #[serde(rename = "ENTITY_KEY")]
    pub entityKey: String,

    #[serde(rename = "ENTITY_TYPE")]
    pub entityType: String,

    #[serde(rename = "ERRULE_CODE")]
    pub erruleCode: String,

    #[serde(rename = "FEATURES")]
    pub features: Vec<RecordFeatures>,

    #[serde(rename = "IDENTIFIER_DATA")]
    pub identifierData: Vec<String>,

    #[serde(rename = "INTERNAL_ID")]
    pub internalId: i32,

    #[serde(rename = "JSON_DATA")]
    pub jsonData: JsonData,

    #[serde(rename = "LAST_SEEN_DT")]
    pub lastSeenDt: String,

    #[serde(rename = "MATCH_KEY")]
    pub matchKey: String,

    #[serde(rename = "MATCH_LEVEL")]
    pub matchLevel: i32,

    #[serde(rename = "MATCH_LEVEL_CODE")]
    pub matchLevelCode: String,

    #[serde(rename = "NAME_DATA")]
    pub nameData: Vec<String>,

    #[serde(rename = "OTHER_DATA")]
    pub otherData: Vec<String>,

    #[serde(rename = "PHONE_DATA")]
    pub phoneData: Vec<String>,

    #[serde(rename = "RECORD_ID")]
    pub recordId: String,

    #[serde(rename = "RELATIONSHIP_DATA")]
    pub relationshipData: Vec<String>,
}

#[derive(Serialize, Deserialize)]
pub struct RecordSummaryElement {
    #[serde(rename = "DATA_SOURCE")]
    pub dataSource: String,

    #[serde(rename = "FIRST_SEEN_DT")]
    pub firstSeenDt: String,

    #[serde(rename = "LAST_SEEN_DT")]
    pub lastSeenDt: String,

    #[serde(rename = "RECORD_COUNT")]
    pub recordCount: i32,
}

pub type Records = Vec<Record>;

pub type RelatedEntities = Vec<RelatedEntity>;

#[derive(Serialize, Deserialize)]
pub struct RelatedEntity {
    #[serde(rename = "ENTITY_ID")]
    pub entityId: i32,

    #[serde(rename = "ENTITY_NAME")]
    pub entityName: String,

    #[serde(rename = "ERRULE_CODE")]
    pub erruleCode: String,

    #[serde(rename = "IS_AMBIGUOUS")]
    pub isAmbiguous: i32,

    #[serde(rename = "IS_DISCLOSED")]
    pub isDisclosed: i32,

    #[serde(rename = "LAST_SEEN_DT")]
    pub lastSeenDt: String,

    #[serde(rename = "MATCH_KEY")]
    pub matchKey: String,

    #[serde(rename = "MATCH_LEVEL")]
    pub matchLevel: i32,

    #[serde(rename = "MATCH_LEVEL_CODE")]
    pub matchLevelCode: String,

    #[serde(rename = "RECORDS")]
    pub records: Records,

    #[serde(rename = "RECORD_SUMMARY")]
    pub recordSummary: Vec<RecordSummaryElement>,
}

#[derive(Serialize, Deserialize)]
pub struct Relationship {
    #[serde(rename = "RELATIONSHIP_KEY")]
    pub relationshipKey: String,

    #[serde(rename = "RELATIONSHIP_TYPE")]
    pub relationshipType: String,

    #[serde(rename = "REL_ANCHOR_DOMAIN")]
    pub relAnchorDomain: String,

    #[serde(rename = "REL_ANCHOR_KEY")]
    pub relAnchorKey: String,

    #[serde(rename = "REL_POINTER_DOMAIN")]
    pub relPointerDomain: String,

    #[serde(rename = "REL_POINTER_KEY")]
    pub relPointerKey: String,

    #[serde(rename = "REL_POINTER_ROLE")]
    pub relPointerRole: String,
}

pub type Relationships = Vec<Relationship>;

#[derive(Serialize, Deserialize)]
pub struct ResolutionStep {
    #[serde(rename = "INBOUND_VIRTUAL_ENTITY_ID")]
    pub inboundVirtualEntityId: String,

    #[serde(rename = "MATCH_INFO")]
    pub matchInfo: MatchInfo,

    #[serde(rename = "RESULT_VIRTUAL_ENTITY_ID")]
    pub resultVirtualEntityId: String,

    #[serde(rename = "STEP")]
    pub step: i32,

    #[serde(rename = "VIRTUAL_ENTITY_1")]
    pub virtualEntity: VirtualEntitySynopsis,

    #[serde(rename = "VIRTUAL_ENTITY_2")]
    pub virtualEntity0: VirtualEntitySynopsis,
}

pub type ResolutionSteps = Vec<ResolutionStep>;

pub type ResolvedEntities = Vec<ResolvedEntityAndMatchInfo>;

#[derive(Serialize, Deserialize)]
pub struct ResolvedEntity {
    #[serde(rename = "ENTITY_ID")]
    pub entityId: i32,

    #[serde(rename = "ENTITY_NAME")]
    pub entityName: String,

    #[serde(rename = "ERRULE_CODE")]
    pub erruleCode: String,

    #[serde(rename = "FEATURES")]
    pub features: String,

    #[serde(rename = "IS_AMBIGUOUS")]
    pub isAmbiguous: i32,

    #[serde(rename = "IS_DISCLOSED")]
    pub isDisclosed: i32,

    #[serde(rename = "LAST_SEEN_DT")]
    pub lastSeenDt: String,

    #[serde(rename = "MATCH_KEY")]
    pub matchKey: String,

    #[serde(rename = "MATCH_LEVEL")]
    pub matchLevel: i32,

    #[serde(rename = "MATCH_LEVEL_CODE")]
    pub matchLevelCode: String,

    #[serde(rename = "RECORDS")]
    pub records: Records,

    #[serde(rename = "RECORD_SUMMARY")]
    pub recordSummary: Vec<RecordSummaryElement>,
}

#[derive(Serialize, Deserialize)]
pub struct ResolvedEntityAndMatchInfoEntity {
    #[serde(rename = "RESOLVED_ENTITY")]
    pub resolvedEntity: ResolvedEntity,
}

#[derive(Serialize, Deserialize)]
pub struct ResolvedEntityAndMatchInfo {
    #[serde(rename = "ENTITY")]
    pub entity: ResolvedEntityAndMatchInfoEntity,

    #[serde(rename = "MATCH_INFO")]
    pub matchInfo: MatchInfo,
}

#[derive(Serialize, Deserialize)]
pub struct SysOom {
    #[serde(rename = "FELEM_ID")]
    pub felemId: i32,

    #[serde(rename = "FTYPE_ID")]
    pub ftypeId: i32,

    #[serde(rename = "LENS_ID")]
    pub lensId: i32,

    #[serde(rename = "LIB_FEAT_ID")]
    pub libFeatId: i32,

    #[serde(rename = "LIB_FELEM_ID")]
    pub libFelemId: i32,

    #[serde(rename = "NEXT_THRESH")]
    pub nextThresh: i32,

    #[serde(rename = "OOM_LEVEL")]
    pub oomLevel: String,

    #[serde(rename = "OOM_TYPE")]
    pub oomType: String,

    #[serde(rename = "THRESH1_CNT")]
    pub thresh1Cnt: i32,

    #[serde(rename = "THRESH1_OOM")]
    pub thresh1Oom: i32,
}

#[derive(Serialize, Deserialize)]
pub struct SchemaVersion {
    #[serde(rename = "ENGINE_SCHEMA_VERSION")]
    pub engineSchemaVersion: String,

    #[serde(rename = "MAXIMUM_REQUIRED_SCHEMA_VERSION")]
    pub maximumRequiredSchemaVersion: String,

    #[serde(rename = "MINIMUM_REQUIRED_SCHEMA_VERSION")]
    pub minimumRequiredSchemaVersion: String,
}

#[derive(Serialize, Deserialize)]
pub struct Search {
    #[serde(rename = "RESOLVED_ENTITIES")]
    pub resolvedEntities: Vec<ResolvedEntityAndMatchInfo>,

    #[serde(rename = "SEARCH_STATISTICS")]
    pub searchStatistics: SearchStatistics,
}

#[derive(Serialize, Deserialize)]
pub struct SearchStatisticCandidateKeysFeatureTypes {
    #[serde(rename = "FOUND")]
    pub found: i32,

    #[serde(rename = "FTYPE_CODE")]
    pub ftypeCode: String,

    #[serde(rename = "GENERIC")]
    pub generic: i32,

    #[serde(rename = "NOT_FOUND")]
    pub notFound: i32,
}

#[derive(Serialize, Deserialize)]
pub struct SearchStatisticCandidateKeysSummary {
    #[serde(rename = "FOUND")]
    pub found: i32,

    #[serde(rename = "GENERIC")]
    pub generic: i32,

    #[serde(rename = "NOT_FOUND")]
    pub notFound: i32,
}

#[derive(Serialize, Deserialize)]
pub struct SearchStatisticCandidateKeys {
    #[serde(rename = "FEATURE_TYPES")]
    pub featureTypes: Vec<SearchStatisticCandidateKeysFeatureTypes>,

    #[serde(rename = "SUMMARY")]
    pub summary: SearchStatisticCandidateKeysSummary,
}

#[derive(Serialize, Deserialize)]
pub struct SearchStatistic {
    #[serde(rename = "CANDIDATE_KEYS")]
    pub candidateKeys: SearchStatisticCandidateKeys,
}

pub type SearchStatistics = Vec<SearchStatistic>;

#[derive(Serialize, Deserialize)]
pub struct VirtualEntity {
    #[serde(rename = "RESOLVED_ENTITY")]
    pub resolvedEntity: ResolvedEntity,
}

#[derive(Serialize, Deserialize)]
pub struct VirtualEntitySynopsis {
    #[serde(rename = "MEMBER_RECORDS")]
    pub memberRecords: MemberRecords,

    #[serde(rename = "VIRTUAL_ENTITY_ID")]
    pub virtualEntityId: String,
}

#[derive(Serialize, Deserialize)]
pub struct WhyEntities {
    #[serde(rename = "ENTITIES")]
    pub entities: Vec<Entity>,

    #[serde(rename = "WHY_RESULTS")]
    pub whyResults: WhyResults,
}

#[derive(Serialize, Deserialize)]
pub struct WhyEntity {
    #[serde(rename = "ENTITIES")]
    pub entities: Vec<Entity>,

    #[serde(rename = "WHY_RESULTS")]
    pub whyResults: WhyResults,
}

#[derive(Serialize, Deserialize)]
pub struct WhyRecords {
    #[serde(rename = "ENTITIES")]
    pub entities: Vec<Entity>,

    #[serde(rename = "WHY_RESULTS")]
    pub whyResults: WhyResults,
}

#[derive(Serialize, Deserialize)]
pub struct WhyResult {
    #[serde(rename = "ENTITY_ID")]
    pub entityId: i32,

    #[serde(rename = "ENTITY_ID_2")]
    pub entityId0: i32,

    #[serde(rename = "FOCUS_RECORDS")]
    pub focusRecords: FocusRecords,

    #[serde(rename = "FOCUS_RECORDS_2")]
    pub focusRecords0: FocusRecords,

    #[serde(rename = "INTERNAL_ID")]
    pub internalId: i32,

    #[serde(rename = "INTERNAL_ID_2")]
    pub internalId0: i32,

    #[serde(rename = "MATCH_INFO")]
    pub matchInfo: MatchInfo,
}

pub type WhyResults = Vec<WhyResult>;

#[derive(Serialize, Deserialize)]
pub struct WithInfo {
    #[serde(rename = "AFFECTED_ENTITIES")]
    pub affectedEntities: Vec<AffectedEntity>,

    #[serde(rename = "DATA_SOURCE")]
    pub dataSource: String,

    #[serde(rename = "INTERESTING_ENTITIES")]
    pub interestingEntities: InterestingEntities,

    #[serde(rename = "RECORD_ID")]
    pub recordId: String,
}

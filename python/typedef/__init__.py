# Code generated by jtd-codegen for Python v0.3.1

import re
from dataclasses import dataclass
from datetime import datetime, timedelta, timezone
from typing import Any, Dict, List, Optional, Union, get_args, get_origin


@dataclass
class Senzingapi:
    value: 'Any'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Senzingapi':
        return cls(_from_json_data(Any, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class Address:
    """
    No description.
    """

    addr_city: 'str'
    """
    No description.
    """

    addr_country: 'str'
    """
    No description.
    """

    addr_from_date: 'str'
    """
    No description.
    """

    addr_full: 'str'
    """
    No description.
    """

    addr_line1: 'str'
    """
    No description.
    """

    addr_line2: 'str'
    """
    No description.
    """

    addr_line3: 'str'
    """
    No description.
    """

    addr_line4: 'str'
    """
    No description.
    """

    addr_line5: 'str'
    """
    No description.
    """

    addr_line6: 'str'
    """
    No description.
    """

    addr_postal_code: 'str'
    """
    No description.
    """

    addr_state: 'str'
    """
    No description.
    """

    addr_thru_date: 'str'
    """
    No description.
    """

    addr_type: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'Address':
        return cls(
            _from_json_data(str, data.get("ADDR_CITY")),
            _from_json_data(str, data.get("ADDR_COUNTRY")),
            _from_json_data(str, data.get("ADDR_FROM_DATE")),
            _from_json_data(str, data.get("ADDR_FULL")),
            _from_json_data(str, data.get("ADDR_LINE1")),
            _from_json_data(str, data.get("ADDR_LINE2")),
            _from_json_data(str, data.get("ADDR_LINE3")),
            _from_json_data(str, data.get("ADDR_LINE4")),
            _from_json_data(str, data.get("ADDR_LINE5")),
            _from_json_data(str, data.get("ADDR_LINE6")),
            _from_json_data(str, data.get("ADDR_POSTAL_CODE")),
            _from_json_data(str, data.get("ADDR_STATE")),
            _from_json_data(str, data.get("ADDR_THRU_DATE")),
            _from_json_data(str, data.get("ADDR_TYPE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ADDR_CITY"] = _to_json_data(self.addr_city)
        data["ADDR_COUNTRY"] = _to_json_data(self.addr_country)
        data["ADDR_FROM_DATE"] = _to_json_data(self.addr_from_date)
        data["ADDR_FULL"] = _to_json_data(self.addr_full)
        data["ADDR_LINE1"] = _to_json_data(self.addr_line1)
        data["ADDR_LINE2"] = _to_json_data(self.addr_line2)
        data["ADDR_LINE3"] = _to_json_data(self.addr_line3)
        data["ADDR_LINE4"] = _to_json_data(self.addr_line4)
        data["ADDR_LINE5"] = _to_json_data(self.addr_line5)
        data["ADDR_LINE6"] = _to_json_data(self.addr_line6)
        data["ADDR_POSTAL_CODE"] = _to_json_data(self.addr_postal_code)
        data["ADDR_STATE"] = _to_json_data(self.addr_state)
        data["ADDR_THRU_DATE"] = _to_json_data(self.addr_thru_date)
        data["ADDR_TYPE"] = _to_json_data(self.addr_type)
        return data

@dataclass
class Addresses:
    """
    No description.
    """

    value: 'List[Address]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Addresses':
        return cls(_from_json_data(List[Address], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class AffectedEntities:
    """
    No description.
    """

    value: 'List[AffectedEntity]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'AffectedEntities':
        return cls(_from_json_data(List[AffectedEntity], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class AffectedEntity:
    """
    No description.
    """

    entity_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'AffectedEntity':
        return cls(
            _from_json_data(int, data.get("ENTITY_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITY_ID"] = _to_json_data(self.entity_id)
        return data

@dataclass
class AttributeCounter:
    """
    No description.
    """

    address: 'float'
    """
    No description.
    """

    addr_key: 'float'
    """
    No description.
    """

    call_sign: 'int'
    """
    No description.
    """

    citizenship: 'int'
    """
    No description.
    """

    country_of_association: 'int'
    """
    No description.
    """

    dob: 'float'
    """
    No description.
    """

    drlic: 'float'
    """
    No description.
    """

    duns_number: 'int'
    """
    No description.
    """

    email: 'float'
    """
    No description.
    """

    email_key: 'float'
    """
    No description.
    """

    entity_count: 'int'
    """
    No description.
    """

    entity_size: 'int'
    """
    No description.
    """

    gender: 'float'
    """
    No description.
    """

    id_key: 'float'
    """
    No description.
    """

    imo_number: 'int'
    """
    No description.
    """

    lei_number: 'int'
    """
    No description.
    """

    login_id: 'float'
    """
    No description.
    """

    max_res_ent_id: 'int'
    """
    No description.
    """

    min_res_ent_id: 'int'
    """
    No description.
    """

    name: 'float'
    """
    No description.
    """

    name_key: 'float'
    """
    No description.
    """

    nationality: 'int'
    """
    No description.
    """

    national_id: 'int'
    """
    No description.
    """

    ofac_id: 'int'
    """
    No description.
    """

    other_id: 'float'
    """
    No description.
    """

    passport: 'float'
    """
    No description.
    """

    phone: 'float'
    """
    No description.
    """

    phone_key: 'float'
    """
    No description.
    """

    record_type: 'float'
    """
    No description.
    """

    registration_country: 'int'
    """
    No description.
    """

    registration_date: 'int'
    """
    No description.
    """

    rel_anchor: 'int'
    """
    No description.
    """

    rel_pointer: 'int'
    """
    No description.
    """

    search_key: 'float'
    """
    No description.
    """

    ssn: 'float'
    """
    No description.
    """

    tax_id: 'float'
    """
    No description.
    """

    website: 'float'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'AttributeCounter':
        return cls(
            _from_json_data(float, data.get("ADDRESS")),
            _from_json_data(float, data.get("ADDR_KEY")),
            _from_json_data(int, data.get("CALL_SIGN")),
            _from_json_data(int, data.get("CITIZENSHIP")),
            _from_json_data(int, data.get("COUNTRY_OF_ASSOCIATION")),
            _from_json_data(float, data.get("DOB")),
            _from_json_data(float, data.get("DRLIC")),
            _from_json_data(int, data.get("DUNS_NUMBER")),
            _from_json_data(float, data.get("EMAIL")),
            _from_json_data(float, data.get("EMAIL_KEY")),
            _from_json_data(int, data.get("ENTITY_COUNT")),
            _from_json_data(int, data.get("ENTITY_SIZE")),
            _from_json_data(float, data.get("GENDER")),
            _from_json_data(float, data.get("ID_KEY")),
            _from_json_data(int, data.get("IMO_NUMBER")),
            _from_json_data(int, data.get("LEI_NUMBER")),
            _from_json_data(float, data.get("LOGIN_ID")),
            _from_json_data(int, data.get("MAX_RES_ENT_ID")),
            _from_json_data(int, data.get("MIN_RES_ENT_ID")),
            _from_json_data(float, data.get("NAME")),
            _from_json_data(float, data.get("NAME_KEY")),
            _from_json_data(int, data.get("NATIONALITY")),
            _from_json_data(int, data.get("NATIONAL_ID")),
            _from_json_data(int, data.get("OFAC_ID")),
            _from_json_data(float, data.get("OTHER_ID")),
            _from_json_data(float, data.get("PASSPORT")),
            _from_json_data(float, data.get("PHONE")),
            _from_json_data(float, data.get("PHONE_KEY")),
            _from_json_data(float, data.get("RECORD_TYPE")),
            _from_json_data(int, data.get("REGISTRATION_COUNTRY")),
            _from_json_data(int, data.get("REGISTRATION_DATE")),
            _from_json_data(int, data.get("REL_ANCHOR")),
            _from_json_data(int, data.get("REL_POINTER")),
            _from_json_data(float, data.get("SEARCH_KEY")),
            _from_json_data(float, data.get("SSN")),
            _from_json_data(float, data.get("TAX_ID")),
            _from_json_data(float, data.get("WEBSITE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ADDRESS"] = _to_json_data(self.address)
        data["ADDR_KEY"] = _to_json_data(self.addr_key)
        data["CALL_SIGN"] = _to_json_data(self.call_sign)
        data["CITIZENSHIP"] = _to_json_data(self.citizenship)
        data["COUNTRY_OF_ASSOCIATION"] = _to_json_data(self.country_of_association)
        data["DOB"] = _to_json_data(self.dob)
        data["DRLIC"] = _to_json_data(self.drlic)
        data["DUNS_NUMBER"] = _to_json_data(self.duns_number)
        data["EMAIL"] = _to_json_data(self.email)
        data["EMAIL_KEY"] = _to_json_data(self.email_key)
        data["ENTITY_COUNT"] = _to_json_data(self.entity_count)
        data["ENTITY_SIZE"] = _to_json_data(self.entity_size)
        data["GENDER"] = _to_json_data(self.gender)
        data["ID_KEY"] = _to_json_data(self.id_key)
        data["IMO_NUMBER"] = _to_json_data(self.imo_number)
        data["LEI_NUMBER"] = _to_json_data(self.lei_number)
        data["LOGIN_ID"] = _to_json_data(self.login_id)
        data["MAX_RES_ENT_ID"] = _to_json_data(self.max_res_ent_id)
        data["MIN_RES_ENT_ID"] = _to_json_data(self.min_res_ent_id)
        data["NAME"] = _to_json_data(self.name)
        data["NAME_KEY"] = _to_json_data(self.name_key)
        data["NATIONALITY"] = _to_json_data(self.nationality)
        data["NATIONAL_ID"] = _to_json_data(self.national_id)
        data["OFAC_ID"] = _to_json_data(self.ofac_id)
        data["OTHER_ID"] = _to_json_data(self.other_id)
        data["PASSPORT"] = _to_json_data(self.passport)
        data["PHONE"] = _to_json_data(self.phone)
        data["PHONE_KEY"] = _to_json_data(self.phone_key)
        data["RECORD_TYPE"] = _to_json_data(self.record_type)
        data["REGISTRATION_COUNTRY"] = _to_json_data(self.registration_country)
        data["REGISTRATION_DATE"] = _to_json_data(self.registration_date)
        data["REL_ANCHOR"] = _to_json_data(self.rel_anchor)
        data["REL_POINTER"] = _to_json_data(self.rel_pointer)
        data["SEARCH_KEY"] = _to_json_data(self.search_key)
        data["SSN"] = _to_json_data(self.ssn)
        data["TAX_ID"] = _to_json_data(self.tax_id)
        data["WEBSITE"] = _to_json_data(self.website)
        return data

@dataclass
class AttributeCounters:
    """
    No description.
    """

    value: 'List[AttributeCounter]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'AttributeCounters':
        return cls(_from_json_data(List[AttributeCounter], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class CfgAttr:
    """
    No description.
    """

    advanced: 'str'
    """
    No description.
    """

    attr_class: 'str'
    """
    No description.
    """

    attr_code: 'str'
    """
    No description.
    """

    attr_id: 'int'
    """
    No description.
    """

    default_value: 'str'
    """
    No description.
    """

    felem_code: 'str'
    """
    No description.
    """

    felem_req: 'str'
    """
    No description.
    """

    ftype_code: 'str'
    """
    No description.
    """

    internal: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgAttr':
        return cls(
            _from_json_data(str, data.get("ADVANCED")),
            _from_json_data(str, data.get("ATTR_CLASS")),
            _from_json_data(str, data.get("ATTR_CODE")),
            _from_json_data(int, data.get("ATTR_ID")),
            _from_json_data(str, data.get("DEFAULT_VALUE")),
            _from_json_data(str, data.get("FELEM_CODE")),
            _from_json_data(str, data.get("FELEM_REQ")),
            _from_json_data(str, data.get("FTYPE_CODE")),
            _from_json_data(str, data.get("INTERNAL")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ADVANCED"] = _to_json_data(self.advanced)
        data["ATTR_CLASS"] = _to_json_data(self.attr_class)
        data["ATTR_CODE"] = _to_json_data(self.attr_code)
        data["ATTR_ID"] = _to_json_data(self.attr_id)
        data["DEFAULT_VALUE"] = _to_json_data(self.default_value)
        data["FELEM_CODE"] = _to_json_data(self.felem_code)
        data["FELEM_REQ"] = _to_json_data(self.felem_req)
        data["FTYPE_CODE"] = _to_json_data(self.ftype_code)
        data["INTERNAL"] = _to_json_data(self.internal)
        return data

@dataclass
class CfgCfbom:
    """
    No description.
    """

    cfcall_id: 'int'
    """
    No description.
    """

    exec_order: 'int'
    """
    No description.
    """

    felem_id: 'int'
    """
    No description.
    """

    ftype_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgCfbom':
        return cls(
            _from_json_data(int, data.get("CFCALL_ID")),
            _from_json_data(int, data.get("EXEC_ORDER")),
            _from_json_data(int, data.get("FELEM_ID")),
            _from_json_data(int, data.get("FTYPE_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CFCALL_ID"] = _to_json_data(self.cfcall_id)
        data["EXEC_ORDER"] = _to_json_data(self.exec_order)
        data["FELEM_ID"] = _to_json_data(self.felem_id)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        return data

@dataclass
class CfgCfcall:
    """
    No description.
    """

    cfcall_id: 'int'
    """
    No description.
    """

    cfunc_id: 'int'
    """
    No description.
    """

    exec_order: 'int'
    """
    No description.
    """

    ftype_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgCfcall':
        return cls(
            _from_json_data(int, data.get("CFCALL_ID")),
            _from_json_data(int, data.get("CFUNC_ID")),
            _from_json_data(int, data.get("EXEC_ORDER")),
            _from_json_data(int, data.get("FTYPE_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CFCALL_ID"] = _to_json_data(self.cfcall_id)
        data["CFUNC_ID"] = _to_json_data(self.cfunc_id)
        data["EXEC_ORDER"] = _to_json_data(self.exec_order)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        return data

@dataclass
class CfgCfrtn:
    """
    No description.
    """

    cfrtn_id: 'int'
    """
    No description.
    """

    cfunc_id: 'int'
    """
    No description.
    """

    cfunc_rtnval: 'str'
    """
    No description.
    """

    close_score: 'int'
    """
    No description.
    """

    exec_order: 'int'
    """
    No description.
    """

    ftype_id: 'int'
    """
    No description.
    """

    likely_score: 'int'
    """
    No description.
    """

    plausible_score: 'int'
    """
    No description.
    """

    same_score: 'int'
    """
    No description.
    """

    un_likely_score: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgCfrtn':
        return cls(
            _from_json_data(int, data.get("CFRTN_ID")),
            _from_json_data(int, data.get("CFUNC_ID")),
            _from_json_data(str, data.get("CFUNC_RTNVAL")),
            _from_json_data(int, data.get("CLOSE_SCORE")),
            _from_json_data(int, data.get("EXEC_ORDER")),
            _from_json_data(int, data.get("FTYPE_ID")),
            _from_json_data(int, data.get("LIKELY_SCORE")),
            _from_json_data(int, data.get("PLAUSIBLE_SCORE")),
            _from_json_data(int, data.get("SAME_SCORE")),
            _from_json_data(int, data.get("UN_LIKELY_SCORE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CFRTN_ID"] = _to_json_data(self.cfrtn_id)
        data["CFUNC_ID"] = _to_json_data(self.cfunc_id)
        data["CFUNC_RTNVAL"] = _to_json_data(self.cfunc_rtnval)
        data["CLOSE_SCORE"] = _to_json_data(self.close_score)
        data["EXEC_ORDER"] = _to_json_data(self.exec_order)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        data["LIKELY_SCORE"] = _to_json_data(self.likely_score)
        data["PLAUSIBLE_SCORE"] = _to_json_data(self.plausible_score)
        data["SAME_SCORE"] = _to_json_data(self.same_score)
        data["UN_LIKELY_SCORE"] = _to_json_data(self.un_likely_score)
        return data

@dataclass
class CfgCfunc:
    """
    No description.
    """

    anon_support: 'str'
    """
    No description.
    """

    cfunc_code: 'str'
    """
    No description.
    """

    cfunc_desc: 'str'
    """
    No description.
    """

    cfunc_id: 'int'
    """
    No description.
    """

    connect_str: 'str'
    """
    No description.
    """

    func_lib: 'str'
    """
    No description.
    """

    func_ver: 'str'
    """
    No description.
    """

    java_class_name: 'str'
    """
    No description.
    """

    language: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgCfunc':
        return cls(
            _from_json_data(str, data.get("ANON_SUPPORT")),
            _from_json_data(str, data.get("CFUNC_CODE")),
            _from_json_data(str, data.get("CFUNC_DESC")),
            _from_json_data(int, data.get("CFUNC_ID")),
            _from_json_data(str, data.get("CONNECT_STR")),
            _from_json_data(str, data.get("FUNC_LIB")),
            _from_json_data(str, data.get("FUNC_VER")),
            _from_json_data(str, data.get("JAVA_CLASS_NAME")),
            _from_json_data(str, data.get("LANGUAGE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ANON_SUPPORT"] = _to_json_data(self.anon_support)
        data["CFUNC_CODE"] = _to_json_data(self.cfunc_code)
        data["CFUNC_DESC"] = _to_json_data(self.cfunc_desc)
        data["CFUNC_ID"] = _to_json_data(self.cfunc_id)
        data["CONNECT_STR"] = _to_json_data(self.connect_str)
        data["FUNC_LIB"] = _to_json_data(self.func_lib)
        data["FUNC_VER"] = _to_json_data(self.func_ver)
        data["JAVA_CLASS_NAME"] = _to_json_data(self.java_class_name)
        data["LANGUAGE"] = _to_json_data(self.language)
        return data

@dataclass
class CfgDfbom:
    """
    No description.
    """

    dfcall_id: 'int'
    """
    No description.
    """

    exec_order: 'int'
    """
    No description.
    """

    felem_id: 'int'
    """
    No description.
    """

    ftype_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgDfbom':
        return cls(
            _from_json_data(int, data.get("DFCALL_ID")),
            _from_json_data(int, data.get("EXEC_ORDER")),
            _from_json_data(int, data.get("FELEM_ID")),
            _from_json_data(int, data.get("FTYPE_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DFCALL_ID"] = _to_json_data(self.dfcall_id)
        data["EXEC_ORDER"] = _to_json_data(self.exec_order)
        data["FELEM_ID"] = _to_json_data(self.felem_id)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        return data

@dataclass
class CfgDfcall:
    """
    No description.
    """

    dfcall_id: 'int'
    """
    No description.
    """

    dfunc_id: 'int'
    """
    No description.
    """

    exec_order: 'int'
    """
    No description.
    """

    ftype_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgDfcall':
        return cls(
            _from_json_data(int, data.get("DFCALL_ID")),
            _from_json_data(int, data.get("DFUNC_ID")),
            _from_json_data(int, data.get("EXEC_ORDER")),
            _from_json_data(int, data.get("FTYPE_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DFCALL_ID"] = _to_json_data(self.dfcall_id)
        data["DFUNC_ID"] = _to_json_data(self.dfunc_id)
        data["EXEC_ORDER"] = _to_json_data(self.exec_order)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        return data

@dataclass
class CfgDfunc:
    """
    No description.
    """

    anon_support: 'str'
    """
    No description.
    """

    connect_str: 'str'
    """
    No description.
    """

    dfunc_code: 'str'
    """
    No description.
    """

    dfunc_desc: 'str'
    """
    No description.
    """

    dfunc_id: 'int'
    """
    No description.
    """

    func_lib: 'str'
    """
    No description.
    """

    func_ver: 'str'
    """
    No description.
    """

    java_class_name: 'str'
    """
    No description.
    """

    language: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgDfunc':
        return cls(
            _from_json_data(str, data.get("ANON_SUPPORT")),
            _from_json_data(str, data.get("CONNECT_STR")),
            _from_json_data(str, data.get("DFUNC_CODE")),
            _from_json_data(str, data.get("DFUNC_DESC")),
            _from_json_data(int, data.get("DFUNC_ID")),
            _from_json_data(str, data.get("FUNC_LIB")),
            _from_json_data(str, data.get("FUNC_VER")),
            _from_json_data(str, data.get("JAVA_CLASS_NAME")),
            _from_json_data(str, data.get("LANGUAGE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ANON_SUPPORT"] = _to_json_data(self.anon_support)
        data["CONNECT_STR"] = _to_json_data(self.connect_str)
        data["DFUNC_CODE"] = _to_json_data(self.dfunc_code)
        data["DFUNC_DESC"] = _to_json_data(self.dfunc_desc)
        data["DFUNC_ID"] = _to_json_data(self.dfunc_id)
        data["FUNC_LIB"] = _to_json_data(self.func_lib)
        data["FUNC_VER"] = _to_json_data(self.func_ver)
        data["JAVA_CLASS_NAME"] = _to_json_data(self.java_class_name)
        data["LANGUAGE"] = _to_json_data(self.language)
        return data

@dataclass
class CfgDsrc:
    """
    No description.
    """

    conversational: 'str'
    """
    No description.
    """

    dsrc_code: 'str'
    """
    No description.
    """

    dsrc_desc: 'str'
    """
    No description.
    """

    dsrc_id: 'int'
    """
    No description.
    """

    dsrc_rely: 'int'
    """
    No description.
    """

    retention_level: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgDsrc':
        return cls(
            _from_json_data(str, data.get("CONVERSATIONAL")),
            _from_json_data(str, data.get("DSRC_CODE")),
            _from_json_data(str, data.get("DSRC_DESC")),
            _from_json_data(int, data.get("DSRC_ID")),
            _from_json_data(int, data.get("DSRC_RELY")),
            _from_json_data(str, data.get("RETENTION_LEVEL")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CONVERSATIONAL"] = _to_json_data(self.conversational)
        data["DSRC_CODE"] = _to_json_data(self.dsrc_code)
        data["DSRC_DESC"] = _to_json_data(self.dsrc_desc)
        data["DSRC_ID"] = _to_json_data(self.dsrc_id)
        data["DSRC_RELY"] = _to_json_data(self.dsrc_rely)
        data["RETENTION_LEVEL"] = _to_json_data(self.retention_level)
        return data

@dataclass
class CfgDsrcInterest:
    """
    No description.
    """

    dsrc_id: 'int'
    """
    No description.
    """

    interest_flag: 'str'
    """
    No description.
    """

    max_degree: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgDsrcInterest':
        return cls(
            _from_json_data(int, data.get("DSRC_ID")),
            _from_json_data(str, data.get("INTEREST_FLAG")),
            _from_json_data(int, data.get("MAX_DEGREE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DSRC_ID"] = _to_json_data(self.dsrc_id)
        data["INTEREST_FLAG"] = _to_json_data(self.interest_flag)
        data["MAX_DEGREE"] = _to_json_data(self.max_degree)
        return data

@dataclass
class CfgEbom:
    """
    No description.
    """

    etype_id: 'int'
    """
    No description.
    """

    exec_order: 'int'
    """
    No description.
    """

    ftype_id: 'int'
    """
    No description.
    """

    utype_code: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgEbom':
        return cls(
            _from_json_data(int, data.get("ETYPE_ID")),
            _from_json_data(int, data.get("EXEC_ORDER")),
            _from_json_data(int, data.get("FTYPE_ID")),
            _from_json_data(str, data.get("UTYPE_CODE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ETYPE_ID"] = _to_json_data(self.etype_id)
        data["EXEC_ORDER"] = _to_json_data(self.exec_order)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        data["UTYPE_CODE"] = _to_json_data(self.utype_code)
        return data

@dataclass
class CfgEclass:
    """
    No description.
    """

    eclass_code: 'str'
    """
    No description.
    """

    eclass_desc: 'str'
    """
    No description.
    """

    eclass_id: 'int'
    """
    No description.
    """

    resolve: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgEclass':
        return cls(
            _from_json_data(str, data.get("ECLASS_CODE")),
            _from_json_data(str, data.get("ECLASS_DESC")),
            _from_json_data(int, data.get("ECLASS_ID")),
            _from_json_data(str, data.get("RESOLVE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ECLASS_CODE"] = _to_json_data(self.eclass_code)
        data["ECLASS_DESC"] = _to_json_data(self.eclass_desc)
        data["ECLASS_ID"] = _to_json_data(self.eclass_id)
        data["RESOLVE"] = _to_json_data(self.resolve)
        return data

@dataclass
class CfgEfbom:
    """
    No description.
    """

    efcall_id: 'int'
    """
    No description.
    """

    exec_order: 'int'
    """
    No description.
    """

    felem_id: 'int'
    """
    No description.
    """

    felem_req: 'str'
    """
    No description.
    """

    ftype_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgEfbom':
        return cls(
            _from_json_data(int, data.get("EFCALL_ID")),
            _from_json_data(int, data.get("EXEC_ORDER")),
            _from_json_data(int, data.get("FELEM_ID")),
            _from_json_data(str, data.get("FELEM_REQ")),
            _from_json_data(int, data.get("FTYPE_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["EFCALL_ID"] = _to_json_data(self.efcall_id)
        data["EXEC_ORDER"] = _to_json_data(self.exec_order)
        data["FELEM_ID"] = _to_json_data(self.felem_id)
        data["FELEM_REQ"] = _to_json_data(self.felem_req)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        return data

@dataclass
class CfgEfcall:
    """
    No description.
    """

    efcall_id: 'int'
    """
    No description.
    """

    efeat_ftype_id: 'int'
    """
    No description.
    """

    efunc_id: 'int'
    """
    No description.
    """

    exec_order: 'int'
    """
    No description.
    """

    felem_id: 'int'
    """
    No description.
    """

    ftype_id: 'int'
    """
    No description.
    """

    is_virtual: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgEfcall':
        return cls(
            _from_json_data(int, data.get("EFCALL_ID")),
            _from_json_data(int, data.get("EFEAT_FTYPE_ID")),
            _from_json_data(int, data.get("EFUNC_ID")),
            _from_json_data(int, data.get("EXEC_ORDER")),
            _from_json_data(int, data.get("FELEM_ID")),
            _from_json_data(int, data.get("FTYPE_ID")),
            _from_json_data(str, data.get("IS_VIRTUAL")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["EFCALL_ID"] = _to_json_data(self.efcall_id)
        data["EFEAT_FTYPE_ID"] = _to_json_data(self.efeat_ftype_id)
        data["EFUNC_ID"] = _to_json_data(self.efunc_id)
        data["EXEC_ORDER"] = _to_json_data(self.exec_order)
        data["FELEM_ID"] = _to_json_data(self.felem_id)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        data["IS_VIRTUAL"] = _to_json_data(self.is_virtual)
        return data

@dataclass
class CfgEfunc:
    """
    No description.
    """

    connect_str: 'str'
    """
    No description.
    """

    efunc_code: 'str'
    """
    No description.
    """

    efunc_desc: 'str'
    """
    No description.
    """

    efunc_id: 'int'
    """
    No description.
    """

    func_lib: 'str'
    """
    No description.
    """

    func_ver: 'str'
    """
    No description.
    """

    java_class_name: 'str'
    """
    No description.
    """

    language: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgEfunc':
        return cls(
            _from_json_data(str, data.get("CONNECT_STR")),
            _from_json_data(str, data.get("EFUNC_CODE")),
            _from_json_data(str, data.get("EFUNC_DESC")),
            _from_json_data(int, data.get("EFUNC_ID")),
            _from_json_data(str, data.get("FUNC_LIB")),
            _from_json_data(str, data.get("FUNC_VER")),
            _from_json_data(str, data.get("JAVA_CLASS_NAME")),
            _from_json_data(str, data.get("LANGUAGE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CONNECT_STR"] = _to_json_data(self.connect_str)
        data["EFUNC_CODE"] = _to_json_data(self.efunc_code)
        data["EFUNC_DESC"] = _to_json_data(self.efunc_desc)
        data["EFUNC_ID"] = _to_json_data(self.efunc_id)
        data["FUNC_LIB"] = _to_json_data(self.func_lib)
        data["FUNC_VER"] = _to_json_data(self.func_ver)
        data["JAVA_CLASS_NAME"] = _to_json_data(self.java_class_name)
        data["LANGUAGE"] = _to_json_data(self.language)
        return data

@dataclass
class CfgErfrag:
    """
    No description.
    """

    erfrag_code: 'str'
    """
    No description.
    """

    erfrag_depends: 'str'
    """
    No description.
    """

    erfrag_desc: 'str'
    """
    No description.
    """

    erfrag_id: 'int'
    """
    No description.
    """

    erfrag_source: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgErfrag':
        return cls(
            _from_json_data(str, data.get("ERFRAG_CODE")),
            _from_json_data(str, data.get("ERFRAG_DEPENDS")),
            _from_json_data(str, data.get("ERFRAG_DESC")),
            _from_json_data(int, data.get("ERFRAG_ID")),
            _from_json_data(str, data.get("ERFRAG_SOURCE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ERFRAG_CODE"] = _to_json_data(self.erfrag_code)
        data["ERFRAG_DEPENDS"] = _to_json_data(self.erfrag_depends)
        data["ERFRAG_DESC"] = _to_json_data(self.erfrag_desc)
        data["ERFRAG_ID"] = _to_json_data(self.erfrag_id)
        data["ERFRAG_SOURCE"] = _to_json_data(self.erfrag_source)
        return data

@dataclass
class CfgErrule:
    """
    No description.
    """

    disq_erfrag_code: 'str'
    """
    No description.
    """

    errule_code: 'str'
    """
    No description.
    """

    errule_desc: 'str'
    """
    No description.
    """

    errule_id: 'int'
    """
    No description.
    """

    errule_tier: 'int'
    """
    No description.
    """

    qual_erfrag_code: 'str'
    """
    No description.
    """

    ref_score: 'int'
    """
    No description.
    """

    relate: 'str'
    """
    No description.
    """

    resolve: 'str'
    """
    No description.
    """

    rtype_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgErrule':
        return cls(
            _from_json_data(str, data.get("DISQ_ERFRAG_CODE")),
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(str, data.get("ERRULE_DESC")),
            _from_json_data(int, data.get("ERRULE_ID")),
            _from_json_data(int, data.get("ERRULE_TIER")),
            _from_json_data(str, data.get("QUAL_ERFRAG_CODE")),
            _from_json_data(int, data.get("REF_SCORE")),
            _from_json_data(str, data.get("RELATE")),
            _from_json_data(str, data.get("RESOLVE")),
            _from_json_data(int, data.get("RTYPE_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DISQ_ERFRAG_CODE"] = _to_json_data(self.disq_erfrag_code)
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["ERRULE_DESC"] = _to_json_data(self.errule_desc)
        data["ERRULE_ID"] = _to_json_data(self.errule_id)
        data["ERRULE_TIER"] = _to_json_data(self.errule_tier)
        data["QUAL_ERFRAG_CODE"] = _to_json_data(self.qual_erfrag_code)
        data["REF_SCORE"] = _to_json_data(self.ref_score)
        data["RELATE"] = _to_json_data(self.relate)
        data["RESOLVE"] = _to_json_data(self.resolve)
        data["RTYPE_ID"] = _to_json_data(self.rtype_id)
        return data

@dataclass
class CfgEtype:
    """
    No description.
    """

    eclass_id: 'int'
    """
    No description.
    """

    etype_code: 'str'
    """
    No description.
    """

    etype_desc: 'str'
    """
    No description.
    """

    etype_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgEtype':
        return cls(
            _from_json_data(int, data.get("ECLASS_ID")),
            _from_json_data(str, data.get("ETYPE_CODE")),
            _from_json_data(str, data.get("ETYPE_DESC")),
            _from_json_data(int, data.get("ETYPE_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ECLASS_ID"] = _to_json_data(self.eclass_id)
        data["ETYPE_CODE"] = _to_json_data(self.etype_code)
        data["ETYPE_DESC"] = _to_json_data(self.etype_desc)
        data["ETYPE_ID"] = _to_json_data(self.etype_id)
        return data

@dataclass
class CfgFbom:
    """
    No description.
    """

    derived: 'str'
    """
    No description.
    """

    display_delim: 'str'
    """
    No description.
    """

    display_level: 'int'
    """
    No description.
    """

    exec_order: 'int'
    """
    No description.
    """

    felem_id: 'int'
    """
    No description.
    """

    ftype_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgFbom':
        return cls(
            _from_json_data(str, data.get("DERIVED")),
            _from_json_data(str, data.get("DISPLAY_DELIM")),
            _from_json_data(int, data.get("DISPLAY_LEVEL")),
            _from_json_data(int, data.get("EXEC_ORDER")),
            _from_json_data(int, data.get("FELEM_ID")),
            _from_json_data(int, data.get("FTYPE_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DERIVED"] = _to_json_data(self.derived)
        data["DISPLAY_DELIM"] = _to_json_data(self.display_delim)
        data["DISPLAY_LEVEL"] = _to_json_data(self.display_level)
        data["EXEC_ORDER"] = _to_json_data(self.exec_order)
        data["FELEM_ID"] = _to_json_data(self.felem_id)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        return data

@dataclass
class CfgFbovr:
    """
    No description.
    """

    eclass_id: 'int'
    """
    No description.
    """

    ftype_excl: 'str'
    """
    No description.
    """

    ftype_freq: 'str'
    """
    No description.
    """

    ftype_id: 'int'
    """
    No description.
    """

    ftype_stab: 'str'
    """
    No description.
    """

    utype_code: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgFbovr':
        return cls(
            _from_json_data(int, data.get("ECLASS_ID")),
            _from_json_data(str, data.get("FTYPE_EXCL")),
            _from_json_data(str, data.get("FTYPE_FREQ")),
            _from_json_data(int, data.get("FTYPE_ID")),
            _from_json_data(str, data.get("FTYPE_STAB")),
            _from_json_data(str, data.get("UTYPE_CODE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ECLASS_ID"] = _to_json_data(self.eclass_id)
        data["FTYPE_EXCL"] = _to_json_data(self.ftype_excl)
        data["FTYPE_FREQ"] = _to_json_data(self.ftype_freq)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        data["FTYPE_STAB"] = _to_json_data(self.ftype_stab)
        data["UTYPE_CODE"] = _to_json_data(self.utype_code)
        return data

@dataclass
class CfgFclass:
    """
    No description.
    """

    fclass_code: 'str'
    """
    No description.
    """

    fclass_desc: 'str'
    """
    No description.
    """

    fclass_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgFclass':
        return cls(
            _from_json_data(str, data.get("FCLASS_CODE")),
            _from_json_data(str, data.get("FCLASS_DESC")),
            _from_json_data(int, data.get("FCLASS_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FCLASS_CODE"] = _to_json_data(self.fclass_code)
        data["FCLASS_DESC"] = _to_json_data(self.fclass_desc)
        data["FCLASS_ID"] = _to_json_data(self.fclass_id)
        return data

@dataclass
class CfgFelem:
    """
    No description.
    """

    data_type: 'str'
    """
    No description.
    """

    felem_code: 'str'
    """
    No description.
    """

    felem_desc: 'str'
    """
    No description.
    """

    felem_id: 'int'
    """
    No description.
    """

    tokenize: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgFelem':
        return cls(
            _from_json_data(str, data.get("DATA_TYPE")),
            _from_json_data(str, data.get("FELEM_CODE")),
            _from_json_data(str, data.get("FELEM_DESC")),
            _from_json_data(int, data.get("FELEM_ID")),
            _from_json_data(str, data.get("TOKENIZE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DATA_TYPE"] = _to_json_data(self.data_type)
        data["FELEM_CODE"] = _to_json_data(self.felem_code)
        data["FELEM_DESC"] = _to_json_data(self.felem_desc)
        data["FELEM_ID"] = _to_json_data(self.felem_id)
        data["TOKENIZE"] = _to_json_data(self.tokenize)
        return data

@dataclass
class CfgFtype:
    """
    No description.
    """

    anonymize: 'str'
    """
    No description.
    """

    derivation: 'str'
    """
    No description.
    """

    derived: 'str'
    """
    No description.
    """

    fclass_id: 'int'
    """
    No description.
    """

    ftype_code: 'str'
    """
    No description.
    """

    ftype_desc: 'str'
    """
    No description.
    """

    ftype_excl: 'str'
    """
    No description.
    """

    ftype_freq: 'str'
    """
    No description.
    """

    ftype_id: 'int'
    """
    No description.
    """

    ftype_stab: 'str'
    """
    No description.
    """

    persist_history: 'str'
    """
    No description.
    """

    rtype_id: 'int'
    """
    No description.
    """

    show_in_match_key: 'str'
    """
    No description.
    """

    used_for_cand: 'str'
    """
    No description.
    """

    version: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgFtype':
        return cls(
            _from_json_data(str, data.get("ANONYMIZE")),
            _from_json_data(str, data.get("DERIVATION")),
            _from_json_data(str, data.get("DERIVED")),
            _from_json_data(int, data.get("FCLASS_ID")),
            _from_json_data(str, data.get("FTYPE_CODE")),
            _from_json_data(str, data.get("FTYPE_DESC")),
            _from_json_data(str, data.get("FTYPE_EXCL")),
            _from_json_data(str, data.get("FTYPE_FREQ")),
            _from_json_data(int, data.get("FTYPE_ID")),
            _from_json_data(str, data.get("FTYPE_STAB")),
            _from_json_data(str, data.get("PERSIST_HISTORY")),
            _from_json_data(int, data.get("RTYPE_ID")),
            _from_json_data(str, data.get("SHOW_IN_MATCH_KEY")),
            _from_json_data(str, data.get("USED_FOR_CAND")),
            _from_json_data(int, data.get("VERSION")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ANONYMIZE"] = _to_json_data(self.anonymize)
        data["DERIVATION"] = _to_json_data(self.derivation)
        data["DERIVED"] = _to_json_data(self.derived)
        data["FCLASS_ID"] = _to_json_data(self.fclass_id)
        data["FTYPE_CODE"] = _to_json_data(self.ftype_code)
        data["FTYPE_DESC"] = _to_json_data(self.ftype_desc)
        data["FTYPE_EXCL"] = _to_json_data(self.ftype_excl)
        data["FTYPE_FREQ"] = _to_json_data(self.ftype_freq)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        data["FTYPE_STAB"] = _to_json_data(self.ftype_stab)
        data["PERSIST_HISTORY"] = _to_json_data(self.persist_history)
        data["RTYPE_ID"] = _to_json_data(self.rtype_id)
        data["SHOW_IN_MATCH_KEY"] = _to_json_data(self.show_in_match_key)
        data["USED_FOR_CAND"] = _to_json_data(self.used_for_cand)
        data["VERSION"] = _to_json_data(self.version)
        return data

@dataclass
class CfgGenericThreshold:
    """
    No description.
    """

    behavior: 'str'
    """
    No description.
    """

    candidate_cap: 'int'
    """
    No description.
    """

    ftype_id: 'int'
    """
    No description.
    """

    gplan_id: 'int'
    """
    No description.
    """

    scoring_cap: 'int'
    """
    No description.
    """

    send_to_redo: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgGenericThreshold':
        return cls(
            _from_json_data(str, data.get("BEHAVIOR")),
            _from_json_data(int, data.get("CANDIDATE_CAP")),
            _from_json_data(int, data.get("FTYPE_ID")),
            _from_json_data(int, data.get("GPLAN_ID")),
            _from_json_data(int, data.get("SCORING_CAP")),
            _from_json_data(str, data.get("SEND_TO_REDO")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["BEHAVIOR"] = _to_json_data(self.behavior)
        data["CANDIDATE_CAP"] = _to_json_data(self.candidate_cap)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        data["GPLAN_ID"] = _to_json_data(self.gplan_id)
        data["SCORING_CAP"] = _to_json_data(self.scoring_cap)
        data["SEND_TO_REDO"] = _to_json_data(self.send_to_redo)
        return data

@dataclass
class CfgGplan:
    """
    No description.
    """

    gplan_code: 'str'
    """
    No description.
    """

    gplan_desc: 'str'
    """
    No description.
    """

    gplan_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgGplan':
        return cls(
            _from_json_data(str, data.get("GPLAN_CODE")),
            _from_json_data(str, data.get("GPLAN_DESC")),
            _from_json_data(int, data.get("GPLAN_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["GPLAN_CODE"] = _to_json_data(self.gplan_code)
        data["GPLAN_DESC"] = _to_json_data(self.gplan_desc)
        data["GPLAN_ID"] = _to_json_data(self.gplan_id)
        return data

@dataclass
class CfgLens:
    """
    No description.
    """

    lens_code: 'str'
    """
    No description.
    """

    lens_desc: 'str'
    """
    No description.
    """

    lens_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgLens':
        return cls(
            _from_json_data(str, data.get("LENS_CODE")),
            _from_json_data(str, data.get("LENS_DESC")),
            _from_json_data(int, data.get("LENS_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["LENS_CODE"] = _to_json_data(self.lens_code)
        data["LENS_DESC"] = _to_json_data(self.lens_desc)
        data["LENS_ID"] = _to_json_data(self.lens_id)
        return data

@dataclass
class CfgLensrl:
    """
    No description.
    """

    value: 'List[Any]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgLensrl':
        return cls(_from_json_data(List[Any], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class CfgRclass:
    """
    No description.
    """

    is_disclosed: 'str'
    """
    No description.
    """

    rclass_code: 'str'
    """
    No description.
    """

    rclass_desc: 'str'
    """
    No description.
    """

    rclass_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgRclass':
        return cls(
            _from_json_data(str, data.get("IS_DISCLOSED")),
            _from_json_data(str, data.get("RCLASS_CODE")),
            _from_json_data(str, data.get("RCLASS_DESC")),
            _from_json_data(int, data.get("RCLASS_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["IS_DISCLOSED"] = _to_json_data(self.is_disclosed)
        data["RCLASS_CODE"] = _to_json_data(self.rclass_code)
        data["RCLASS_DESC"] = _to_json_data(self.rclass_desc)
        data["RCLASS_ID"] = _to_json_data(self.rclass_id)
        return data

@dataclass
class CfgRtype:
    """
    No description.
    """

    break_res: 'str'
    """
    No description.
    """

    rclass_id: 'int'
    """
    No description.
    """

    rel_strength: 'int'
    """
    No description.
    """

    rtype_code: 'str'
    """
    No description.
    """

    rtype_desc: 'str'
    """
    No description.
    """

    rtype_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgRtype':
        return cls(
            _from_json_data(str, data.get("BREAK_RES")),
            _from_json_data(int, data.get("RCLASS_ID")),
            _from_json_data(int, data.get("REL_STRENGTH")),
            _from_json_data(str, data.get("RTYPE_CODE")),
            _from_json_data(str, data.get("RTYPE_DESC")),
            _from_json_data(int, data.get("RTYPE_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["BREAK_RES"] = _to_json_data(self.break_res)
        data["RCLASS_ID"] = _to_json_data(self.rclass_id)
        data["REL_STRENGTH"] = _to_json_data(self.rel_strength)
        data["RTYPE_CODE"] = _to_json_data(self.rtype_code)
        data["RTYPE_DESC"] = _to_json_data(self.rtype_desc)
        data["RTYPE_ID"] = _to_json_data(self.rtype_id)
        return data

@dataclass
class CfgSfcall:
    """
    No description.
    """

    exec_order: 'int'
    """
    No description.
    """

    felem_id: 'int'
    """
    No description.
    """

    ftype_id: 'int'
    """
    No description.
    """

    sfcall_id: 'int'
    """
    No description.
    """

    sfunc_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgSfcall':
        return cls(
            _from_json_data(int, data.get("EXEC_ORDER")),
            _from_json_data(int, data.get("FELEM_ID")),
            _from_json_data(int, data.get("FTYPE_ID")),
            _from_json_data(int, data.get("SFCALL_ID")),
            _from_json_data(int, data.get("SFUNC_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["EXEC_ORDER"] = _to_json_data(self.exec_order)
        data["FELEM_ID"] = _to_json_data(self.felem_id)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        data["SFCALL_ID"] = _to_json_data(self.sfcall_id)
        data["SFUNC_ID"] = _to_json_data(self.sfunc_id)
        return data

@dataclass
class CfgSfunc:
    """
    No description.
    """

    connect_str: 'str'
    """
    No description.
    """

    func_lib: 'str'
    """
    No description.
    """

    func_ver: 'str'
    """
    No description.
    """

    java_class_name: 'str'
    """
    No description.
    """

    language: 'str'
    """
    No description.
    """

    sfunc_code: 'str'
    """
    No description.
    """

    sfunc_desc: 'str'
    """
    No description.
    """

    sfunc_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CfgSfunc':
        return cls(
            _from_json_data(str, data.get("CONNECT_STR")),
            _from_json_data(str, data.get("FUNC_LIB")),
            _from_json_data(str, data.get("FUNC_VER")),
            _from_json_data(str, data.get("JAVA_CLASS_NAME")),
            _from_json_data(str, data.get("LANGUAGE")),
            _from_json_data(str, data.get("SFUNC_CODE")),
            _from_json_data(str, data.get("SFUNC_DESC")),
            _from_json_data(int, data.get("SFUNC_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CONNECT_STR"] = _to_json_data(self.connect_str)
        data["FUNC_LIB"] = _to_json_data(self.func_lib)
        data["FUNC_VER"] = _to_json_data(self.func_ver)
        data["JAVA_CLASS_NAME"] = _to_json_data(self.java_class_name)
        data["LANGUAGE"] = _to_json_data(self.language)
        data["SFUNC_CODE"] = _to_json_data(self.sfunc_code)
        data["SFUNC_DESC"] = _to_json_data(self.sfunc_desc)
        data["SFUNC_ID"] = _to_json_data(self.sfunc_id)
        return data

@dataclass
class ConfigBaseVersion:
    """
    No description.
    """

    build_date: 'str'
    """
    No description.
    """

    build_number: 'str'
    """
    No description.
    """

    build_version: 'str'
    """
    No description.
    """

    compatibility_version: 'CompatibilityVersion'
    """
    No description.
    """

    product_name: 'str'
    """
    No description.
    """

    version: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'ConfigBaseVersion':
        return cls(
            _from_json_data(str, data.get("BUILD_DATE")),
            _from_json_data(str, data.get("BUILD_NUMBER")),
            _from_json_data(str, data.get("BUILD_VERSION")),
            _from_json_data(CompatibilityVersion, data.get("COMPATIBILITY_VERSION")),
            _from_json_data(str, data.get("PRODUCT_NAME")),
            _from_json_data(str, data.get("VERSION")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["BUILD_DATE"] = _to_json_data(self.build_date)
        data["BUILD_NUMBER"] = _to_json_data(self.build_number)
        data["BUILD_VERSION"] = _to_json_data(self.build_version)
        data["COMPATIBILITY_VERSION"] = _to_json_data(self.compatibility_version)
        data["PRODUCT_NAME"] = _to_json_data(self.product_name)
        data["VERSION"] = _to_json_data(self.version)
        return data

@dataclass
class CompatibilityVersion:
    """
    No description.
    """

    config_version: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'CompatibilityVersion':
        return cls(
            _from_json_data(str, data.get("CONFIG_VERSION")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CONFIG_VERSION"] = _to_json_data(self.config_version)
        return data

@dataclass
class Config:
    """
    No description.
    """

    config_comments: 'str'
    """
    No description.
    """

    config_id: 'int'
    """
    No description.
    """

    sys_create_dt: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'Config':
        return cls(
            _from_json_data(str, data.get("CONFIG_COMMENTS")),
            _from_json_data(int, data.get("CONFIG_ID")),
            _from_json_data(str, data.get("SYS_CREATE_DT")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CONFIG_COMMENTS"] = _to_json_data(self.config_comments)
        data["CONFIG_ID"] = _to_json_data(self.config_id)
        data["SYS_CREATE_DT"] = _to_json_data(self.sys_create_dt)
        return data

@dataclass
class ConfigAddDataSourceResponse:
    """
    No description.
    """

    dsrc_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'ConfigAddDataSourceResponse':
        return cls(
            _from_json_data(int, data.get("DSRC_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DSRC_ID"] = _to_json_data(self.dsrc_id)
        return data

@dataclass
class ConfigListDataSourcesResponse:
    """
    No description.
    """

    data_sources: 'DataSources'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'ConfigListDataSourcesResponse':
        return cls(
            _from_json_data(DataSources, data.get("DATA_SOURCES")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DATA_SOURCES"] = _to_json_data(self.data_sources)
        return data

@dataclass
class ConfigSaveResponse:
    """
    No description.
    """

    g2_config: 'G2config'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'ConfigSaveResponse':
        return cls(
            _from_json_data(G2config, data.get("G2_CONFIG")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["G2_CONFIG"] = _to_json_data(self.g2_config)
        return data

@dataclass
class ConfigmgrGetConfigListResponse:
    """
    No description.
    """

    configs: 'Configs'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'ConfigmgrGetConfigListResponse':
        return cls(
            _from_json_data(Configs, data.get("CONFIGS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CONFIGS"] = _to_json_data(self.configs)
        return data

@dataclass
class ConfigmgrGetConfigResponse:
    """
    No description.
    """

    g2_config: 'G2config'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'ConfigmgrGetConfigResponse':
        return cls(
            _from_json_data(G2config, data.get("G2_CONFIG")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["G2_CONFIG"] = _to_json_data(self.g2_config)
        return data

@dataclass
class Configs:
    """
    No description.
    """

    value: 'List[Config]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Configs':
        return cls(_from_json_data(List[Config], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class DataSource:
    """
    No description.
    """

    dsrc_code: 'str'
    """
    The text representation of the datasource.
    """

    dsrc_id: 'int'
    """
    The unique identifier of the datasource.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'DataSource':
        return cls(
            _from_json_data(str, data.get("DSRC_CODE")),
            _from_json_data(int, data.get("DSRC_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DSRC_CODE"] = _to_json_data(self.dsrc_code)
        data["DSRC_ID"] = _to_json_data(self.dsrc_id)
        return data

@dataclass
class DataSources:
    """
    A list of datasources.
    """

    value: 'List[DataSource]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'DataSources':
        return cls(_from_json_data(List[DataSource], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class DiagnosticCheckDbperfResponse:
    """
    No description.
    """

    insert_time: 'int'
    """
    No description.
    """

    num_records_inserted: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticCheckDbperfResponse':
        return cls(
            _from_json_data(int, data.get("insertTime")),
            _from_json_data(int, data.get("numRecordsInserted")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["insertTime"] = _to_json_data(self.insert_time)
        data["numRecordsInserted"] = _to_json_data(self.num_records_inserted)
        return data

@dataclass
class DiagnosticFetchNextEntityBySizeResponse0:
    dsrc_code: 'str'
    """
    No description.
    """

    ent_src_desc: 'str'
    """
    No description.
    """

    ent_src_key: 'str'
    """
    No description.
    """

    errule_code: 'str'
    """
    No description.
    """

    er_id: 'int'
    """
    No description.
    """

    etype_code: 'str'
    """
    No description.
    """

    json_data: 'JSONData'
    """
    No description.
    """

    match_key: 'str'
    """
    No description.
    """

    obs_ent_id: 'int'
    """
    No description.
    """

    record_id: 'str'
    """
    No description.
    """

    res_ent_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticFetchNextEntityBySizeResponse0':
        return cls(
            _from_json_data(str, data.get("DSRC_CODE")),
            _from_json_data(str, data.get("ENT_SRC_DESC")),
            _from_json_data(str, data.get("ENT_SRC_KEY")),
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(int, data.get("ER_ID")),
            _from_json_data(str, data.get("ETYPE_CODE")),
            _from_json_data(JSONData, data.get("JSON_DATA")),
            _from_json_data(str, data.get("MATCH_KEY")),
            _from_json_data(int, data.get("OBS_ENT_ID")),
            _from_json_data(str, data.get("RECORD_ID")),
            _from_json_data(int, data.get("RES_ENT_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DSRC_CODE"] = _to_json_data(self.dsrc_code)
        data["ENT_SRC_DESC"] = _to_json_data(self.ent_src_desc)
        data["ENT_SRC_KEY"] = _to_json_data(self.ent_src_key)
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["ER_ID"] = _to_json_data(self.er_id)
        data["ETYPE_CODE"] = _to_json_data(self.etype_code)
        data["JSON_DATA"] = _to_json_data(self.json_data)
        data["MATCH_KEY"] = _to_json_data(self.match_key)
        data["OBS_ENT_ID"] = _to_json_data(self.obs_ent_id)
        data["RECORD_ID"] = _to_json_data(self.record_id)
        data["RES_ENT_ID"] = _to_json_data(self.res_ent_id)
        return data

@dataclass
class DiagnosticFetchNextEntityBySizeResponse:
    """
    No description.
    """

    value: 'List[DiagnosticFetchNextEntityBySizeResponse0]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticFetchNextEntityBySizeResponse':
        return cls(_from_json_data(List[DiagnosticFetchNextEntityBySizeResponse0], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class DiagnosticFindEntitiesByFeatureIdsResponse0:
    lib_feat_id: 'int'
    """
    No description.
    """

    res_ent_id: 'int'
    """
    No description.
    """

    usage_type: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticFindEntitiesByFeatureIdsResponse0':
        return cls(
            _from_json_data(int, data.get("LIB_FEAT_ID")),
            _from_json_data(int, data.get("RES_ENT_ID")),
            _from_json_data(str, data.get("USAGE_TYPE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["LIB_FEAT_ID"] = _to_json_data(self.lib_feat_id)
        data["RES_ENT_ID"] = _to_json_data(self.res_ent_id)
        data["USAGE_TYPE"] = _to_json_data(self.usage_type)
        return data

@dataclass
class DiagnosticFindEntitiesByFeatureIdsResponse:
    """
    No description.
    """

    value: 'List[DiagnosticFindEntitiesByFeatureIdsResponse0]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticFindEntitiesByFeatureIdsResponse':
        return cls(_from_json_data(List[DiagnosticFindEntitiesByFeatureIdsResponse0], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class DiagnosticGetDbinfoResponseDetail:
    name: 'str'
    """
    No description.
    """

    type: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticGetDbinfoResponseDetail':
        return cls(
            _from_json_data(str, data.get("Name")),
            _from_json_data(str, data.get("Type")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["Name"] = _to_json_data(self.name)
        data["Type"] = _to_json_data(self.type)
        return data

@dataclass
class DiagnosticGetDbinfoResponse:
    """
    No description.
    """

    database_details: 'List[DiagnosticGetDbinfoResponseDetail]'
    """
    No description.
    """

    hybrid_mode: 'bool'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticGetDbinfoResponse':
        return cls(
            _from_json_data(List[DiagnosticGetDbinfoResponseDetail], data.get("Database Details")),
            _from_json_data(bool, data.get("Hybrid Mode")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["Database Details"] = _to_json_data(self.database_details)
        data["Hybrid Mode"] = _to_json_data(self.hybrid_mode)
        return data

@dataclass
class DiagnosticGetDataSourceCountsResponse0:
    dsrc_code: 'str'
    """
    No description.
    """

    dsrc_id: 'int'
    """
    No description.
    """

    dsrc_record_count: 'int'
    """
    No description.
    """

    etype_code: 'str'
    """
    No description.
    """

    etype_id: 'int'
    """
    No description.
    """

    obs_ent_count: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticGetDataSourceCountsResponse0':
        return cls(
            _from_json_data(str, data.get("DSRC_CODE")),
            _from_json_data(int, data.get("DSRC_ID")),
            _from_json_data(int, data.get("DSRC_RECORD_COUNT")),
            _from_json_data(str, data.get("ETYPE_CODE")),
            _from_json_data(int, data.get("ETYPE_ID")),
            _from_json_data(int, data.get("OBS_ENT_COUNT")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DSRC_CODE"] = _to_json_data(self.dsrc_code)
        data["DSRC_ID"] = _to_json_data(self.dsrc_id)
        data["DSRC_RECORD_COUNT"] = _to_json_data(self.dsrc_record_count)
        data["ETYPE_CODE"] = _to_json_data(self.etype_code)
        data["ETYPE_ID"] = _to_json_data(self.etype_id)
        data["OBS_ENT_COUNT"] = _to_json_data(self.obs_ent_count)
        return data

@dataclass
class DiagnosticGetDataSourceCountsResponse:
    """
    No description.
    """

    value: 'List[DiagnosticGetDataSourceCountsResponse0]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticGetDataSourceCountsResponse':
        return cls(_from_json_data(List[DiagnosticGetDataSourceCountsResponse0], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class DiagnosticGetEntityDetailsResponse0:
    derived: 'str'
    """
    No description.
    """

    dsrc_code: 'str'
    """
    No description.
    """

    errule_code: 'str'
    """
    No description.
    """

    etype_code: 'str'
    """
    No description.
    """

    feat_desc: 'str'
    """
    No description.
    """

    ftype_code: 'str'
    """
    No description.
    """

    match_key: 'str'
    """
    No description.
    """

    obs_ent_id: 'int'
    """
    No description.
    """

    record_id: 'int'
    """
    No description.
    """

    res_ent_id: 'int'
    """
    No description.
    """

    usage_type: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticGetEntityDetailsResponse0':
        return cls(
            _from_json_data(str, data.get("DERIVED")),
            _from_json_data(str, data.get("DSRC_CODE")),
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(str, data.get("ETYPE_CODE")),
            _from_json_data(str, data.get("FEAT_DESC")),
            _from_json_data(str, data.get("FTYPE_CODE")),
            _from_json_data(str, data.get("MATCH_KEY")),
            _from_json_data(int, data.get("OBS_ENT_ID")),
            _from_json_data(int, data.get("RECORD_ID")),
            _from_json_data(int, data.get("RES_ENT_ID")),
            _from_json_data(str, data.get("USAGE_TYPE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DERIVED"] = _to_json_data(self.derived)
        data["DSRC_CODE"] = _to_json_data(self.dsrc_code)
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["ETYPE_CODE"] = _to_json_data(self.etype_code)
        data["FEAT_DESC"] = _to_json_data(self.feat_desc)
        data["FTYPE_CODE"] = _to_json_data(self.ftype_code)
        data["MATCH_KEY"] = _to_json_data(self.match_key)
        data["OBS_ENT_ID"] = _to_json_data(self.obs_ent_id)
        data["RECORD_ID"] = _to_json_data(self.record_id)
        data["RES_ENT_ID"] = _to_json_data(self.res_ent_id)
        data["USAGE_TYPE"] = _to_json_data(self.usage_type)
        return data

@dataclass
class DiagnosticGetEntityDetailsResponse:
    """
    No description.
    """

    value: 'List[DiagnosticGetEntityDetailsResponse0]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticGetEntityDetailsResponse':
        return cls(_from_json_data(List[DiagnosticGetEntityDetailsResponse0], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class DiagnosticGetEntityResumeResponse0:
    dsrc_code: 'str'
    """
    No description.
    """

    ent_src_desc: 'str'
    """
    No description.
    """

    errule_code: 'str'
    """
    No description.
    """

    etype_code: 'str'
    """
    No description.
    """

    json_data: 'JSONData'
    """
    No description.
    """

    match_key: 'str'
    """
    No description.
    """

    record_id: 'str'
    """
    No description.
    """

    rel_ent_id: 'int'
    """
    No description.
    """

    res_ent_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticGetEntityResumeResponse0':
        return cls(
            _from_json_data(str, data.get("DSRC_CODE")),
            _from_json_data(str, data.get("ENT_SRC_DESC")),
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(str, data.get("ETYPE_CODE")),
            _from_json_data(JSONData, data.get("JSON_DATA")),
            _from_json_data(str, data.get("MATCH_KEY")),
            _from_json_data(str, data.get("RECORD_ID")),
            _from_json_data(int, data.get("REL_ENT_ID")),
            _from_json_data(int, data.get("RES_ENT_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DSRC_CODE"] = _to_json_data(self.dsrc_code)
        data["ENT_SRC_DESC"] = _to_json_data(self.ent_src_desc)
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["ETYPE_CODE"] = _to_json_data(self.etype_code)
        data["JSON_DATA"] = _to_json_data(self.json_data)
        data["MATCH_KEY"] = _to_json_data(self.match_key)
        data["RECORD_ID"] = _to_json_data(self.record_id)
        data["REL_ENT_ID"] = _to_json_data(self.rel_ent_id)
        data["RES_ENT_ID"] = _to_json_data(self.res_ent_id)
        return data

@dataclass
class DiagnosticGetEntityResumeResponse:
    """
    No description.
    """

    value: 'List[DiagnosticGetEntityResumeResponse0]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticGetEntityResumeResponse':
        return cls(_from_json_data(List[DiagnosticGetEntityResumeResponse0], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class DiagnosticGetEntitySizeBreakdownResponse:
    """
    No description.
    """

    value: 'AttributeCounters'

    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticGetEntitySizeBreakdownResponse':
        return cls(_from_json_data(AttributeCounters, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class DiagnosticGetFeatureResponseElements:
    felem_code: 'str'
    """
    No description.
    """

    felem_value: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticGetFeatureResponseElements':
        return cls(
            _from_json_data(str, data.get("FELEM_CODE")),
            _from_json_data(str, data.get("FELEM_VALUE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FELEM_CODE"] = _to_json_data(self.felem_code)
        data["FELEM_VALUE"] = _to_json_data(self.felem_value)
        return data

@dataclass
class DiagnosticGetFeatureResponse:
    """
    No description.
    """

    elements: 'List[DiagnosticGetFeatureResponseElements]'
    """
    No description.
    """

    ftype_code: 'str'
    """
    No description.
    """

    lib_feat_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticGetFeatureResponse':
        return cls(
            _from_json_data(List[DiagnosticGetFeatureResponseElements], data.get("ELEMENTS")),
            _from_json_data(str, data.get("FTYPE_CODE")),
            _from_json_data(int, data.get("LIB_FEAT_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ELEMENTS"] = _to_json_data(self.elements)
        data["FTYPE_CODE"] = _to_json_data(self.ftype_code)
        data["LIB_FEAT_ID"] = _to_json_data(self.lib_feat_id)
        return data

@dataclass
class DiagnosticGetGenericFeaturesResponse0:
    candidate_cap_reached: 'str'
    """
    No description.
    """

    estimated_count: 'int'
    """
    No description.
    """

    feat_desc: 'str'
    """
    No description.
    """

    ftype_code: 'str'
    """
    No description.
    """

    lib_feat_id: 'int'
    """
    No description.
    """

    scoring_cap_reached: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticGetGenericFeaturesResponse0':
        return cls(
            _from_json_data(str, data.get("CANDIDATE_CAP_REACHED")),
            _from_json_data(int, data.get("ESTIMATED_COUNT")),
            _from_json_data(str, data.get("FEAT_DESC")),
            _from_json_data(str, data.get("FTYPE_CODE")),
            _from_json_data(int, data.get("LIB_FEAT_ID")),
            _from_json_data(str, data.get("SCORING_CAP_REACHED")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CANDIDATE_CAP_REACHED"] = _to_json_data(self.candidate_cap_reached)
        data["ESTIMATED_COUNT"] = _to_json_data(self.estimated_count)
        data["FEAT_DESC"] = _to_json_data(self.feat_desc)
        data["FTYPE_CODE"] = _to_json_data(self.ftype_code)
        data["LIB_FEAT_ID"] = _to_json_data(self.lib_feat_id)
        data["SCORING_CAP_REACHED"] = _to_json_data(self.scoring_cap_reached)
        return data

@dataclass
class DiagnosticGetGenericFeaturesResponse:
    """
    No description.
    """

    value: 'List[DiagnosticGetGenericFeaturesResponse0]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticGetGenericFeaturesResponse':
        return cls(_from_json_data(List[DiagnosticGetGenericFeaturesResponse0], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class DiagnosticGetMappingStatisticsResponse0:
    derived: 'str'
    """
    No description.
    """

    dsrc_code: 'str'
    """
    No description.
    """

    etype_code: 'str'
    """
    No description.
    """

    ftype_code: 'str'
    """
    No description.
    """

    max_feat_desc: 'str'
    """
    No description.
    """

    min_feat_desc: 'str'
    """
    No description.
    """

    rec_count: 'int'
    """
    No description.
    """

    rec_pct: 'float'
    """
    No description.
    """

    uniq_count: 'int'
    """
    No description.
    """

    uniq_pct: 'float'
    """
    No description.
    """

    usage_type: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticGetMappingStatisticsResponse0':
        return cls(
            _from_json_data(str, data.get("DERIVED")),
            _from_json_data(str, data.get("DSRC_CODE")),
            _from_json_data(str, data.get("ETYPE_CODE")),
            _from_json_data(str, data.get("FTYPE_CODE")),
            _from_json_data(str, data.get("MAX_FEAT_DESC")),
            _from_json_data(str, data.get("MIN_FEAT_DESC")),
            _from_json_data(int, data.get("REC_COUNT")),
            _from_json_data(float, data.get("REC_PCT")),
            _from_json_data(int, data.get("UNIQ_COUNT")),
            _from_json_data(float, data.get("UNIQ_PCT")),
            _from_json_data(str, data.get("USAGE_TYPE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DERIVED"] = _to_json_data(self.derived)
        data["DSRC_CODE"] = _to_json_data(self.dsrc_code)
        data["ETYPE_CODE"] = _to_json_data(self.etype_code)
        data["FTYPE_CODE"] = _to_json_data(self.ftype_code)
        data["MAX_FEAT_DESC"] = _to_json_data(self.max_feat_desc)
        data["MIN_FEAT_DESC"] = _to_json_data(self.min_feat_desc)
        data["REC_COUNT"] = _to_json_data(self.rec_count)
        data["REC_PCT"] = _to_json_data(self.rec_pct)
        data["UNIQ_COUNT"] = _to_json_data(self.uniq_count)
        data["UNIQ_PCT"] = _to_json_data(self.uniq_pct)
        data["USAGE_TYPE"] = _to_json_data(self.usage_type)
        return data

@dataclass
class DiagnosticGetMappingStatisticsResponse:
    """
    No description.
    """

    value: 'List[DiagnosticGetMappingStatisticsResponse0]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticGetMappingStatisticsResponse':
        return cls(_from_json_data(List[DiagnosticGetMappingStatisticsResponse0], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class DiagnosticGetRelationshipDetailsResponse0:
    errule_code: 'str'
    """
    No description.
    """

    feat_desc: 'str'
    """
    No description.
    """

    ftype_code: 'str'
    """
    No description.
    """

    match_key: 'str'
    """
    No description.
    """

    res_ent_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticGetRelationshipDetailsResponse0':
        return cls(
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(str, data.get("FEAT_DESC")),
            _from_json_data(str, data.get("FTYPE_CODE")),
            _from_json_data(str, data.get("MATCH_KEY")),
            _from_json_data(int, data.get("RES_ENT_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["FEAT_DESC"] = _to_json_data(self.feat_desc)
        data["FTYPE_CODE"] = _to_json_data(self.ftype_code)
        data["MATCH_KEY"] = _to_json_data(self.match_key)
        data["RES_ENT_ID"] = _to_json_data(self.res_ent_id)
        return data

@dataclass
class DiagnosticGetRelationshipDetailsResponse:
    """
    No description.
    """

    value: 'List[DiagnosticGetRelationshipDetailsResponse0]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticGetRelationshipDetailsResponse':
        return cls(_from_json_data(List[DiagnosticGetRelationshipDetailsResponse0], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class DiagnosticGetResolutionStatisticsResponseRawMatchKeys:
    match_key: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticGetResolutionStatisticsResponseRawMatchKeys':
        return cls(
            _from_json_data(str, data.get("MATCH_KEY")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["MATCH_KEY"] = _to_json_data(self.match_key)
        return data

@dataclass
class DiagnosticGetResolutionStatisticsResponse0:
    errule_code: 'str'
    """
    No description.
    """

    errule_id: 'int'
    """
    No description.
    """

    is_ambiguous: 'str'
    """
    No description.
    """

    match_key: 'str'
    """
    No description.
    """

    match_level: 'int'
    """
    No description.
    """

    max_res_ent_id: 'int'
    """
    No description.
    """

    max_res_rel_id: 'int'
    """
    No description.
    """

    min_res_ent_id: 'int'
    """
    No description.
    """

    min_res_rel_id: 'int'
    """
    No description.
    """

    raw_match_keys: 'List[DiagnosticGetResolutionStatisticsResponseRawMatchKeys]'
    """
    No description.
    """

    record_count: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticGetResolutionStatisticsResponse0':
        return cls(
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(int, data.get("ERRULE_ID")),
            _from_json_data(str, data.get("IS_AMBIGUOUS")),
            _from_json_data(str, data.get("MATCH_KEY")),
            _from_json_data(int, data.get("MATCH_LEVEL")),
            _from_json_data(int, data.get("MAX_RES_ENT_ID")),
            _from_json_data(int, data.get("MAX_RES_REL_ID")),
            _from_json_data(int, data.get("MIN_RES_ENT_ID")),
            _from_json_data(int, data.get("MIN_RES_REL_ID")),
            _from_json_data(List[DiagnosticGetResolutionStatisticsResponseRawMatchKeys], data.get("RAW_MATCH_KEYS")),
            _from_json_data(int, data.get("RECORD_COUNT")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["ERRULE_ID"] = _to_json_data(self.errule_id)
        data["IS_AMBIGUOUS"] = _to_json_data(self.is_ambiguous)
        data["MATCH_KEY"] = _to_json_data(self.match_key)
        data["MATCH_LEVEL"] = _to_json_data(self.match_level)
        data["MAX_RES_ENT_ID"] = _to_json_data(self.max_res_ent_id)
        data["MAX_RES_REL_ID"] = _to_json_data(self.max_res_rel_id)
        data["MIN_RES_ENT_ID"] = _to_json_data(self.min_res_ent_id)
        data["MIN_RES_REL_ID"] = _to_json_data(self.min_res_rel_id)
        data["RAW_MATCH_KEYS"] = _to_json_data(self.raw_match_keys)
        data["RECORD_COUNT"] = _to_json_data(self.record_count)
        return data

@dataclass
class DiagnosticGetResolutionStatisticsResponse:
    """
    No description.
    """

    value: 'List[DiagnosticGetResolutionStatisticsResponse0]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticGetResolutionStatisticsResponse':
        return cls(_from_json_data(List[DiagnosticGetResolutionStatisticsResponse0], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class DiagnosticStreamEntityListBySizeResponse:
    """
    No description.
    """

    value: 'Any'

    @classmethod
    def from_json_data(cls, data: Any) -> 'DiagnosticStreamEntityListBySizeResponse':
        return cls(_from_json_data(Any, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineAddRecordWithInfoResponse:
    """
    No description.
    """

    value: 'WithInfo'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineAddRecordWithInfoResponse':
        return cls(_from_json_data(WithInfo, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineAddRecordWithInfoWithReturnedRecordIdresponse:
    """
    No description.
    """

    value: 'WithInfo'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineAddRecordWithInfoWithReturnedRecordIdresponse':
        return cls(_from_json_data(WithInfo, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineCheckRecordResponseCheckRecordResponse:
    candidate_match: 'str'
    """
    No description.
    """

    dsrc_code: 'str'
    """
    No description.
    """

    errule_code: 'str'
    """
    No description.
    """

    errule_id: 'int'
    """
    No description.
    """

    match_key: 'str'
    """
    No description.
    """

    match_level: 'int'
    """
    No description.
    """

    match_level_code: 'str'
    """
    No description.
    """

    non_generic_candidate_match: 'str'
    """
    No description.
    """

    record_id: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineCheckRecordResponseCheckRecordResponse':
        return cls(
            _from_json_data(str, data.get("CANDIDATE_MATCH")),
            _from_json_data(str, data.get("DSRC_CODE")),
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(int, data.get("ERRULE_ID")),
            _from_json_data(str, data.get("MATCH_KEY")),
            _from_json_data(int, data.get("MATCH_LEVEL")),
            _from_json_data(str, data.get("MATCH_LEVEL_CODE")),
            _from_json_data(str, data.get("NON_GENERIC_CANDIDATE_MATCH")),
            _from_json_data(str, data.get("RECORD_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CANDIDATE_MATCH"] = _to_json_data(self.candidate_match)
        data["DSRC_CODE"] = _to_json_data(self.dsrc_code)
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["ERRULE_ID"] = _to_json_data(self.errule_id)
        data["MATCH_KEY"] = _to_json_data(self.match_key)
        data["MATCH_LEVEL"] = _to_json_data(self.match_level)
        data["MATCH_LEVEL_CODE"] = _to_json_data(self.match_level_code)
        data["NON_GENERIC_CANDIDATE_MATCH"] = _to_json_data(self.non_generic_candidate_match)
        data["RECORD_ID"] = _to_json_data(self.record_id)
        return data

@dataclass
class EngineCheckRecordResponse:
    """
    No description.
    """

    check_record_response: 'List[EngineCheckRecordResponseCheckRecordResponse]'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineCheckRecordResponse':
        return cls(
            _from_json_data(List[EngineCheckRecordResponseCheckRecordResponse], data.get("CHECK_RECORD_RESPONSE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CHECK_RECORD_RESPONSE"] = _to_json_data(self.check_record_response)
        return data

@dataclass
class EngineDeleteRecordWithInfoResponse:
    """
    No description.
    """

    value: 'WithInfo'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineDeleteRecordWithInfoResponse':
        return cls(_from_json_data(WithInfo, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineExportConfigAndConfigIdresponse:
    """
    No description.
    """

    g2_config: 'G2config'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineExportConfigAndConfigIdresponse':
        return cls(
            _from_json_data(G2config, data.get("G2_CONFIG")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["G2_CONFIG"] = _to_json_data(self.g2_config)
        return data

@dataclass
class EngineExportConfigResponse:
    """
    No description.
    """

    g2_config: 'G2config'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineExportConfigResponse':
        return cls(
            _from_json_data(G2config, data.get("G2_CONFIG")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["G2_CONFIG"] = _to_json_data(self.g2_config)
        return data

@dataclass
class EngineFetchNextResponse:
    """
    No description.
    """

    value: 'Any'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineFetchNextResponse':
        return cls(_from_json_data(Any, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineFindInterestingEntitiesByEntityIdresponse:
    """
    No description.
    """

    value: 'Interesting'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineFindInterestingEntitiesByEntityIdresponse':
        return cls(_from_json_data(Interesting, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineFindInterestingEntitiesByRecordIdresponse:
    """
    No description.
    """

    value: 'Interesting'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineFindInterestingEntitiesByRecordIdresponse':
        return cls(_from_json_data(Interesting, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineFindNetworkByEntityIdresponse:
    """
    No description.
    """

    value: 'Network'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineFindNetworkByEntityIdresponse':
        return cls(_from_json_data(Network, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineFindNetworkByEntityIdv2response:
    """
    No description.
    """

    value: 'Network'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineFindNetworkByEntityIdv2response':
        return cls(_from_json_data(Network, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineFindNetworkByRecordIdresponse:
    """
    No description.
    """

    value: 'Network'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineFindNetworkByRecordIdresponse':
        return cls(_from_json_data(Network, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineFindNetworkByRecordIdv2response:
    """
    No description.
    """

    value: 'Network'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineFindNetworkByRecordIdv2response':
        return cls(_from_json_data(Network, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineFindPathByEntityIdresponse:
    """
    No description.
    """

    value: 'Path'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineFindPathByEntityIdresponse':
        return cls(_from_json_data(Path, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineFindPathByEntityIdv2response:
    """
    No description.
    """

    value: 'Path'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineFindPathByEntityIdv2response':
        return cls(_from_json_data(Path, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineFindPathByRecordIdresponse:
    """
    No description.
    """

    value: 'Path'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineFindPathByRecordIdresponse':
        return cls(_from_json_data(Path, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineFindPathByRecordIdv2response:
    """
    No description.
    """

    value: 'Path'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineFindPathByRecordIdv2response':
        return cls(_from_json_data(Path, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineFindPathExcludingByEntityIdresponse:
    """
    No description.
    """

    value: 'Path'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineFindPathExcludingByEntityIdresponse':
        return cls(_from_json_data(Path, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineFindPathExcludingByEntityIdv2response:
    """
    No description.
    """

    value: 'Path'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineFindPathExcludingByEntityIdv2response':
        return cls(_from_json_data(Path, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineFindPathExcludingByRecordIdresponse:
    """
    No description.
    """

    value: 'Path'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineFindPathExcludingByRecordIdresponse':
        return cls(_from_json_data(Path, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineFindPathExcludingByRecordIdv2response:
    """
    No description.
    """

    value: 'Path'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineFindPathExcludingByRecordIdv2response':
        return cls(_from_json_data(Path, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineFindPathIncludingSourceByEntityIdresponse:
    """
    No description.
    """

    value: 'Path'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineFindPathIncludingSourceByEntityIdresponse':
        return cls(_from_json_data(Path, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineFindPathIncludingSourceByEntityIdv2response:
    """
    No description.
    """

    value: 'Path'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineFindPathIncludingSourceByEntityIdv2response':
        return cls(_from_json_data(Path, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineFindPathIncludingSourceByRecordIdresponse:
    """
    No description.
    """

    value: 'Path'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineFindPathIncludingSourceByRecordIdresponse':
        return cls(_from_json_data(Path, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineFindPathIncludingSourceByRecordIdv2response:
    """
    No description.
    """

    value: 'Path'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineFindPathIncludingSourceByRecordIdv2response':
        return cls(_from_json_data(Path, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineGetEntityByEntityIdresponse:
    """
    No description.
    """

    value: 'Entity'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineGetEntityByEntityIdresponse':
        return cls(_from_json_data(Entity, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineGetEntityByEntityIdv2response:
    """
    No description.
    """

    value: 'Entity'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineGetEntityByEntityIdv2response':
        return cls(_from_json_data(Entity, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineGetEntityByRecordIdresponse:
    """
    No description.
    """

    value: 'Entity'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineGetEntityByRecordIdresponse':
        return cls(_from_json_data(Entity, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineGetEntityByRecordIdv2response:
    """
    No description.
    """

    value: 'Entity'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineGetEntityByRecordIdv2response':
        return cls(_from_json_data(Entity, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineGetRecordResponse:
    """
    No description.
    """

    value: 'Record'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineGetRecordResponse':
        return cls(_from_json_data(Record, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineGetRecordV2response:
    """
    No description.
    """

    value: 'Record'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineGetRecordV2response':
        return cls(_from_json_data(Record, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineGetVirtualEntityByRecordIdresponse:
    """
    No description.
    """

    value: 'VirtualEntity'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineGetVirtualEntityByRecordIdresponse':
        return cls(_from_json_data(VirtualEntity, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineGetVirtualEntityByRecordIdv2response:
    """
    No description.
    """

    value: 'VirtualEntity'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineGetVirtualEntityByRecordIdv2response':
        return cls(_from_json_data(VirtualEntity, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineHowEntityByEntityIdresponse:
    """
    No description.
    """

    value: 'How'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineHowEntityByEntityIdresponse':
        return cls(_from_json_data(How, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineHowEntityByEntityIdv2response:
    """
    No description.
    """

    value: 'How'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineHowEntityByEntityIdv2response':
        return cls(_from_json_data(How, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineProcessRedoRecordResponse:
    """
    No description.
    """

    value: 'Any'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineProcessRedoRecordResponse':
        return cls(_from_json_data(Any, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineProcessRedoRecordWithInfoResponse:
    """
    No description.
    """

    value: 'WithInfo'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineProcessRedoRecordWithInfoResponse':
        return cls(_from_json_data(WithInfo, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineProcessWithInfoResponse:
    """
    No description.
    """

    value: 'WithInfo'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineProcessWithInfoResponse':
        return cls(_from_json_data(WithInfo, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineProcessWithResponseResizeResponse:
    """
    No description.
    """

    value: 'Process'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineProcessWithResponseResizeResponse':
        return cls(_from_json_data(Process, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineProcessWithResponseResponse:
    """
    No description.
    """

    value: 'Process'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineProcessWithResponseResponse':
        return cls(_from_json_data(Process, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineReevaluateEntityWithInfoResponse:
    """
    No description.
    """

    value: 'WithInfo'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineReevaluateEntityWithInfoResponse':
        return cls(_from_json_data(WithInfo, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineReevaluateRecordWithInfoResponse:
    """
    No description.
    """

    value: 'WithInfo'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineReevaluateRecordWithInfoResponse':
        return cls(_from_json_data(WithInfo, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineReplaceRecordWithInfoResponse:
    """
    No description.
    """

    value: 'WithInfo'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineReplaceRecordWithInfoResponse':
        return cls(_from_json_data(WithInfo, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineSearchByAttributesResponse:
    """
    No description.
    """

    value: 'Search'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineSearchByAttributesResponse':
        return cls(_from_json_data(Search, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineSearchByAttributesV2response:
    """
    No description.
    """

    value: 'Search'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineSearchByAttributesV2response':
        return cls(_from_json_data(Search, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineSearchByAttributesV3response:
    """
    No description.
    """

    value: 'Search'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineSearchByAttributesV3response':
        return cls(_from_json_data(Search, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineStatsResponseDuration:
    """
    No description.
    """

    pattern: 'str'
    """
    No description.
    """

    type: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineStatsResponseDuration':
        return cls(
            _from_json_data(str, data.get("PATTERN")),
            _from_json_data(str, data.get("TYPE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["PATTERN"] = _to_json_data(self.pattern)
        data["TYPE"] = _to_json_data(self.type)
        return data

@dataclass
class EngineStatsResponseReresolveTriggers:
    """
    No description.
    """

    abort_retry: 'int'
    """
    No description.
    """

    multiple_resolvable_candidates: 'int'
    """
    No description.
    """

    resolve_new_features: 'int'
    """
    No description.
    """

    unresolve_movement: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineStatsResponseReresolveTriggers':
        return cls(
            _from_json_data(int, data.get("abortRetry")),
            _from_json_data(int, data.get("multipleResolvableCandidates")),
            _from_json_data(int, data.get("resolveNewFeatures")),
            _from_json_data(int, data.get("unresolveMovement")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["abortRetry"] = _to_json_data(self.abort_retry)
        data["multipleResolvableCandidates"] = _to_json_data(self.multiple_resolvable_candidates)
        data["resolveNewFeatures"] = _to_json_data(self.resolve_new_features)
        data["unresolveMovement"] = _to_json_data(self.unresolve_movement)
        return data

@dataclass
class EngineStatsResponseUnresolveTriggers:
    """
    No description.
    """

    extensive_resolve: 'int'
    """
    No description.
    """

    normal_resolve: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineStatsResponseUnresolveTriggers':
        return cls(
            _from_json_data(int, data.get("extensiveResolve")),
            _from_json_data(int, data.get("normalResolve")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["extensiveResolve"] = _to_json_data(self.extensive_resolve)
        data["normalResolve"] = _to_json_data(self.normal_resolve)
        return data

@dataclass
class EngineStatsResponseWorkloadExpressedFeatureCall:
    efcall_id: 'int'
    """
    No description.
    """

    efunc_code: 'str'
    """
    No description.
    """

    num_calls: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineStatsResponseWorkloadExpressedFeatureCall':
        return cls(
            _from_json_data(int, data.get("EFCALL_ID")),
            _from_json_data(str, data.get("EFUNC_CODE")),
            _from_json_data(int, data.get("numCalls")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["EFCALL_ID"] = _to_json_data(self.efcall_id)
        data["EFUNC_CODE"] = _to_json_data(self.efunc_code)
        data["numCalls"] = _to_json_data(self.num_calls)
        return data

@dataclass
class EngineStatsResponseWorkloadReresolveTriggers:
    """
    No description.
    """

    abort_retry: 'int'
    """
    No description.
    """

    multiple_resolvable_candidates: 'int'
    """
    No description.
    """

    new_feature_ftypes: 'AttributeCounters'
    """
    No description.
    """

    resolve_new_features: 'int'
    """
    No description.
    """

    unresolve_movement: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineStatsResponseWorkloadReresolveTriggers':
        return cls(
            _from_json_data(int, data.get("abortRetry")),
            _from_json_data(int, data.get("multipleResolvableCandidates")),
            _from_json_data(AttributeCounters, data.get("newFeatureFTypes")),
            _from_json_data(int, data.get("resolveNewFeatures")),
            _from_json_data(int, data.get("unresolveMovement")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["abortRetry"] = _to_json_data(self.abort_retry)
        data["multipleResolvableCandidates"] = _to_json_data(self.multiple_resolvable_candidates)
        data["newFeatureFTypes"] = _to_json_data(self.new_feature_ftypes)
        data["resolveNewFeatures"] = _to_json_data(self.resolve_new_features)
        data["unresolveMovement"] = _to_json_data(self.unresolve_movement)
        return data

@dataclass
class EngineStatsResponseWorkloadSystemResourcesCurrResourceSystemLoad:
    cpu_idle: 'float'
    """
    No description.
    """

    cpu_soft_irq: 'float'
    """
    No description.
    """

    cpu_system: 'float'
    """
    No description.
    """

    cpu_user: 'float'
    """
    No description.
    """

    cpu_wait: 'float'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineStatsResponseWorkloadSystemResourcesCurrResourceSystemLoad':
        return cls(
            _from_json_data(float, data.get("cpuIdle")),
            _from_json_data(float, data.get("cpuSoftIrq")),
            _from_json_data(float, data.get("cpuSystem")),
            _from_json_data(float, data.get("cpuUser")),
            _from_json_data(float, data.get("cpuWait")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["cpuIdle"] = _to_json_data(self.cpu_idle)
        data["cpuSoftIrq"] = _to_json_data(self.cpu_soft_irq)
        data["cpuSystem"] = _to_json_data(self.cpu_system)
        data["cpuUser"] = _to_json_data(self.cpu_user)
        data["cpuWait"] = _to_json_data(self.cpu_wait)
        return data

@dataclass
class EngineStatsResponseWorkloadSystemResourcesCurrResource:
    active_threads: 'int'
    """
    No description.
    """

    available_memory: 'str'
    """
    No description.
    """

    system_load: 'List[EngineStatsResponseWorkloadSystemResourcesCurrResourceSystemLoad]'
    """
    No description.
    """

    worker_threads: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineStatsResponseWorkloadSystemResourcesCurrResource':
        return cls(
            _from_json_data(int, data.get("activeThreads")),
            _from_json_data(str, data.get("availableMemory")),
            _from_json_data(List[EngineStatsResponseWorkloadSystemResourcesCurrResourceSystemLoad], data.get("systemLoad")),
            _from_json_data(int, data.get("workerThreads")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["activeThreads"] = _to_json_data(self.active_threads)
        data["availableMemory"] = _to_json_data(self.available_memory)
        data["systemLoad"] = _to_json_data(self.system_load)
        data["workerThreads"] = _to_json_data(self.worker_threads)
        return data

@dataclass
class EngineStatsResponseWorkloadSystemResourcesInitResource:
    available_memory: 'str'
    """
    No description.
    """

    logical_cores: 'int'
    """
    No description.
    """

    physical_cores: 'int'
    """
    No description.
    """

    total_memory: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineStatsResponseWorkloadSystemResourcesInitResource':
        return cls(
            _from_json_data(str, data.get("availableMemory")),
            _from_json_data(int, data.get("logicalCores")),
            _from_json_data(int, data.get("physicalCores")),
            _from_json_data(str, data.get("totalMemory")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["availableMemory"] = _to_json_data(self.available_memory)
        data["logicalCores"] = _to_json_data(self.logical_cores)
        data["physicalCores"] = _to_json_data(self.physical_cores)
        data["totalMemory"] = _to_json_data(self.total_memory)
        return data

@dataclass
class EngineStatsResponseWorkloadSystemResources:
    """
    No description.
    """

    curr_resources: 'List[EngineStatsResponseWorkloadSystemResourcesCurrResource]'
    """
    No description.
    """

    init_resources: 'List[EngineStatsResponseWorkloadSystemResourcesInitResource]'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineStatsResponseWorkloadSystemResources':
        return cls(
            _from_json_data(List[EngineStatsResponseWorkloadSystemResourcesCurrResource], data.get("currResources")),
            _from_json_data(List[EngineStatsResponseWorkloadSystemResourcesInitResource], data.get("initResources")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["currResources"] = _to_json_data(self.curr_resources)
        data["initResources"] = _to_json_data(self.init_resources)
        return data

@dataclass
class EngineStatsResponseWorkloadThreadState:
    """
    No description.
    """

    active: 'int'
    """
    No description.
    """

    data_latch_contention: 'int'
    """
    No description.
    """

    idle: 'int'
    """
    No description.
    """

    loader: 'int'
    """
    No description.
    """

    obs_ent_contention: 'int'
    """
    No description.
    """

    res_ent_contention: 'int'
    """
    No description.
    """

    resolver: 'int'
    """
    No description.
    """

    scoring: 'int'
    """
    No description.
    """

    sql_executing: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineStatsResponseWorkloadThreadState':
        return cls(
            _from_json_data(int, data.get("active")),
            _from_json_data(int, data.get("dataLatchContention")),
            _from_json_data(int, data.get("idle")),
            _from_json_data(int, data.get("loader")),
            _from_json_data(int, data.get("obsEntContention")),
            _from_json_data(int, data.get("resEntContention")),
            _from_json_data(int, data.get("resolver")),
            _from_json_data(int, data.get("scoring")),
            _from_json_data(int, data.get("sqlExecuting")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["active"] = _to_json_data(self.active)
        data["dataLatchContention"] = _to_json_data(self.data_latch_contention)
        data["idle"] = _to_json_data(self.idle)
        data["loader"] = _to_json_data(self.loader)
        data["obsEntContention"] = _to_json_data(self.obs_ent_contention)
        data["resEntContention"] = _to_json_data(self.res_ent_contention)
        data["resolver"] = _to_json_data(self.resolver)
        data["scoring"] = _to_json_data(self.scoring)
        data["sqlExecuting"] = _to_json_data(self.sql_executing)
        return data

@dataclass
class EngineStatsResponseWorkloadUnresolveTriggers:
    """
    No description.
    """

    ambiguous_multi_resolve: 'int'
    """
    No description.
    """

    ambiguous_no_resolve: 'int'
    """
    No description.
    """

    extensive_resolve: 'int'
    """
    No description.
    """

    normal_resolve: 'int'
    """
    No description.
    """

    rel_link: 'int'
    """
    No description.
    """

    update: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineStatsResponseWorkloadUnresolveTriggers':
        return cls(
            _from_json_data(int, data.get("ambiguousMultiResolve")),
            _from_json_data(int, data.get("ambiguousNoResolve")),
            _from_json_data(int, data.get("extensiveResolve")),
            _from_json_data(int, data.get("normalResolve")),
            _from_json_data(int, data.get("relLink")),
            _from_json_data(int, data.get("update")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ambiguousMultiResolve"] = _to_json_data(self.ambiguous_multi_resolve)
        data["ambiguousNoResolve"] = _to_json_data(self.ambiguous_no_resolve)
        data["extensiveResolve"] = _to_json_data(self.extensive_resolve)
        data["normalResolve"] = _to_json_data(self.normal_resolve)
        data["relLink"] = _to_json_data(self.rel_link)
        data["update"] = _to_json_data(self.update)
        return data

@dataclass
class EngineStatsResponseWorkload:
    """
    No description.
    """

    corrupt_entity_test_diagnosis: 'Any'
    """
    No description.
    """

    aborted_unresolve: 'int'
    """
    No description.
    """

    actual_ambiguous_test: 'int'
    """
    No description.
    """

    added_records: 'int'
    """
    No description.
    """

    api_version: 'str'
    """
    No description.
    """

    cache_hit: 'AttributeCounters'
    """
    No description.
    """

    cache_miss: 'AttributeCounters'
    """
    No description.
    """

    cached_ambiguous_test: 'int'
    """
    No description.
    """

    candidate_builders: 'AttributeCounters'
    """
    No description.
    """

    candidates: 'int'
    """
    No description.
    """

    deleted_records: 'int'
    """
    No description.
    """

    duration: 'int'
    """
    No description.
    """

    expressed_feature_calls: 'List[EngineStatsResponseWorkloadExpressedFeatureCall]'
    """
    No description.
    """

    expressed_features_created: 'AttributeCounters'
    """
    No description.
    """

    filtered_obs_feat: 'int'
    """
    No description.
    """

    generic_detect: 'AttributeCounters'
    """
    No description.
    """

    gnr_scorers_used: 'int'
    """
    No description.
    """

    high_contention_feat: 'AttributeCounters'
    """
    No description.
    """

    high_contention_res_ent: 'AttributeCounters'
    """
    No description.
    """

    latch_contention: 'AttributeCounters'
    """
    No description.
    """

    lib_feat_cache_hit: 'int'
    """
    No description.
    """

    lib_feat_cache_miss: 'int'
    """
    No description.
    """

    loaded_records: 'int'
    """
    No description.
    """

    redo_triggers: 'AttributeCounters'
    """
    No description.
    """

    reduced_scored_feature_type: 'AttributeCounters'
    """
    No description.
    """

    reevaluations: 'int'
    """
    No description.
    """

    repaired_entities: 'int'
    """
    No description.
    """

    reresolve_skipped: 'int'
    """
    No description.
    """

    reresolve_triggers: 'EngineStatsResponseWorkloadReresolveTriggers'
    """
    No description.
    """

    res_feat_stat_cache_hit: 'int'
    """
    No description.
    """

    res_feat_stat_cache_miss: 'int'
    """
    No description.
    """

    res_feat_stat_update: 'int'
    """
    No description.
    """

    retries: 'int'
    """
    No description.
    """

    scored_pairs: 'AttributeCounters'
    """
    No description.
    """

    suppressed_candidate_builders: 'AttributeCounters'
    """
    No description.
    """

    suppressed_disclosed_relationship_domain_count: 'int'
    """
    No description.
    """

    suppressed_scored_feature_type: 'AttributeCounters'
    """
    No description.
    """

    system_resources: 'EngineStatsResponseWorkloadSystemResources'
    """
    No description.
    """

    thread_state: 'EngineStatsResponseWorkloadThreadState'
    """
    No description.
    """

    unresolve_test: 'int'
    """
    No description.
    """

    unresolve_triggers: 'EngineStatsResponseWorkloadUnresolveTriggers'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineStatsResponseWorkload':
        return cls(
            _from_json_data(Any, data.get("CorruptEntityTestDiagnosis")),
            _from_json_data(int, data.get("abortedUnresolve")),
            _from_json_data(int, data.get("actualAmbiguousTest")),
            _from_json_data(int, data.get("addedRecords")),
            _from_json_data(str, data.get("apiVersion")),
            _from_json_data(AttributeCounters, data.get("cacheHit")),
            _from_json_data(AttributeCounters, data.get("cacheMiss")),
            _from_json_data(int, data.get("cachedAmbiguousTest")),
            _from_json_data(AttributeCounters, data.get("candidateBuilders")),
            _from_json_data(int, data.get("candidates")),
            _from_json_data(int, data.get("deletedRecords")),
            _from_json_data(int, data.get("duration")),
            _from_json_data(List[EngineStatsResponseWorkloadExpressedFeatureCall], data.get("expressedFeatureCalls")),
            _from_json_data(AttributeCounters, data.get("expressedFeaturesCreated")),
            _from_json_data(int, data.get("filteredObsFeat")),
            _from_json_data(AttributeCounters, data.get("genericDetect")),
            _from_json_data(int, data.get("gnrScorersUsed")),
            _from_json_data(AttributeCounters, data.get("highContentionFeat")),
            _from_json_data(AttributeCounters, data.get("highContentionResEnt")),
            _from_json_data(AttributeCounters, data.get("latchContention")),
            _from_json_data(int, data.get("libFeatCacheHit")),
            _from_json_data(int, data.get("libFeatCacheMiss")),
            _from_json_data(int, data.get("loadedRecords")),
            _from_json_data(AttributeCounters, data.get("redoTriggers")),
            _from_json_data(AttributeCounters, data.get("reducedScoredFeatureType")),
            _from_json_data(int, data.get("reevaluations")),
            _from_json_data(int, data.get("repairedEntities")),
            _from_json_data(int, data.get("reresolveSkipped")),
            _from_json_data(EngineStatsResponseWorkloadReresolveTriggers, data.get("reresolveTriggers")),
            _from_json_data(int, data.get("resFeatStatCacheHit")),
            _from_json_data(int, data.get("resFeatStatCacheMiss")),
            _from_json_data(int, data.get("resFeatStatUpdate")),
            _from_json_data(int, data.get("retries")),
            _from_json_data(AttributeCounters, data.get("scoredPairs")),
            _from_json_data(AttributeCounters, data.get("suppressedCandidateBuilders")),
            _from_json_data(int, data.get("suppressedDisclosedRelationshipDomainCount")),
            _from_json_data(AttributeCounters, data.get("suppressedScoredFeatureType")),
            _from_json_data(EngineStatsResponseWorkloadSystemResources, data.get("systemResources")),
            _from_json_data(EngineStatsResponseWorkloadThreadState, data.get("threadState")),
            _from_json_data(int, data.get("unresolveTest")),
            _from_json_data(EngineStatsResponseWorkloadUnresolveTriggers, data.get("unresolveTriggers")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CorruptEntityTestDiagnosis"] = _to_json_data(self.corrupt_entity_test_diagnosis)
        data["abortedUnresolve"] = _to_json_data(self.aborted_unresolve)
        data["actualAmbiguousTest"] = _to_json_data(self.actual_ambiguous_test)
        data["addedRecords"] = _to_json_data(self.added_records)
        data["apiVersion"] = _to_json_data(self.api_version)
        data["cacheHit"] = _to_json_data(self.cache_hit)
        data["cacheMiss"] = _to_json_data(self.cache_miss)
        data["cachedAmbiguousTest"] = _to_json_data(self.cached_ambiguous_test)
        data["candidateBuilders"] = _to_json_data(self.candidate_builders)
        data["candidates"] = _to_json_data(self.candidates)
        data["deletedRecords"] = _to_json_data(self.deleted_records)
        data["duration"] = _to_json_data(self.duration)
        data["expressedFeatureCalls"] = _to_json_data(self.expressed_feature_calls)
        data["expressedFeaturesCreated"] = _to_json_data(self.expressed_features_created)
        data["filteredObsFeat"] = _to_json_data(self.filtered_obs_feat)
        data["genericDetect"] = _to_json_data(self.generic_detect)
        data["gnrScorersUsed"] = _to_json_data(self.gnr_scorers_used)
        data["highContentionFeat"] = _to_json_data(self.high_contention_feat)
        data["highContentionResEnt"] = _to_json_data(self.high_contention_res_ent)
        data["latchContention"] = _to_json_data(self.latch_contention)
        data["libFeatCacheHit"] = _to_json_data(self.lib_feat_cache_hit)
        data["libFeatCacheMiss"] = _to_json_data(self.lib_feat_cache_miss)
        data["loadedRecords"] = _to_json_data(self.loaded_records)
        data["redoTriggers"] = _to_json_data(self.redo_triggers)
        data["reducedScoredFeatureType"] = _to_json_data(self.reduced_scored_feature_type)
        data["reevaluations"] = _to_json_data(self.reevaluations)
        data["repairedEntities"] = _to_json_data(self.repaired_entities)
        data["reresolveSkipped"] = _to_json_data(self.reresolve_skipped)
        data["reresolveTriggers"] = _to_json_data(self.reresolve_triggers)
        data["resFeatStatCacheHit"] = _to_json_data(self.res_feat_stat_cache_hit)
        data["resFeatStatCacheMiss"] = _to_json_data(self.res_feat_stat_cache_miss)
        data["resFeatStatUpdate"] = _to_json_data(self.res_feat_stat_update)
        data["retries"] = _to_json_data(self.retries)
        data["scoredPairs"] = _to_json_data(self.scored_pairs)
        data["suppressedCandidateBuilders"] = _to_json_data(self.suppressed_candidate_builders)
        data["suppressedDisclosedRelationshipDomainCount"] = _to_json_data(self.suppressed_disclosed_relationship_domain_count)
        data["suppressedScoredFeatureType"] = _to_json_data(self.suppressed_scored_feature_type)
        data["systemResources"] = _to_json_data(self.system_resources)
        data["threadState"] = _to_json_data(self.thread_state)
        data["unresolveTest"] = _to_json_data(self.unresolve_test)
        data["unresolveTriggers"] = _to_json_data(self.unresolve_triggers)
        return data

@dataclass
class EngineStatsResponse:
    """
    No description.
    """

    missing_res_ent: 'int'
    """
    No description.
    """

    missing_res_ent_and_okey: 'int'
    """
    No description.
    """

    aborted_unresolve: 'int'
    """
    No description.
    """

    actual_ambiguous_test: 'int'
    """
    No description.
    """

    added_records: 'int'
    """
    No description.
    """

    cache_hit: 'AttributeCounters'
    """
    No description.
    """

    candidate_builders: 'AttributeCounters'
    """
    No description.
    """

    candidates: 'int'
    """
    No description.
    """

    deleted_records: 'int'
    """
    No description.
    """

    duration: 'EngineStatsResponseDuration'
    """
    No description.
    """

    filtered_obs_feat: 'int'
    """
    No description.
    """

    generic_detect: 'AttributeCounters'
    """
    No description.
    """

    latch_contention: 'AttributeCounters'
    """
    No description.
    """

    loaded_records: 'int'
    """
    No description.
    """

    redo_triggers: 'AttributeCounters'
    """
    No description.
    """

    reduced_scored_feature_type: 'AttributeCounters'
    """
    No description.
    """

    reevaluations: 'int'
    """
    No description.
    """

    repaired_entities: 'int'
    """
    No description.
    """

    reresolve_skipped: 'int'
    """
    No description.
    """

    reresolve_triggers: 'EngineStatsResponseReresolveTriggers'
    """
    No description.
    """

    retries: 'int'
    """
    No description.
    """

    scored_pairs: 'AttributeCounters'
    """
    No description.
    """

    suppressed_candidate_builders: 'AttributeCounters'
    """
    No description.
    """

    suppressed_scored_feature_type: 'AttributeCounters'
    """
    No description.
    """

    unresolve_test: 'int'
    """
    No description.
    """

    unresolve_triggers: 'EngineStatsResponseUnresolveTriggers'
    """
    No description.
    """

    workload: 'EngineStatsResponseWorkload'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineStatsResponse':
        return cls(
            _from_json_data(int, data.get("MISSING_RES_ENT")),
            _from_json_data(int, data.get("MISSING_RES_ENT_AND_OKEY")),
            _from_json_data(int, data.get("abortedUnresolve")),
            _from_json_data(int, data.get("actualAmbiguousTest")),
            _from_json_data(int, data.get("addedRecords")),
            _from_json_data(AttributeCounters, data.get("cacheHit")),
            _from_json_data(AttributeCounters, data.get("candidateBuilders")),
            _from_json_data(int, data.get("candidates")),
            _from_json_data(int, data.get("deletedRecords")),
            _from_json_data(EngineStatsResponseDuration, data.get("duration")),
            _from_json_data(int, data.get("filteredObsFeat")),
            _from_json_data(AttributeCounters, data.get("genericDetect")),
            _from_json_data(AttributeCounters, data.get("latchContention")),
            _from_json_data(int, data.get("loadedRecords")),
            _from_json_data(AttributeCounters, data.get("redoTriggers")),
            _from_json_data(AttributeCounters, data.get("reducedScoredFeatureType")),
            _from_json_data(int, data.get("reevaluations")),
            _from_json_data(int, data.get("repairedEntities")),
            _from_json_data(int, data.get("reresolveSkipped")),
            _from_json_data(EngineStatsResponseReresolveTriggers, data.get("reresolveTriggers")),
            _from_json_data(int, data.get("retries")),
            _from_json_data(AttributeCounters, data.get("scoredPairs")),
            _from_json_data(AttributeCounters, data.get("suppressedCandidateBuilders")),
            _from_json_data(AttributeCounters, data.get("suppressedScoredFeatureType")),
            _from_json_data(int, data.get("unresolveTest")),
            _from_json_data(EngineStatsResponseUnresolveTriggers, data.get("unresolveTriggers")),
            _from_json_data(EngineStatsResponseWorkload, data.get("workload")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["MISSING_RES_ENT"] = _to_json_data(self.missing_res_ent)
        data["MISSING_RES_ENT_AND_OKEY"] = _to_json_data(self.missing_res_ent_and_okey)
        data["abortedUnresolve"] = _to_json_data(self.aborted_unresolve)
        data["actualAmbiguousTest"] = _to_json_data(self.actual_ambiguous_test)
        data["addedRecords"] = _to_json_data(self.added_records)
        data["cacheHit"] = _to_json_data(self.cache_hit)
        data["candidateBuilders"] = _to_json_data(self.candidate_builders)
        data["candidates"] = _to_json_data(self.candidates)
        data["deletedRecords"] = _to_json_data(self.deleted_records)
        data["duration"] = _to_json_data(self.duration)
        data["filteredObsFeat"] = _to_json_data(self.filtered_obs_feat)
        data["genericDetect"] = _to_json_data(self.generic_detect)
        data["latchContention"] = _to_json_data(self.latch_contention)
        data["loadedRecords"] = _to_json_data(self.loaded_records)
        data["redoTriggers"] = _to_json_data(self.redo_triggers)
        data["reducedScoredFeatureType"] = _to_json_data(self.reduced_scored_feature_type)
        data["reevaluations"] = _to_json_data(self.reevaluations)
        data["repairedEntities"] = _to_json_data(self.repaired_entities)
        data["reresolveSkipped"] = _to_json_data(self.reresolve_skipped)
        data["reresolveTriggers"] = _to_json_data(self.reresolve_triggers)
        data["retries"] = _to_json_data(self.retries)
        data["scoredPairs"] = _to_json_data(self.scored_pairs)
        data["suppressedCandidateBuilders"] = _to_json_data(self.suppressed_candidate_builders)
        data["suppressedScoredFeatureType"] = _to_json_data(self.suppressed_scored_feature_type)
        data["unresolveTest"] = _to_json_data(self.unresolve_test)
        data["unresolveTriggers"] = _to_json_data(self.unresolve_triggers)
        data["workload"] = _to_json_data(self.workload)
        return data

@dataclass
class EngineStreamExportJsonentityReportResponse:
    """
    No description.
    """

    value: 'Any'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineStreamExportJsonentityReportResponse':
        return cls(_from_json_data(Any, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineWhyEntitiesResponse:
    """
    No description.
    """

    value: 'WhyEntities'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineWhyEntitiesResponse':
        return cls(_from_json_data(WhyEntities, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineWhyEntitiesV2response:
    """
    No description.
    """

    value: 'WhyEntities'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineWhyEntitiesV2response':
        return cls(_from_json_data(WhyEntities, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineWhyEntityByEntityIdresponse:
    """
    No description.
    """

    value: 'WhyEntity'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineWhyEntityByEntityIdresponse':
        return cls(_from_json_data(WhyEntity, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineWhyEntityByEntityIdv2response:
    """
    No description.
    """

    value: 'WhyEntity'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineWhyEntityByEntityIdv2response':
        return cls(_from_json_data(WhyEntity, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineWhyEntityByRecordIdresponse:
    """
    No description.
    """

    value: 'WhyEntity'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineWhyEntityByRecordIdresponse':
        return cls(_from_json_data(WhyEntity, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineWhyEntityByRecordIdv2response:
    """
    No description.
    """

    value: 'WhyEntity'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineWhyEntityByRecordIdv2response':
        return cls(_from_json_data(WhyEntity, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineWhyRecordsResponse:
    """
    No description.
    """

    value: 'WhyRecords'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineWhyRecordsResponse':
        return cls(_from_json_data(WhyRecords, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class EngineWhyRecordsV2response:
    """
    No description.
    """

    value: 'WhyRecords'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EngineWhyRecordsV2response':
        return cls(_from_json_data(WhyRecords, data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class Entities:
    """
    No description.
    """

    value: 'List[Entity]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Entities':
        return cls(_from_json_data(List[Entity], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class Entity:
    """
    No description.
    """

    related_entities: 'RelatedEntities'
    """
    No description.
    """

    resolved_entity: 'ResolvedEntity'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'Entity':
        return cls(
            _from_json_data(RelatedEntities, data.get("RELATED_ENTITIES")),
            _from_json_data(ResolvedEntity, data.get("RESOLVED_ENTITY")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["RELATED_ENTITIES"] = _to_json_data(self.related_entities)
        data["RESOLVED_ENTITY"] = _to_json_data(self.resolved_entity)
        return data

@dataclass
class EntityPath:
    """
    No description.
    """

    end_entity_id: 'int'
    """
    No description.
    """

    entities: 'List[int]'
    """
    No description.
    """

    start_entity_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'EntityPath':
        return cls(
            _from_json_data(int, data.get("END_ENTITY_ID")),
            _from_json_data(List[int], data.get("ENTITIES")),
            _from_json_data(int, data.get("START_ENTITY_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["END_ENTITY_ID"] = _to_json_data(self.end_entity_id)
        data["ENTITIES"] = _to_json_data(self.entities)
        data["START_ENTITY_ID"] = _to_json_data(self.start_entity_id)
        return data

@dataclass
class EntityPaths:
    """
    No description.
    """

    value: 'List[EntityPath]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EntityPaths':
        return cls(_from_json_data(List[EntityPath], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class FeatureDescriptionValue:
    """
    No description.
    """

    candidate_cap_reached: 'str'
    """
    No description.
    """

    entity_count: 'int'
    """
    No description.
    """

    feat_desc: 'str'
    """
    No description.
    """

    lib_feat_id: 'int'
    """
    No description.
    """

    scoring_cap_reached: 'str'
    """
    No description.
    """

    suppressed: 'str'
    """
    No description.
    """

    used_for_cand: 'str'
    """
    No description.
    """

    used_for_scoring: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'FeatureDescriptionValue':
        return cls(
            _from_json_data(str, data.get("CANDIDATE_CAP_REACHED")),
            _from_json_data(int, data.get("ENTITY_COUNT")),
            _from_json_data(str, data.get("FEAT_DESC")),
            _from_json_data(int, data.get("LIB_FEAT_ID")),
            _from_json_data(str, data.get("SCORING_CAP_REACHED")),
            _from_json_data(str, data.get("SUPPRESSED")),
            _from_json_data(str, data.get("USED_FOR_CAND")),
            _from_json_data(str, data.get("USED_FOR_SCORING")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CANDIDATE_CAP_REACHED"] = _to_json_data(self.candidate_cap_reached)
        data["ENTITY_COUNT"] = _to_json_data(self.entity_count)
        data["FEAT_DESC"] = _to_json_data(self.feat_desc)
        data["LIB_FEAT_ID"] = _to_json_data(self.lib_feat_id)
        data["SCORING_CAP_REACHED"] = _to_json_data(self.scoring_cap_reached)
        data["SUPPRESSED"] = _to_json_data(self.suppressed)
        data["USED_FOR_CAND"] = _to_json_data(self.used_for_cand)
        data["USED_FOR_SCORING"] = _to_json_data(self.used_for_scoring)
        return data

@dataclass
class FeatureDescriptionValues:
    """
    No description.
    """

    value: 'List[FeatureDescriptionValue]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'FeatureDescriptionValues':
        return cls(_from_json_data(List[FeatureDescriptionValue], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class FeatureForAttribute:
    """
    No description.
    """

    feat_desc: 'str'
    """
    No description.
    """

    feat_desc_values: 'FeatureDescriptionValues'
    """
    No description.
    """

    lib_feat_id: 'int'
    """
    No description.
    """

    usage_type: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'FeatureForAttribute':
        return cls(
            _from_json_data(str, data.get("FEAT_DESC")),
            _from_json_data(FeatureDescriptionValues, data.get("FEAT_DESC_VALUES")),
            _from_json_data(int, data.get("LIB_FEAT_ID")),
            _from_json_data(str, data.get("USAGE_TYPE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FEAT_DESC"] = _to_json_data(self.feat_desc)
        data["FEAT_DESC_VALUES"] = _to_json_data(self.feat_desc_values)
        data["LIB_FEAT_ID"] = _to_json_data(self.lib_feat_id)
        data["USAGE_TYPE"] = _to_json_data(self.usage_type)
        return data

@dataclass
class FeatureScoreForAttribute:
    """
    No description.
    """

    candidate_feat: 'str'
    """
    No description.
    """

    candidate_feat_id: 'int'
    """
    No description.
    """

    candidate_feat_usage_type: 'str'
    """
    No description.
    """

    full_score: 'int'
    """
    No description.
    """

    generation_match: 'int'
    """
    No description.
    """

    gnr_fn: 'int'
    """
    No description.
    """

    gnr_gn: 'int'
    """
    No description.
    """

    gnr_on: 'int'
    """
    No description.
    """

    gnr_sn: 'int'
    """
    No description.
    """

    inbound_feat: 'str'
    """
    No description.
    """

    inbound_feat_id: 'int'
    """
    No description.
    """

    inbound_feat_usage_type: 'str'
    """
    No description.
    """

    score_behavior: 'str'
    """
    No description.
    """

    score_bucket: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'FeatureScoreForAttribute':
        return cls(
            _from_json_data(str, data.get("CANDIDATE_FEAT")),
            _from_json_data(int, data.get("CANDIDATE_FEAT_ID")),
            _from_json_data(str, data.get("CANDIDATE_FEAT_USAGE_TYPE")),
            _from_json_data(int, data.get("FULL_SCORE")),
            _from_json_data(int, data.get("GENERATION_MATCH")),
            _from_json_data(int, data.get("GNR_FN")),
            _from_json_data(int, data.get("GNR_GN")),
            _from_json_data(int, data.get("GNR_ON")),
            _from_json_data(int, data.get("GNR_SN")),
            _from_json_data(str, data.get("INBOUND_FEAT")),
            _from_json_data(int, data.get("INBOUND_FEAT_ID")),
            _from_json_data(str, data.get("INBOUND_FEAT_USAGE_TYPE")),
            _from_json_data(str, data.get("SCORE_BEHAVIOR")),
            _from_json_data(str, data.get("SCORE_BUCKET")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CANDIDATE_FEAT"] = _to_json_data(self.candidate_feat)
        data["CANDIDATE_FEAT_ID"] = _to_json_data(self.candidate_feat_id)
        data["CANDIDATE_FEAT_USAGE_TYPE"] = _to_json_data(self.candidate_feat_usage_type)
        data["FULL_SCORE"] = _to_json_data(self.full_score)
        data["GENERATION_MATCH"] = _to_json_data(self.generation_match)
        data["GNR_FN"] = _to_json_data(self.gnr_fn)
        data["GNR_GN"] = _to_json_data(self.gnr_gn)
        data["GNR_ON"] = _to_json_data(self.gnr_on)
        data["GNR_SN"] = _to_json_data(self.gnr_sn)
        data["INBOUND_FEAT"] = _to_json_data(self.inbound_feat)
        data["INBOUND_FEAT_ID"] = _to_json_data(self.inbound_feat_id)
        data["INBOUND_FEAT_USAGE_TYPE"] = _to_json_data(self.inbound_feat_usage_type)
        data["SCORE_BEHAVIOR"] = _to_json_data(self.score_behavior)
        data["SCORE_BUCKET"] = _to_json_data(self.score_bucket)
        return data

@dataclass
class FeatureScores:
    """
    No description.
    """

    account_domain: 'FeatureScoresForAttribute'
    """
    No description.
    """

    account_number: 'FeatureScoresForAttribute'
    """
    No description.
    """

    acct_num: 'FeatureScoresForAttribute'
    """
    No description.
    """

    address: 'FeatureScoresForAttribute'
    """
    No description.
    """

    address_list: 'FeatureScoresForAttribute'
    """
    No description.
    """

    addr_full: 'FeatureScoresForAttribute'
    """
    No description.
    """

    addr_key: 'FeatureScoresForAttribute'
    """
    No description.
    """

    cell_phone_number: 'FeatureScoresForAttribute'
    """
    No description.
    """

    citizenship: 'FeatureScoresForAttribute'
    """
    No description.
    """

    country_of_association: 'FeatureScoresForAttribute'
    """
    No description.
    """

    data_source: 'FeatureScoresForAttribute'
    """
    No description.
    """

    date_of_birth: 'FeatureScoresForAttribute'
    """
    No description.
    """

    date_of_death: 'FeatureScoresForAttribute'
    """
    No description.
    """

    dob: 'FeatureScoresForAttribute'
    """
    No description.
    """

    dod: 'FeatureScoresForAttribute'
    """
    No description.
    """

    drivers_license_number: 'FeatureScoresForAttribute'
    """
    No description.
    """

    drivers_license_state: 'FeatureScoresForAttribute'
    """
    No description.
    """

    drlic: 'FeatureScoresForAttribute'
    """
    No description.
    """

    duns_number: 'FeatureScoresForAttribute'
    """
    No description.
    """

    email: 'FeatureScoresForAttribute'
    """
    No description.
    """

    email_address: 'FeatureScoresForAttribute'
    """
    No description.
    """

    email_key: 'FeatureScoresForAttribute'
    """
    No description.
    """

    employer_name: 'FeatureScoresForAttribute'
    """
    No description.
    """

    entity_type: 'FeatureScoresForAttribute'
    """
    No description.
    """

    facebook: 'FeatureScoresForAttribute'
    """
    No description.
    """

    gender: 'FeatureScoresForAttribute'
    """
    No description.
    """

    group_assn_id_number: 'FeatureScoresForAttribute'
    """
    No description.
    """

    group_assn_id_type: 'FeatureScoresForAttribute'
    """
    No description.
    """

    group_association_org_name: 'FeatureScoresForAttribute'
    """
    No description.
    """

    group_association_type: 'FeatureScoresForAttribute'
    """
    No description.
    """

    id_key: 'FeatureScoresForAttribute'
    """
    No description.
    """

    instagram: 'FeatureScoresForAttribute'
    """
    No description.
    """

    lei_number: 'FeatureScoresForAttribute'
    """
    No description.
    """

    linkedin: 'FeatureScoresForAttribute'
    """
    No description.
    """

    load_id: 'FeatureScoresForAttribute'
    """
    No description.
    """

    login_id: 'FeatureScoresForAttribute'
    """
    No description.
    """

    name: 'FeatureScoresForAttribute'
    """
    No description.
    """

    name_full: 'FeatureScoresForAttribute'
    """
    No description.
    """

    name_key: 'FeatureScoresForAttribute'
    """
    No description.
    """

    name_list: 'FeatureScoresForAttribute'
    """
    No description.
    """

    nationality: 'FeatureScoresForAttribute'
    """
    No description.
    """

    national_id: 'FeatureScoresForAttribute'
    """
    No description.
    """

    national_id_country: 'FeatureScoresForAttribute'
    """
    No description.
    """

    national_id_number: 'FeatureScoresForAttribute'
    """
    No description.
    """

    nin_country: 'FeatureScoresForAttribute'
    """
    No description.
    """

    nin_number: 'FeatureScoresForAttribute'
    """
    No description.
    """

    npi_number: 'FeatureScoresForAttribute'
    """
    No description.
    """

    other_id_country: 'FeatureScoresForAttribute'
    """
    No description.
    """

    other_id_number: 'FeatureScoresForAttribute'
    """
    No description.
    """

    other_id_type: 'FeatureScoresForAttribute'
    """
    No description.
    """

    passport: 'FeatureScoresForAttribute'
    """
    No description.
    """

    passports: 'FeatureScoresForAttribute'
    """
    No description.
    """

    passport_country: 'FeatureScoresForAttribute'
    """
    No description.
    """

    passport_number: 'FeatureScoresForAttribute'
    """
    No description.
    """

    phone: 'FeatureScoresForAttribute'
    """
    No description.
    """

    phones: 'FeatureScoresForAttribute'
    """
    No description.
    """

    phone_key: 'FeatureScoresForAttribute'
    """
    No description.
    """

    place_of_birth: 'FeatureScoresForAttribute'
    """
    No description.
    """

    primary_name_first: 'FeatureScoresForAttribute'
    """
    No description.
    """

    primary_name_last: 'FeatureScoresForAttribute'
    """
    No description.
    """

    primary_name_middle: 'FeatureScoresForAttribute'
    """
    No description.
    """

    primary_name_org: 'FeatureScoresForAttribute'
    """
    No description.
    """

    primary_name_prefix: 'FeatureScoresForAttribute'
    """
    No description.
    """

    primary_name_suffix: 'FeatureScoresForAttribute'
    """
    No description.
    """

    primary_phone_number: 'FeatureScoresForAttribute'
    """
    No description.
    """

    record_type: 'FeatureScoresForAttribute'
    """
    No description.
    """

    registration_country: 'FeatureScoresForAttribute'
    """
    No description.
    """

    registration_date: 'FeatureScoresForAttribute'
    """
    No description.
    """

    rel_anchor: 'FeatureScoresForAttribute'
    """
    No description.
    """

    rel_anchor_domain: 'FeatureScoresForAttribute'
    """
    No description.
    """

    rel_anchor_key: 'FeatureScoresForAttribute'
    """
    No description.
    """

    rel_link: 'FeatureScoresForAttribute'
    """
    No description.
    """

    rel_pointer: 'FeatureScoresForAttribute'
    """
    No description.
    """

    rel_pointer_domain: 'FeatureScoresForAttribute'
    """
    No description.
    """

    rel_pointer_key: 'FeatureScoresForAttribute'
    """
    No description.
    """

    rel_pointer_role: 'FeatureScoresForAttribute'
    """
    No description.
    """

    signal: 'FeatureScoresForAttribute'
    """
    No description.
    """

    skype: 'FeatureScoresForAttribute'
    """
    No description.
    """

    social_handle: 'FeatureScoresForAttribute'
    """
    No description.
    """

    social_network: 'FeatureScoresForAttribute'
    """
    No description.
    """

    source_id: 'FeatureScoresForAttribute'
    """
    No description.
    """

    ssn: 'FeatureScoresForAttribute'
    """
    No description.
    """

    ssn_last4: 'FeatureScoresForAttribute'
    """
    No description.
    """

    ssn_number: 'FeatureScoresForAttribute'
    """
    No description.
    """

    tango: 'FeatureScoresForAttribute'
    """
    No description.
    """

    tax_id_country: 'FeatureScoresForAttribute'
    """
    No description.
    """

    tax_id_number: 'FeatureScoresForAttribute'
    """
    No description.
    """

    tax_id_type: 'FeatureScoresForAttribute'
    """
    No description.
    """

    telegram: 'FeatureScoresForAttribute'
    """
    No description.
    """

    trusted_id_number: 'FeatureScoresForAttribute'
    """
    No description.
    """

    trusted_id_type: 'FeatureScoresForAttribute'
    """
    No description.
    """

    twitter: 'FeatureScoresForAttribute'
    """
    No description.
    """

    viber: 'FeatureScoresForAttribute'
    """
    No description.
    """

    website_address: 'FeatureScoresForAttribute'
    """
    No description.
    """

    wechat: 'FeatureScoresForAttribute'
    """
    No description.
    """

    whatsapp: 'FeatureScoresForAttribute'
    """
    No description.
    """

    work_phone_number: 'FeatureScoresForAttribute'
    """
    No description.
    """

    zoomroom: 'FeatureScoresForAttribute'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'FeatureScores':
        return cls(
            _from_json_data(FeatureScoresForAttribute, data.get("ACCOUNT_DOMAIN")),
            _from_json_data(FeatureScoresForAttribute, data.get("ACCOUNT_NUMBER")),
            _from_json_data(FeatureScoresForAttribute, data.get("ACCT_NUM")),
            _from_json_data(FeatureScoresForAttribute, data.get("ADDRESS")),
            _from_json_data(FeatureScoresForAttribute, data.get("ADDRESS_LIST")),
            _from_json_data(FeatureScoresForAttribute, data.get("ADDR_FULL")),
            _from_json_data(FeatureScoresForAttribute, data.get("ADDR_KEY")),
            _from_json_data(FeatureScoresForAttribute, data.get("CELL_PHONE_NUMBER")),
            _from_json_data(FeatureScoresForAttribute, data.get("CITIZENSHIP")),
            _from_json_data(FeatureScoresForAttribute, data.get("COUNTRY_OF_ASSOCIATION")),
            _from_json_data(FeatureScoresForAttribute, data.get("DATA_SOURCE")),
            _from_json_data(FeatureScoresForAttribute, data.get("DATE_OF_BIRTH")),
            _from_json_data(FeatureScoresForAttribute, data.get("DATE_OF_DEATH")),
            _from_json_data(FeatureScoresForAttribute, data.get("DOB")),
            _from_json_data(FeatureScoresForAttribute, data.get("DOD")),
            _from_json_data(FeatureScoresForAttribute, data.get("DRIVERS_LICENSE_NUMBER")),
            _from_json_data(FeatureScoresForAttribute, data.get("DRIVERS_LICENSE_STATE")),
            _from_json_data(FeatureScoresForAttribute, data.get("DRLIC")),
            _from_json_data(FeatureScoresForAttribute, data.get("DUNS_NUMBER")),
            _from_json_data(FeatureScoresForAttribute, data.get("EMAIL")),
            _from_json_data(FeatureScoresForAttribute, data.get("EMAIL_ADDRESS")),
            _from_json_data(FeatureScoresForAttribute, data.get("EMAIL_KEY")),
            _from_json_data(FeatureScoresForAttribute, data.get("EMPLOYER_NAME")),
            _from_json_data(FeatureScoresForAttribute, data.get("ENTITY_TYPE")),
            _from_json_data(FeatureScoresForAttribute, data.get("FACEBOOK")),
            _from_json_data(FeatureScoresForAttribute, data.get("GENDER")),
            _from_json_data(FeatureScoresForAttribute, data.get("GROUP_ASSN_ID_NUMBER")),
            _from_json_data(FeatureScoresForAttribute, data.get("GROUP_ASSN_ID_TYPE")),
            _from_json_data(FeatureScoresForAttribute, data.get("GROUP_ASSOCIATION_ORG_NAME")),
            _from_json_data(FeatureScoresForAttribute, data.get("GROUP_ASSOCIATION_TYPE")),
            _from_json_data(FeatureScoresForAttribute, data.get("ID_KEY")),
            _from_json_data(FeatureScoresForAttribute, data.get("INSTAGRAM")),
            _from_json_data(FeatureScoresForAttribute, data.get("LEI_NUMBER")),
            _from_json_data(FeatureScoresForAttribute, data.get("LINKEDIN")),
            _from_json_data(FeatureScoresForAttribute, data.get("LOAD_ID")),
            _from_json_data(FeatureScoresForAttribute, data.get("LOGIN_ID")),
            _from_json_data(FeatureScoresForAttribute, data.get("NAME")),
            _from_json_data(FeatureScoresForAttribute, data.get("NAME_FULL")),
            _from_json_data(FeatureScoresForAttribute, data.get("NAME_KEY")),
            _from_json_data(FeatureScoresForAttribute, data.get("NAME_LIST")),
            _from_json_data(FeatureScoresForAttribute, data.get("NATIONALITY")),
            _from_json_data(FeatureScoresForAttribute, data.get("NATIONAL_ID")),
            _from_json_data(FeatureScoresForAttribute, data.get("NATIONAL_ID_COUNTRY")),
            _from_json_data(FeatureScoresForAttribute, data.get("NATIONAL_ID_NUMBER")),
            _from_json_data(FeatureScoresForAttribute, data.get("NIN_COUNTRY")),
            _from_json_data(FeatureScoresForAttribute, data.get("NIN_NUMBER")),
            _from_json_data(FeatureScoresForAttribute, data.get("NPI_NUMBER")),
            _from_json_data(FeatureScoresForAttribute, data.get("OTHER_ID_COUNTRY")),
            _from_json_data(FeatureScoresForAttribute, data.get("OTHER_ID_NUMBER")),
            _from_json_data(FeatureScoresForAttribute, data.get("OTHER_ID_TYPE")),
            _from_json_data(FeatureScoresForAttribute, data.get("PASSPORT")),
            _from_json_data(FeatureScoresForAttribute, data.get("PASSPORTS")),
            _from_json_data(FeatureScoresForAttribute, data.get("PASSPORT_COUNTRY")),
            _from_json_data(FeatureScoresForAttribute, data.get("PASSPORT_NUMBER")),
            _from_json_data(FeatureScoresForAttribute, data.get("PHONE")),
            _from_json_data(FeatureScoresForAttribute, data.get("PHONES")),
            _from_json_data(FeatureScoresForAttribute, data.get("PHONE_KEY")),
            _from_json_data(FeatureScoresForAttribute, data.get("PLACE_OF_BIRTH")),
            _from_json_data(FeatureScoresForAttribute, data.get("PRIMARY_NAME_FIRST")),
            _from_json_data(FeatureScoresForAttribute, data.get("PRIMARY_NAME_LAST")),
            _from_json_data(FeatureScoresForAttribute, data.get("PRIMARY_NAME_MIDDLE")),
            _from_json_data(FeatureScoresForAttribute, data.get("PRIMARY_NAME_ORG")),
            _from_json_data(FeatureScoresForAttribute, data.get("PRIMARY_NAME_PREFIX")),
            _from_json_data(FeatureScoresForAttribute, data.get("PRIMARY_NAME_SUFFIX")),
            _from_json_data(FeatureScoresForAttribute, data.get("PRIMARY_PHONE_NUMBER")),
            _from_json_data(FeatureScoresForAttribute, data.get("RECORD_TYPE")),
            _from_json_data(FeatureScoresForAttribute, data.get("REGISTRATION_COUNTRY")),
            _from_json_data(FeatureScoresForAttribute, data.get("REGISTRATION_DATE")),
            _from_json_data(FeatureScoresForAttribute, data.get("REL_ANCHOR")),
            _from_json_data(FeatureScoresForAttribute, data.get("REL_ANCHOR_DOMAIN")),
            _from_json_data(FeatureScoresForAttribute, data.get("REL_ANCHOR_KEY")),
            _from_json_data(FeatureScoresForAttribute, data.get("REL_LINK")),
            _from_json_data(FeatureScoresForAttribute, data.get("REL_POINTER")),
            _from_json_data(FeatureScoresForAttribute, data.get("REL_POINTER_DOMAIN")),
            _from_json_data(FeatureScoresForAttribute, data.get("REL_POINTER_KEY")),
            _from_json_data(FeatureScoresForAttribute, data.get("REL_POINTER_ROLE")),
            _from_json_data(FeatureScoresForAttribute, data.get("SIGNAL")),
            _from_json_data(FeatureScoresForAttribute, data.get("SKYPE")),
            _from_json_data(FeatureScoresForAttribute, data.get("SOCIAL_HANDLE")),
            _from_json_data(FeatureScoresForAttribute, data.get("SOCIAL_NETWORK")),
            _from_json_data(FeatureScoresForAttribute, data.get("SOURCE_ID")),
            _from_json_data(FeatureScoresForAttribute, data.get("SSN")),
            _from_json_data(FeatureScoresForAttribute, data.get("SSN_LAST4")),
            _from_json_data(FeatureScoresForAttribute, data.get("SSN_NUMBER")),
            _from_json_data(FeatureScoresForAttribute, data.get("TANGO")),
            _from_json_data(FeatureScoresForAttribute, data.get("TAX_ID_COUNTRY")),
            _from_json_data(FeatureScoresForAttribute, data.get("TAX_ID_NUMBER")),
            _from_json_data(FeatureScoresForAttribute, data.get("TAX_ID_TYPE")),
            _from_json_data(FeatureScoresForAttribute, data.get("TELEGRAM")),
            _from_json_data(FeatureScoresForAttribute, data.get("TRUSTED_ID_NUMBER")),
            _from_json_data(FeatureScoresForAttribute, data.get("TRUSTED_ID_TYPE")),
            _from_json_data(FeatureScoresForAttribute, data.get("TWITTER")),
            _from_json_data(FeatureScoresForAttribute, data.get("VIBER")),
            _from_json_data(FeatureScoresForAttribute, data.get("WEBSITE_ADDRESS")),
            _from_json_data(FeatureScoresForAttribute, data.get("WECHAT")),
            _from_json_data(FeatureScoresForAttribute, data.get("WHATSAPP")),
            _from_json_data(FeatureScoresForAttribute, data.get("WORK_PHONE_NUMBER")),
            _from_json_data(FeatureScoresForAttribute, data.get("ZOOMROOM")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ACCOUNT_DOMAIN"] = _to_json_data(self.account_domain)
        data["ACCOUNT_NUMBER"] = _to_json_data(self.account_number)
        data["ACCT_NUM"] = _to_json_data(self.acct_num)
        data["ADDRESS"] = _to_json_data(self.address)
        data["ADDRESS_LIST"] = _to_json_data(self.address_list)
        data["ADDR_FULL"] = _to_json_data(self.addr_full)
        data["ADDR_KEY"] = _to_json_data(self.addr_key)
        data["CELL_PHONE_NUMBER"] = _to_json_data(self.cell_phone_number)
        data["CITIZENSHIP"] = _to_json_data(self.citizenship)
        data["COUNTRY_OF_ASSOCIATION"] = _to_json_data(self.country_of_association)
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["DATE_OF_BIRTH"] = _to_json_data(self.date_of_birth)
        data["DATE_OF_DEATH"] = _to_json_data(self.date_of_death)
        data["DOB"] = _to_json_data(self.dob)
        data["DOD"] = _to_json_data(self.dod)
        data["DRIVERS_LICENSE_NUMBER"] = _to_json_data(self.drivers_license_number)
        data["DRIVERS_LICENSE_STATE"] = _to_json_data(self.drivers_license_state)
        data["DRLIC"] = _to_json_data(self.drlic)
        data["DUNS_NUMBER"] = _to_json_data(self.duns_number)
        data["EMAIL"] = _to_json_data(self.email)
        data["EMAIL_ADDRESS"] = _to_json_data(self.email_address)
        data["EMAIL_KEY"] = _to_json_data(self.email_key)
        data["EMPLOYER_NAME"] = _to_json_data(self.employer_name)
        data["ENTITY_TYPE"] = _to_json_data(self.entity_type)
        data["FACEBOOK"] = _to_json_data(self.facebook)
        data["GENDER"] = _to_json_data(self.gender)
        data["GROUP_ASSN_ID_NUMBER"] = _to_json_data(self.group_assn_id_number)
        data["GROUP_ASSN_ID_TYPE"] = _to_json_data(self.group_assn_id_type)
        data["GROUP_ASSOCIATION_ORG_NAME"] = _to_json_data(self.group_association_org_name)
        data["GROUP_ASSOCIATION_TYPE"] = _to_json_data(self.group_association_type)
        data["ID_KEY"] = _to_json_data(self.id_key)
        data["INSTAGRAM"] = _to_json_data(self.instagram)
        data["LEI_NUMBER"] = _to_json_data(self.lei_number)
        data["LINKEDIN"] = _to_json_data(self.linkedin)
        data["LOAD_ID"] = _to_json_data(self.load_id)
        data["LOGIN_ID"] = _to_json_data(self.login_id)
        data["NAME"] = _to_json_data(self.name)
        data["NAME_FULL"] = _to_json_data(self.name_full)
        data["NAME_KEY"] = _to_json_data(self.name_key)
        data["NAME_LIST"] = _to_json_data(self.name_list)
        data["NATIONALITY"] = _to_json_data(self.nationality)
        data["NATIONAL_ID"] = _to_json_data(self.national_id)
        data["NATIONAL_ID_COUNTRY"] = _to_json_data(self.national_id_country)
        data["NATIONAL_ID_NUMBER"] = _to_json_data(self.national_id_number)
        data["NIN_COUNTRY"] = _to_json_data(self.nin_country)
        data["NIN_NUMBER"] = _to_json_data(self.nin_number)
        data["NPI_NUMBER"] = _to_json_data(self.npi_number)
        data["OTHER_ID_COUNTRY"] = _to_json_data(self.other_id_country)
        data["OTHER_ID_NUMBER"] = _to_json_data(self.other_id_number)
        data["OTHER_ID_TYPE"] = _to_json_data(self.other_id_type)
        data["PASSPORT"] = _to_json_data(self.passport)
        data["PASSPORTS"] = _to_json_data(self.passports)
        data["PASSPORT_COUNTRY"] = _to_json_data(self.passport_country)
        data["PASSPORT_NUMBER"] = _to_json_data(self.passport_number)
        data["PHONE"] = _to_json_data(self.phone)
        data["PHONES"] = _to_json_data(self.phones)
        data["PHONE_KEY"] = _to_json_data(self.phone_key)
        data["PLACE_OF_BIRTH"] = _to_json_data(self.place_of_birth)
        data["PRIMARY_NAME_FIRST"] = _to_json_data(self.primary_name_first)
        data["PRIMARY_NAME_LAST"] = _to_json_data(self.primary_name_last)
        data["PRIMARY_NAME_MIDDLE"] = _to_json_data(self.primary_name_middle)
        data["PRIMARY_NAME_ORG"] = _to_json_data(self.primary_name_org)
        data["PRIMARY_NAME_PREFIX"] = _to_json_data(self.primary_name_prefix)
        data["PRIMARY_NAME_SUFFIX"] = _to_json_data(self.primary_name_suffix)
        data["PRIMARY_PHONE_NUMBER"] = _to_json_data(self.primary_phone_number)
        data["RECORD_TYPE"] = _to_json_data(self.record_type)
        data["REGISTRATION_COUNTRY"] = _to_json_data(self.registration_country)
        data["REGISTRATION_DATE"] = _to_json_data(self.registration_date)
        data["REL_ANCHOR"] = _to_json_data(self.rel_anchor)
        data["REL_ANCHOR_DOMAIN"] = _to_json_data(self.rel_anchor_domain)
        data["REL_ANCHOR_KEY"] = _to_json_data(self.rel_anchor_key)
        data["REL_LINK"] = _to_json_data(self.rel_link)
        data["REL_POINTER"] = _to_json_data(self.rel_pointer)
        data["REL_POINTER_DOMAIN"] = _to_json_data(self.rel_pointer_domain)
        data["REL_POINTER_KEY"] = _to_json_data(self.rel_pointer_key)
        data["REL_POINTER_ROLE"] = _to_json_data(self.rel_pointer_role)
        data["SIGNAL"] = _to_json_data(self.signal)
        data["SKYPE"] = _to_json_data(self.skype)
        data["SOCIAL_HANDLE"] = _to_json_data(self.social_handle)
        data["SOCIAL_NETWORK"] = _to_json_data(self.social_network)
        data["SOURCE_ID"] = _to_json_data(self.source_id)
        data["SSN"] = _to_json_data(self.ssn)
        data["SSN_LAST4"] = _to_json_data(self.ssn_last4)
        data["SSN_NUMBER"] = _to_json_data(self.ssn_number)
        data["TANGO"] = _to_json_data(self.tango)
        data["TAX_ID_COUNTRY"] = _to_json_data(self.tax_id_country)
        data["TAX_ID_NUMBER"] = _to_json_data(self.tax_id_number)
        data["TAX_ID_TYPE"] = _to_json_data(self.tax_id_type)
        data["TELEGRAM"] = _to_json_data(self.telegram)
        data["TRUSTED_ID_NUMBER"] = _to_json_data(self.trusted_id_number)
        data["TRUSTED_ID_TYPE"] = _to_json_data(self.trusted_id_type)
        data["TWITTER"] = _to_json_data(self.twitter)
        data["VIBER"] = _to_json_data(self.viber)
        data["WEBSITE_ADDRESS"] = _to_json_data(self.website_address)
        data["WECHAT"] = _to_json_data(self.wechat)
        data["WHATSAPP"] = _to_json_data(self.whatsapp)
        data["WORK_PHONE_NUMBER"] = _to_json_data(self.work_phone_number)
        data["ZOOMROOM"] = _to_json_data(self.zoomroom)
        return data

@dataclass
class FeatureScoresForAttribute:
    """
    No description.
    """

    value: 'List[FeatureScoreForAttribute]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'FeatureScoresForAttribute':
        return cls(_from_json_data(List[FeatureScoreForAttribute], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class Features:
    """
    No description.
    """

    account_domain: 'FeaturesForAttribute'
    """
    No description.
    """

    account_number: 'FeaturesForAttribute'
    """
    No description.
    """

    acct_num: 'FeaturesForAttribute'
    """
    No description.
    """

    address: 'FeaturesForAttribute'
    """
    No description.
    """

    address_list: 'FeaturesForAttribute'
    """
    No description.
    """

    addr_full: 'FeaturesForAttribute'
    """
    No description.
    """

    addr_key: 'FeaturesForAttribute'
    """
    No description.
    """

    cell_phone_number: 'FeaturesForAttribute'
    """
    No description.
    """

    citizenship: 'FeaturesForAttribute'
    """
    No description.
    """

    country_of_association: 'FeaturesForAttribute'
    """
    No description.
    """

    data_source: 'FeaturesForAttribute'
    """
    No description.
    """

    date_of_birth: 'FeaturesForAttribute'
    """
    No description.
    """

    date_of_death: 'FeaturesForAttribute'
    """
    No description.
    """

    dob: 'FeaturesForAttribute'
    """
    No description.
    """

    dod: 'FeaturesForAttribute'
    """
    No description.
    """

    drivers_license_number: 'FeaturesForAttribute'
    """
    No description.
    """

    drivers_license_state: 'FeaturesForAttribute'
    """
    No description.
    """

    drlic: 'FeaturesForAttribute'
    """
    No description.
    """

    duns_number: 'FeaturesForAttribute'
    """
    No description.
    """

    email: 'FeaturesForAttribute'
    """
    No description.
    """

    email_address: 'FeaturesForAttribute'
    """
    No description.
    """

    email_key: 'FeaturesForAttribute'
    """
    No description.
    """

    employer_name: 'FeaturesForAttribute'
    """
    No description.
    """

    entity_type: 'FeaturesForAttribute'
    """
    No description.
    """

    facebook: 'FeaturesForAttribute'
    """
    No description.
    """

    gender: 'FeaturesForAttribute'
    """
    No description.
    """

    group_assn_id_number: 'FeaturesForAttribute'
    """
    No description.
    """

    group_assn_id_type: 'FeaturesForAttribute'
    """
    No description.
    """

    group_association_org_name: 'FeaturesForAttribute'
    """
    No description.
    """

    group_association_type: 'FeaturesForAttribute'
    """
    No description.
    """

    id_key: 'FeaturesForAttribute'
    """
    No description.
    """

    instagram: 'FeaturesForAttribute'
    """
    No description.
    """

    lei_number: 'FeaturesForAttribute'
    """
    No description.
    """

    linkedin: 'FeaturesForAttribute'
    """
    No description.
    """

    load_id: 'FeaturesForAttribute'
    """
    No description.
    """

    login_id: 'FeaturesForAttribute'
    """
    No description.
    """

    name: 'FeaturesForAttribute'
    """
    No description.
    """

    name_full: 'FeaturesForAttribute'
    """
    No description.
    """

    name_key: 'FeaturesForAttribute'
    """
    No description.
    """

    name_list: 'FeaturesForAttribute'
    """
    No description.
    """

    nationality: 'FeaturesForAttribute'
    """
    No description.
    """

    national_id: 'FeaturesForAttribute'
    """
    No description.
    """

    national_id_country: 'FeaturesForAttribute'
    """
    No description.
    """

    national_id_number: 'FeaturesForAttribute'
    """
    No description.
    """

    nin_country: 'FeaturesForAttribute'
    """
    No description.
    """

    nin_number: 'FeaturesForAttribute'
    """
    No description.
    """

    npi_number: 'FeaturesForAttribute'
    """
    No description.
    """

    other_id_country: 'FeaturesForAttribute'
    """
    No description.
    """

    other_id_number: 'FeaturesForAttribute'
    """
    No description.
    """

    other_id_type: 'FeaturesForAttribute'
    """
    No description.
    """

    passport: 'FeaturesForAttribute'
    """
    No description.
    """

    passports: 'FeaturesForAttribute'
    """
    No description.
    """

    passport_country: 'FeaturesForAttribute'
    """
    No description.
    """

    passport_number: 'FeaturesForAttribute'
    """
    No description.
    """

    phone: 'FeaturesForAttribute'
    """
    No description.
    """

    phones: 'FeaturesForAttribute'
    """
    No description.
    """

    phone_key: 'FeaturesForAttribute'
    """
    No description.
    """

    place_of_birth: 'FeaturesForAttribute'
    """
    No description.
    """

    primary_name_first: 'FeaturesForAttribute'
    """
    No description.
    """

    primary_name_last: 'FeaturesForAttribute'
    """
    No description.
    """

    primary_name_middle: 'FeaturesForAttribute'
    """
    No description.
    """

    primary_name_org: 'FeaturesForAttribute'
    """
    No description.
    """

    primary_name_prefix: 'FeaturesForAttribute'
    """
    No description.
    """

    primary_name_suffix: 'FeaturesForAttribute'
    """
    No description.
    """

    primary_phone_number: 'FeaturesForAttribute'
    """
    No description.
    """

    record_type: 'FeaturesForAttribute'
    """
    No description.
    """

    registration_country: 'FeaturesForAttribute'
    """
    No description.
    """

    registration_date: 'FeaturesForAttribute'
    """
    No description.
    """

    rel_anchor: 'FeaturesForAttribute'
    """
    No description.
    """

    rel_anchor_domain: 'FeaturesForAttribute'
    """
    No description.
    """

    rel_anchor_key: 'FeaturesForAttribute'
    """
    No description.
    """

    rel_link: 'FeaturesForAttribute'
    """
    No description.
    """

    rel_pointer: 'FeaturesForAttribute'
    """
    No description.
    """

    rel_pointer_domain: 'FeaturesForAttribute'
    """
    No description.
    """

    rel_pointer_key: 'FeaturesForAttribute'
    """
    No description.
    """

    rel_pointer_role: 'FeaturesForAttribute'
    """
    No description.
    """

    signal: 'FeaturesForAttribute'
    """
    No description.
    """

    skype: 'FeaturesForAttribute'
    """
    No description.
    """

    social_handle: 'FeaturesForAttribute'
    """
    No description.
    """

    social_network: 'FeaturesForAttribute'
    """
    No description.
    """

    source_id: 'FeaturesForAttribute'
    """
    No description.
    """

    ssn: 'FeaturesForAttribute'
    """
    No description.
    """

    ssn_last4: 'FeaturesForAttribute'
    """
    No description.
    """

    ssn_number: 'FeaturesForAttribute'
    """
    No description.
    """

    tango: 'FeaturesForAttribute'
    """
    No description.
    """

    tax_id_country: 'FeaturesForAttribute'
    """
    No description.
    """

    tax_id_number: 'FeaturesForAttribute'
    """
    No description.
    """

    tax_id_type: 'FeaturesForAttribute'
    """
    No description.
    """

    telegram: 'FeaturesForAttribute'
    """
    No description.
    """

    trusted_id_number: 'FeaturesForAttribute'
    """
    No description.
    """

    trusted_id_type: 'FeaturesForAttribute'
    """
    No description.
    """

    twitter: 'FeaturesForAttribute'
    """
    No description.
    """

    viber: 'FeaturesForAttribute'
    """
    No description.
    """

    website_address: 'FeaturesForAttribute'
    """
    No description.
    """

    wechat: 'FeaturesForAttribute'
    """
    No description.
    """

    whatsapp: 'FeaturesForAttribute'
    """
    No description.
    """

    work_phone_number: 'FeaturesForAttribute'
    """
    No description.
    """

    zoomroom: 'FeaturesForAttribute'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'Features':
        return cls(
            _from_json_data(FeaturesForAttribute, data.get("ACCOUNT_DOMAIN")),
            _from_json_data(FeaturesForAttribute, data.get("ACCOUNT_NUMBER")),
            _from_json_data(FeaturesForAttribute, data.get("ACCT_NUM")),
            _from_json_data(FeaturesForAttribute, data.get("ADDRESS")),
            _from_json_data(FeaturesForAttribute, data.get("ADDRESS_LIST")),
            _from_json_data(FeaturesForAttribute, data.get("ADDR_FULL")),
            _from_json_data(FeaturesForAttribute, data.get("ADDR_KEY")),
            _from_json_data(FeaturesForAttribute, data.get("CELL_PHONE_NUMBER")),
            _from_json_data(FeaturesForAttribute, data.get("CITIZENSHIP")),
            _from_json_data(FeaturesForAttribute, data.get("COUNTRY_OF_ASSOCIATION")),
            _from_json_data(FeaturesForAttribute, data.get("DATA_SOURCE")),
            _from_json_data(FeaturesForAttribute, data.get("DATE_OF_BIRTH")),
            _from_json_data(FeaturesForAttribute, data.get("DATE_OF_DEATH")),
            _from_json_data(FeaturesForAttribute, data.get("DOB")),
            _from_json_data(FeaturesForAttribute, data.get("DOD")),
            _from_json_data(FeaturesForAttribute, data.get("DRIVERS_LICENSE_NUMBER")),
            _from_json_data(FeaturesForAttribute, data.get("DRIVERS_LICENSE_STATE")),
            _from_json_data(FeaturesForAttribute, data.get("DRLIC")),
            _from_json_data(FeaturesForAttribute, data.get("DUNS_NUMBER")),
            _from_json_data(FeaturesForAttribute, data.get("EMAIL")),
            _from_json_data(FeaturesForAttribute, data.get("EMAIL_ADDRESS")),
            _from_json_data(FeaturesForAttribute, data.get("EMAIL_KEY")),
            _from_json_data(FeaturesForAttribute, data.get("EMPLOYER_NAME")),
            _from_json_data(FeaturesForAttribute, data.get("ENTITY_TYPE")),
            _from_json_data(FeaturesForAttribute, data.get("FACEBOOK")),
            _from_json_data(FeaturesForAttribute, data.get("GENDER")),
            _from_json_data(FeaturesForAttribute, data.get("GROUP_ASSN_ID_NUMBER")),
            _from_json_data(FeaturesForAttribute, data.get("GROUP_ASSN_ID_TYPE")),
            _from_json_data(FeaturesForAttribute, data.get("GROUP_ASSOCIATION_ORG_NAME")),
            _from_json_data(FeaturesForAttribute, data.get("GROUP_ASSOCIATION_TYPE")),
            _from_json_data(FeaturesForAttribute, data.get("ID_KEY")),
            _from_json_data(FeaturesForAttribute, data.get("INSTAGRAM")),
            _from_json_data(FeaturesForAttribute, data.get("LEI_NUMBER")),
            _from_json_data(FeaturesForAttribute, data.get("LINKEDIN")),
            _from_json_data(FeaturesForAttribute, data.get("LOAD_ID")),
            _from_json_data(FeaturesForAttribute, data.get("LOGIN_ID")),
            _from_json_data(FeaturesForAttribute, data.get("NAME")),
            _from_json_data(FeaturesForAttribute, data.get("NAME_FULL")),
            _from_json_data(FeaturesForAttribute, data.get("NAME_KEY")),
            _from_json_data(FeaturesForAttribute, data.get("NAME_LIST")),
            _from_json_data(FeaturesForAttribute, data.get("NATIONALITY")),
            _from_json_data(FeaturesForAttribute, data.get("NATIONAL_ID")),
            _from_json_data(FeaturesForAttribute, data.get("NATIONAL_ID_COUNTRY")),
            _from_json_data(FeaturesForAttribute, data.get("NATIONAL_ID_NUMBER")),
            _from_json_data(FeaturesForAttribute, data.get("NIN_COUNTRY")),
            _from_json_data(FeaturesForAttribute, data.get("NIN_NUMBER")),
            _from_json_data(FeaturesForAttribute, data.get("NPI_NUMBER")),
            _from_json_data(FeaturesForAttribute, data.get("OTHER_ID_COUNTRY")),
            _from_json_data(FeaturesForAttribute, data.get("OTHER_ID_NUMBER")),
            _from_json_data(FeaturesForAttribute, data.get("OTHER_ID_TYPE")),
            _from_json_data(FeaturesForAttribute, data.get("PASSPORT")),
            _from_json_data(FeaturesForAttribute, data.get("PASSPORTS")),
            _from_json_data(FeaturesForAttribute, data.get("PASSPORT_COUNTRY")),
            _from_json_data(FeaturesForAttribute, data.get("PASSPORT_NUMBER")),
            _from_json_data(FeaturesForAttribute, data.get("PHONE")),
            _from_json_data(FeaturesForAttribute, data.get("PHONES")),
            _from_json_data(FeaturesForAttribute, data.get("PHONE_KEY")),
            _from_json_data(FeaturesForAttribute, data.get("PLACE_OF_BIRTH")),
            _from_json_data(FeaturesForAttribute, data.get("PRIMARY_NAME_FIRST")),
            _from_json_data(FeaturesForAttribute, data.get("PRIMARY_NAME_LAST")),
            _from_json_data(FeaturesForAttribute, data.get("PRIMARY_NAME_MIDDLE")),
            _from_json_data(FeaturesForAttribute, data.get("PRIMARY_NAME_ORG")),
            _from_json_data(FeaturesForAttribute, data.get("PRIMARY_NAME_PREFIX")),
            _from_json_data(FeaturesForAttribute, data.get("PRIMARY_NAME_SUFFIX")),
            _from_json_data(FeaturesForAttribute, data.get("PRIMARY_PHONE_NUMBER")),
            _from_json_data(FeaturesForAttribute, data.get("RECORD_TYPE")),
            _from_json_data(FeaturesForAttribute, data.get("REGISTRATION_COUNTRY")),
            _from_json_data(FeaturesForAttribute, data.get("REGISTRATION_DATE")),
            _from_json_data(FeaturesForAttribute, data.get("REL_ANCHOR")),
            _from_json_data(FeaturesForAttribute, data.get("REL_ANCHOR_DOMAIN")),
            _from_json_data(FeaturesForAttribute, data.get("REL_ANCHOR_KEY")),
            _from_json_data(FeaturesForAttribute, data.get("REL_LINK")),
            _from_json_data(FeaturesForAttribute, data.get("REL_POINTER")),
            _from_json_data(FeaturesForAttribute, data.get("REL_POINTER_DOMAIN")),
            _from_json_data(FeaturesForAttribute, data.get("REL_POINTER_KEY")),
            _from_json_data(FeaturesForAttribute, data.get("REL_POINTER_ROLE")),
            _from_json_data(FeaturesForAttribute, data.get("SIGNAL")),
            _from_json_data(FeaturesForAttribute, data.get("SKYPE")),
            _from_json_data(FeaturesForAttribute, data.get("SOCIAL_HANDLE")),
            _from_json_data(FeaturesForAttribute, data.get("SOCIAL_NETWORK")),
            _from_json_data(FeaturesForAttribute, data.get("SOURCE_ID")),
            _from_json_data(FeaturesForAttribute, data.get("SSN")),
            _from_json_data(FeaturesForAttribute, data.get("SSN_LAST4")),
            _from_json_data(FeaturesForAttribute, data.get("SSN_NUMBER")),
            _from_json_data(FeaturesForAttribute, data.get("TANGO")),
            _from_json_data(FeaturesForAttribute, data.get("TAX_ID_COUNTRY")),
            _from_json_data(FeaturesForAttribute, data.get("TAX_ID_NUMBER")),
            _from_json_data(FeaturesForAttribute, data.get("TAX_ID_TYPE")),
            _from_json_data(FeaturesForAttribute, data.get("TELEGRAM")),
            _from_json_data(FeaturesForAttribute, data.get("TRUSTED_ID_NUMBER")),
            _from_json_data(FeaturesForAttribute, data.get("TRUSTED_ID_TYPE")),
            _from_json_data(FeaturesForAttribute, data.get("TWITTER")),
            _from_json_data(FeaturesForAttribute, data.get("VIBER")),
            _from_json_data(FeaturesForAttribute, data.get("WEBSITE_ADDRESS")),
            _from_json_data(FeaturesForAttribute, data.get("WECHAT")),
            _from_json_data(FeaturesForAttribute, data.get("WHATSAPP")),
            _from_json_data(FeaturesForAttribute, data.get("WORK_PHONE_NUMBER")),
            _from_json_data(FeaturesForAttribute, data.get("ZOOMROOM")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ACCOUNT_DOMAIN"] = _to_json_data(self.account_domain)
        data["ACCOUNT_NUMBER"] = _to_json_data(self.account_number)
        data["ACCT_NUM"] = _to_json_data(self.acct_num)
        data["ADDRESS"] = _to_json_data(self.address)
        data["ADDRESS_LIST"] = _to_json_data(self.address_list)
        data["ADDR_FULL"] = _to_json_data(self.addr_full)
        data["ADDR_KEY"] = _to_json_data(self.addr_key)
        data["CELL_PHONE_NUMBER"] = _to_json_data(self.cell_phone_number)
        data["CITIZENSHIP"] = _to_json_data(self.citizenship)
        data["COUNTRY_OF_ASSOCIATION"] = _to_json_data(self.country_of_association)
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["DATE_OF_BIRTH"] = _to_json_data(self.date_of_birth)
        data["DATE_OF_DEATH"] = _to_json_data(self.date_of_death)
        data["DOB"] = _to_json_data(self.dob)
        data["DOD"] = _to_json_data(self.dod)
        data["DRIVERS_LICENSE_NUMBER"] = _to_json_data(self.drivers_license_number)
        data["DRIVERS_LICENSE_STATE"] = _to_json_data(self.drivers_license_state)
        data["DRLIC"] = _to_json_data(self.drlic)
        data["DUNS_NUMBER"] = _to_json_data(self.duns_number)
        data["EMAIL"] = _to_json_data(self.email)
        data["EMAIL_ADDRESS"] = _to_json_data(self.email_address)
        data["EMAIL_KEY"] = _to_json_data(self.email_key)
        data["EMPLOYER_NAME"] = _to_json_data(self.employer_name)
        data["ENTITY_TYPE"] = _to_json_data(self.entity_type)
        data["FACEBOOK"] = _to_json_data(self.facebook)
        data["GENDER"] = _to_json_data(self.gender)
        data["GROUP_ASSN_ID_NUMBER"] = _to_json_data(self.group_assn_id_number)
        data["GROUP_ASSN_ID_TYPE"] = _to_json_data(self.group_assn_id_type)
        data["GROUP_ASSOCIATION_ORG_NAME"] = _to_json_data(self.group_association_org_name)
        data["GROUP_ASSOCIATION_TYPE"] = _to_json_data(self.group_association_type)
        data["ID_KEY"] = _to_json_data(self.id_key)
        data["INSTAGRAM"] = _to_json_data(self.instagram)
        data["LEI_NUMBER"] = _to_json_data(self.lei_number)
        data["LINKEDIN"] = _to_json_data(self.linkedin)
        data["LOAD_ID"] = _to_json_data(self.load_id)
        data["LOGIN_ID"] = _to_json_data(self.login_id)
        data["NAME"] = _to_json_data(self.name)
        data["NAME_FULL"] = _to_json_data(self.name_full)
        data["NAME_KEY"] = _to_json_data(self.name_key)
        data["NAME_LIST"] = _to_json_data(self.name_list)
        data["NATIONALITY"] = _to_json_data(self.nationality)
        data["NATIONAL_ID"] = _to_json_data(self.national_id)
        data["NATIONAL_ID_COUNTRY"] = _to_json_data(self.national_id_country)
        data["NATIONAL_ID_NUMBER"] = _to_json_data(self.national_id_number)
        data["NIN_COUNTRY"] = _to_json_data(self.nin_country)
        data["NIN_NUMBER"] = _to_json_data(self.nin_number)
        data["NPI_NUMBER"] = _to_json_data(self.npi_number)
        data["OTHER_ID_COUNTRY"] = _to_json_data(self.other_id_country)
        data["OTHER_ID_NUMBER"] = _to_json_data(self.other_id_number)
        data["OTHER_ID_TYPE"] = _to_json_data(self.other_id_type)
        data["PASSPORT"] = _to_json_data(self.passport)
        data["PASSPORTS"] = _to_json_data(self.passports)
        data["PASSPORT_COUNTRY"] = _to_json_data(self.passport_country)
        data["PASSPORT_NUMBER"] = _to_json_data(self.passport_number)
        data["PHONE"] = _to_json_data(self.phone)
        data["PHONES"] = _to_json_data(self.phones)
        data["PHONE_KEY"] = _to_json_data(self.phone_key)
        data["PLACE_OF_BIRTH"] = _to_json_data(self.place_of_birth)
        data["PRIMARY_NAME_FIRST"] = _to_json_data(self.primary_name_first)
        data["PRIMARY_NAME_LAST"] = _to_json_data(self.primary_name_last)
        data["PRIMARY_NAME_MIDDLE"] = _to_json_data(self.primary_name_middle)
        data["PRIMARY_NAME_ORG"] = _to_json_data(self.primary_name_org)
        data["PRIMARY_NAME_PREFIX"] = _to_json_data(self.primary_name_prefix)
        data["PRIMARY_NAME_SUFFIX"] = _to_json_data(self.primary_name_suffix)
        data["PRIMARY_PHONE_NUMBER"] = _to_json_data(self.primary_phone_number)
        data["RECORD_TYPE"] = _to_json_data(self.record_type)
        data["REGISTRATION_COUNTRY"] = _to_json_data(self.registration_country)
        data["REGISTRATION_DATE"] = _to_json_data(self.registration_date)
        data["REL_ANCHOR"] = _to_json_data(self.rel_anchor)
        data["REL_ANCHOR_DOMAIN"] = _to_json_data(self.rel_anchor_domain)
        data["REL_ANCHOR_KEY"] = _to_json_data(self.rel_anchor_key)
        data["REL_LINK"] = _to_json_data(self.rel_link)
        data["REL_POINTER"] = _to_json_data(self.rel_pointer)
        data["REL_POINTER_DOMAIN"] = _to_json_data(self.rel_pointer_domain)
        data["REL_POINTER_KEY"] = _to_json_data(self.rel_pointer_key)
        data["REL_POINTER_ROLE"] = _to_json_data(self.rel_pointer_role)
        data["SIGNAL"] = _to_json_data(self.signal)
        data["SKYPE"] = _to_json_data(self.skype)
        data["SOCIAL_HANDLE"] = _to_json_data(self.social_handle)
        data["SOCIAL_NETWORK"] = _to_json_data(self.social_network)
        data["SOURCE_ID"] = _to_json_data(self.source_id)
        data["SSN"] = _to_json_data(self.ssn)
        data["SSN_LAST4"] = _to_json_data(self.ssn_last4)
        data["SSN_NUMBER"] = _to_json_data(self.ssn_number)
        data["TANGO"] = _to_json_data(self.tango)
        data["TAX_ID_COUNTRY"] = _to_json_data(self.tax_id_country)
        data["TAX_ID_NUMBER"] = _to_json_data(self.tax_id_number)
        data["TAX_ID_TYPE"] = _to_json_data(self.tax_id_type)
        data["TELEGRAM"] = _to_json_data(self.telegram)
        data["TRUSTED_ID_NUMBER"] = _to_json_data(self.trusted_id_number)
        data["TRUSTED_ID_TYPE"] = _to_json_data(self.trusted_id_type)
        data["TWITTER"] = _to_json_data(self.twitter)
        data["VIBER"] = _to_json_data(self.viber)
        data["WEBSITE_ADDRESS"] = _to_json_data(self.website_address)
        data["WECHAT"] = _to_json_data(self.wechat)
        data["WHATSAPP"] = _to_json_data(self.whatsapp)
        data["WORK_PHONE_NUMBER"] = _to_json_data(self.work_phone_number)
        data["ZOOMROOM"] = _to_json_data(self.zoomroom)
        return data

@dataclass
class FeaturesForAttribute:
    """
    No description.
    """

    value: 'List[FeatureForAttribute]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'FeaturesForAttribute':
        return cls(_from_json_data(List[FeatureForAttribute], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class FinalState:
    """
    No description.
    """

    need_reevaluation: 'int'
    """
    No description.
    """

    virtual_entities: 'List[VirtualEntitySynopsis]'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'FinalState':
        return cls(
            _from_json_data(int, data.get("NEED_REEVALUATION")),
            _from_json_data(List[VirtualEntitySynopsis], data.get("VIRTUAL_ENTITIES")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["NEED_REEVALUATION"] = _to_json_data(self.need_reevaluation)
        data["VIRTUAL_ENTITIES"] = _to_json_data(self.virtual_entities)
        return data

@dataclass
class FocusRecord:
    """
    No description.
    """

    data_source: 'str'
    """
    No description.
    """

    record_id: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'FocusRecord':
        return cls(
            _from_json_data(str, data.get("DATA_SOURCE")),
            _from_json_data(str, data.get("RECORD_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["RECORD_ID"] = _to_json_data(self.record_id)
        return data

@dataclass
class FocusRecords:
    """
    No description.
    """

    value: 'List[FocusRecord]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'FocusRecords':
        return cls(_from_json_data(List[FocusRecord], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class G2config:
    """
    No description.
    """

    cfg_attr: 'List[CfgAttr]'
    """
    No description.
    """

    cfg_cfbom: 'List[CfgCfbom]'
    """
    No description.
    """

    cfg_cfcall: 'List[CfgCfcall]'
    """
    No description.
    """

    cfg_cfrtn: 'List[CfgCfrtn]'
    """
    No description.
    """

    cfg_cfunc: 'List[CfgCfunc]'
    """
    No description.
    """

    cfg_dfbom: 'List[CfgDfbom]'
    """
    No description.
    """

    cfg_dfcall: 'List[CfgDfcall]'
    """
    No description.
    """

    cfg_dfunc: 'List[CfgDfunc]'
    """
    No description.
    """

    cfg_dsrc: 'List[CfgDsrc]'
    """
    No description.
    """

    cfg_dsrc_interest: 'List[CfgDsrcInterest]'
    """
    No description.
    """

    cfg_ebom: 'List[CfgEbom]'
    """
    No description.
    """

    cfg_eclass: 'List[CfgEclass]'
    """
    No description.
    """

    cfg_efbom: 'List[CfgEfbom]'
    """
    No description.
    """

    cfg_efcall: 'List[CfgEfcall]'
    """
    No description.
    """

    cfg_efunc: 'List[CfgEfunc]'
    """
    No description.
    """

    cfg_erfrag: 'List[CfgErfrag]'
    """
    No description.
    """

    cfg_errule: 'List[CfgErrule]'
    """
    No description.
    """

    cfg_etype: 'List[CfgEtype]'
    """
    No description.
    """

    cfg_fbom: 'List[CfgFbom]'
    """
    No description.
    """

    cfg_fbovr: 'List[CfgFbovr]'
    """
    No description.
    """

    cfg_fclass: 'List[CfgFclass]'
    """
    No description.
    """

    cfg_felem: 'List[CfgFelem]'
    """
    No description.
    """

    cfg_ftype: 'List[CfgFtype]'
    """
    No description.
    """

    cfg_generic_threshold: 'List[CfgGenericThreshold]'
    """
    No description.
    """

    cfg_gplan: 'List[CfgGplan]'
    """
    No description.
    """

    cfg_lens: 'List[CfgLens]'
    """
    No description.
    """

    cfg_lensrl: 'List[CfgLensrl]'
    """
    No description.
    """

    cfg_rclass: 'List[CfgRclass]'
    """
    No description.
    """

    cfg_rtype: 'List[CfgRtype]'
    """
    No description.
    """

    cfg_sfcall: 'List[CfgSfcall]'
    """
    No description.
    """

    cfg_sfunc: 'List[CfgSfunc]'
    """
    No description.
    """

    config_base_version: 'ConfigBaseVersion'
    """
    No description.
    """

    sys_oom: 'List[SysOom]'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'G2config':
        return cls(
            _from_json_data(List[CfgAttr], data.get("CFG_ATTR")),
            _from_json_data(List[CfgCfbom], data.get("CFG_CFBOM")),
            _from_json_data(List[CfgCfcall], data.get("CFG_CFCALL")),
            _from_json_data(List[CfgCfrtn], data.get("CFG_CFRTN")),
            _from_json_data(List[CfgCfunc], data.get("CFG_CFUNC")),
            _from_json_data(List[CfgDfbom], data.get("CFG_DFBOM")),
            _from_json_data(List[CfgDfcall], data.get("CFG_DFCALL")),
            _from_json_data(List[CfgDfunc], data.get("CFG_DFUNC")),
            _from_json_data(List[CfgDsrc], data.get("CFG_DSRC")),
            _from_json_data(List[CfgDsrcInterest], data.get("CFG_DSRC_INTEREST")),
            _from_json_data(List[CfgEbom], data.get("CFG_EBOM")),
            _from_json_data(List[CfgEclass], data.get("CFG_ECLASS")),
            _from_json_data(List[CfgEfbom], data.get("CFG_EFBOM")),
            _from_json_data(List[CfgEfcall], data.get("CFG_EFCALL")),
            _from_json_data(List[CfgEfunc], data.get("CFG_EFUNC")),
            _from_json_data(List[CfgErfrag], data.get("CFG_ERFRAG")),
            _from_json_data(List[CfgErrule], data.get("CFG_ERRULE")),
            _from_json_data(List[CfgEtype], data.get("CFG_ETYPE")),
            _from_json_data(List[CfgFbom], data.get("CFG_FBOM")),
            _from_json_data(List[CfgFbovr], data.get("CFG_FBOVR")),
            _from_json_data(List[CfgFclass], data.get("CFG_FCLASS")),
            _from_json_data(List[CfgFelem], data.get("CFG_FELEM")),
            _from_json_data(List[CfgFtype], data.get("CFG_FTYPE")),
            _from_json_data(List[CfgGenericThreshold], data.get("CFG_GENERIC_THRESHOLD")),
            _from_json_data(List[CfgGplan], data.get("CFG_GPLAN")),
            _from_json_data(List[CfgLens], data.get("CFG_LENS")),
            _from_json_data(List[CfgLensrl], data.get("CFG_LENSRL")),
            _from_json_data(List[CfgRclass], data.get("CFG_RCLASS")),
            _from_json_data(List[CfgRtype], data.get("CFG_RTYPE")),
            _from_json_data(List[CfgSfcall], data.get("CFG_SFCALL")),
            _from_json_data(List[CfgSfunc], data.get("CFG_SFUNC")),
            _from_json_data(ConfigBaseVersion, data.get("CONFIG_BASE_VERSION")),
            _from_json_data(List[SysOom], data.get("SYS_OOM")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CFG_ATTR"] = _to_json_data(self.cfg_attr)
        data["CFG_CFBOM"] = _to_json_data(self.cfg_cfbom)
        data["CFG_CFCALL"] = _to_json_data(self.cfg_cfcall)
        data["CFG_CFRTN"] = _to_json_data(self.cfg_cfrtn)
        data["CFG_CFUNC"] = _to_json_data(self.cfg_cfunc)
        data["CFG_DFBOM"] = _to_json_data(self.cfg_dfbom)
        data["CFG_DFCALL"] = _to_json_data(self.cfg_dfcall)
        data["CFG_DFUNC"] = _to_json_data(self.cfg_dfunc)
        data["CFG_DSRC"] = _to_json_data(self.cfg_dsrc)
        data["CFG_DSRC_INTEREST"] = _to_json_data(self.cfg_dsrc_interest)
        data["CFG_EBOM"] = _to_json_data(self.cfg_ebom)
        data["CFG_ECLASS"] = _to_json_data(self.cfg_eclass)
        data["CFG_EFBOM"] = _to_json_data(self.cfg_efbom)
        data["CFG_EFCALL"] = _to_json_data(self.cfg_efcall)
        data["CFG_EFUNC"] = _to_json_data(self.cfg_efunc)
        data["CFG_ERFRAG"] = _to_json_data(self.cfg_erfrag)
        data["CFG_ERRULE"] = _to_json_data(self.cfg_errule)
        data["CFG_ETYPE"] = _to_json_data(self.cfg_etype)
        data["CFG_FBOM"] = _to_json_data(self.cfg_fbom)
        data["CFG_FBOVR"] = _to_json_data(self.cfg_fbovr)
        data["CFG_FCLASS"] = _to_json_data(self.cfg_fclass)
        data["CFG_FELEM"] = _to_json_data(self.cfg_felem)
        data["CFG_FTYPE"] = _to_json_data(self.cfg_ftype)
        data["CFG_GENERIC_THRESHOLD"] = _to_json_data(self.cfg_generic_threshold)
        data["CFG_GPLAN"] = _to_json_data(self.cfg_gplan)
        data["CFG_LENS"] = _to_json_data(self.cfg_lens)
        data["CFG_LENSRL"] = _to_json_data(self.cfg_lensrl)
        data["CFG_RCLASS"] = _to_json_data(self.cfg_rclass)
        data["CFG_RTYPE"] = _to_json_data(self.cfg_rtype)
        data["CFG_SFCALL"] = _to_json_data(self.cfg_sfcall)
        data["CFG_SFUNC"] = _to_json_data(self.cfg_sfunc)
        data["CONFIG_BASE_VERSION"] = _to_json_data(self.config_base_version)
        data["SYS_OOM"] = _to_json_data(self.sys_oom)
        return data

@dataclass
class How:
    """
    No description.
    """

    how_results: 'HowResults'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'How':
        return cls(
            _from_json_data(HowResults, data.get("HOW_RESULTS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["HOW_RESULTS"] = _to_json_data(self.how_results)
        return data

@dataclass
class HowResults:
    """
    No description.
    """

    final_state: 'FinalState'
    """
    No description.
    """

    resolution_steps: 'ResolutionSteps'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'HowResults':
        return cls(
            _from_json_data(FinalState, data.get("FINAL_STATE")),
            _from_json_data(ResolutionSteps, data.get("RESOLUTION_STEPS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FINAL_STATE"] = _to_json_data(self.final_state)
        data["RESOLUTION_STEPS"] = _to_json_data(self.resolution_steps)
        return data

@dataclass
class Interesting:
    """
    No description.
    """

    interesting_entities: 'InterestingEntities'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'Interesting':
        return cls(
            _from_json_data(InterestingEntities, data.get("INTERESTING_ENTITIES")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["INTERESTING_ENTITIES"] = _to_json_data(self.interesting_entities)
        return data

@dataclass
class InterestingEntities:
    """
    No description.
    """

    entities: 'List[InterestingEntity]'
    """
    No description.
    """

    notices: 'Notices'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'InterestingEntities':
        return cls(
            _from_json_data(List[InterestingEntity], data.get("ENTITIES")),
            _from_json_data(Notices, data.get("NOTICES")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITIES"] = _to_json_data(self.entities)
        data["NOTICES"] = _to_json_data(self.notices)
        return data

@dataclass
class InterestingEntitySampleRecords:
    data_source: 'str'
    """
    No description.
    """

    flags: 'List[str]'
    """
    No description.
    """

    record_id: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'InterestingEntitySampleRecords':
        return cls(
            _from_json_data(str, data.get("DATA_SOURCE")),
            _from_json_data(List[str], data.get("FLAGS")),
            _from_json_data(str, data.get("RECORD_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["FLAGS"] = _to_json_data(self.flags)
        data["RECORD_ID"] = _to_json_data(self.record_id)
        return data

@dataclass
class InterestingEntity:
    """
    No description.
    """

    degrees: 'int'
    """
    No description.
    """

    entity_id: 'int'
    """
    No description.
    """

    flags: 'List[str]'
    """
    No description.
    """

    sample_records: 'List[InterestingEntitySampleRecords]'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'InterestingEntity':
        return cls(
            _from_json_data(int, data.get("DEGREES")),
            _from_json_data(int, data.get("ENTITY_ID")),
            _from_json_data(List[str], data.get("FLAGS")),
            _from_json_data(List[InterestingEntitySampleRecords], data.get("SAMPLE_RECORDS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DEGREES"] = _to_json_data(self.degrees)
        data["ENTITY_ID"] = _to_json_data(self.entity_id)
        data["FLAGS"] = _to_json_data(self.flags)
        data["SAMPLE_RECORDS"] = _to_json_data(self.sample_records)
        return data

@dataclass
class JSONDataAcctNum:
    account_domain: 'str'
    """
    No description.
    """

    account_number: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'JSONDataAcctNum':
        return cls(
            _from_json_data(str, data.get("ACCOUNT_DOMAIN")),
            _from_json_data(str, data.get("ACCOUNT_NUMBER")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ACCOUNT_DOMAIN"] = _to_json_data(self.account_domain)
        data["ACCOUNT_NUMBER"] = _to_json_data(self.account_number)
        return data

@dataclass
class JSONDataSsn:
    passport_number: 'str'
    """
    No description.
    """

    ssn_number: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'JSONDataSsn':
        return cls(
            _from_json_data(str, data.get("PASSPORT_NUMBER")),
            _from_json_data(str, data.get("SSN_NUMBER")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["PASSPORT_NUMBER"] = _to_json_data(self.passport_number)
        data["SSN_NUMBER"] = _to_json_data(self.ssn_number)
        return data

@dataclass
class JSONDataSsnLast4:
    ssn_last4: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'JSONDataSsnLast4':
        return cls(
            _from_json_data(int, data.get("SSN_LAST4")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["SSN_LAST4"] = _to_json_data(self.ssn_last4)
        return data

@dataclass
class JSONData:
    """
    No description.
    """

    account_domain: 'str'
    """
    No description.
    """

    account_number: 'str'
    """
    No description.
    """

    acct_num: 'List[JSONDataAcctNum]'
    """
    No description.
    """

    address: 'str'
    """
    No description.
    """

    address_list: 'Addresses'
    """
    No description.
    """

    addr_full: 'str'
    """
    No description.
    """

    addr_key: 'str'
    """
    No description.
    """

    cell_phone_number: 'str'
    """
    No description.
    """

    citizenship: 'str'
    """
    No description.
    """

    country_of_association: 'str'
    """
    No description.
    """

    data_source: 'str'
    """
    No description.
    """

    date_of_birth: 'str'
    """
    No description.
    """

    date_of_death: 'str'
    """
    No description.
    """

    dob: 'str'
    """
    No description.
    """

    dod: 'str'
    """
    No description.
    """

    drivers_license_number: 'str'
    """
    No description.
    """

    drivers_license_state: 'str'
    """
    No description.
    """

    drlic: 'str'
    """
    No description.
    """

    dsrc_action: 'str'
    """
    No description.
    """

    dsrc_code: 'str'
    """
    No description.
    """

    duns_number: 'str'
    """
    No description.
    """

    email: 'str'
    """
    No description.
    """

    email_address: 'str'
    """
    No description.
    """

    email_key: 'str'
    """
    No description.
    """

    employer_name: 'str'
    """
    No description.
    """

    entity_type: 'str'
    """
    No description.
    """

    ent_src_desc: 'str'
    """
    No description.
    """

    ent_src_key: 'str'
    """
    No description.
    """

    etype_code: 'str'
    """
    No description.
    """

    facebook: 'str'
    """
    No description.
    """

    gender: 'str'
    """
    No description.
    """

    group_assn_id_number: 'str'
    """
    No description.
    """

    group_assn_id_type: 'str'
    """
    No description.
    """

    group_association_org_name: 'str'
    """
    No description.
    """

    group_association_type: 'str'
    """
    No description.
    """

    id_key: 'str'
    """
    No description.
    """

    instagram: 'str'
    """
    No description.
    """

    lei_number: 'str'
    """
    No description.
    """

    linkedin: 'str'
    """
    No description.
    """

    load_id: 'str'
    """
    No description.
    """

    login_id: 'str'
    """
    No description.
    """

    name: 'Names'
    """
    No description.
    """

    name_full: 'str'
    """
    No description.
    """

    name_key: 'str'
    """
    No description.
    """

    name_list: 'Names'
    """
    No description.
    """

    nationality: 'str'
    """
    No description.
    """

    national_id: 'str'
    """
    No description.
    """

    national_id_country: 'str'
    """
    No description.
    """

    national_id_number: 'str'
    """
    No description.
    """

    nin_country: 'str'
    """
    No description.
    """

    nin_number: 'str'
    """
    No description.
    """

    npi_number: 'str'
    """
    No description.
    """

    obs_src_key: 'str'
    """
    No description.
    """

    other_id_country: 'str'
    """
    No description.
    """

    other_id_number: 'str'
    """
    No description.
    """

    other_id_type: 'str'
    """
    No description.
    """

    passport: 'str'
    """
    No description.
    """

    passports: 'Passports'
    """
    No description.
    """

    passport_country: 'str'
    """
    No description.
    """

    passport_number: 'str'
    """
    No description.
    """

    phone: 'str'
    """
    No description.
    """

    phones: 'Phones'
    """
    No description.
    """

    phone_key: 'str'
    """
    No description.
    """

    place_of_birth: 'str'
    """
    No description.
    """

    primary_name_first: 'str'
    """
    No description.
    """

    primary_name_last: 'str'
    """
    No description.
    """

    primary_name_middle: 'str'
    """
    No description.
    """

    primary_name_org: 'str'
    """
    No description.
    """

    primary_name_prefix: 'str'
    """
    No description.
    """

    primary_name_suffix: 'str'
    """
    No description.
    """

    primary_phone_number: 'str'
    """
    No description.
    """

    record_id: 'str'
    """
    No description.
    """

    record_type: 'str'
    """
    No description.
    """

    registration_country: 'str'
    """
    No description.
    """

    registration_date: 'str'
    """
    No description.
    """

    relationships: 'Relationships'
    """
    No description.
    """

    rel_anchor: 'str'
    """
    No description.
    """

    rel_anchor_domain: 'str'
    """
    No description.
    """

    rel_anchor_key: 'str'
    """
    No description.
    """

    rel_link: 'str'
    """
    No description.
    """

    rel_pointer: 'str'
    """
    No description.
    """

    rel_pointer_domain: 'str'
    """
    No description.
    """

    rel_pointer_key: 'str'
    """
    No description.
    """

    rel_pointer_role: 'str'
    """
    No description.
    """

    signal: 'str'
    """
    No description.
    """

    skype: 'str'
    """
    No description.
    """

    social_handle: 'str'
    """
    No description.
    """

    social_network: 'str'
    """
    No description.
    """

    source_id: 'str'
    """
    No description.
    """

    ssn: 'List[JSONDataSsn]'
    """
    No description.
    """

    ssn_last4: 'List[JSONDataSsnLast4]'
    """
    No description.
    """

    ssn_number: 'str'
    """
    No description.
    """

    tango: 'str'
    """
    No description.
    """

    tax_id_country: 'str'
    """
    No description.
    """

    tax_id_number: 'str'
    """
    No description.
    """

    tax_id_type: 'str'
    """
    No description.
    """

    telegram: 'str'
    """
    No description.
    """

    trusted_id_number: 'str'
    """
    No description.
    """

    trusted_id_type: 'str'
    """
    No description.
    """

    twitter: 'str'
    """
    No description.
    """

    viber: 'str'
    """
    No description.
    """

    website_address: 'str'
    """
    No description.
    """

    wechat: 'str'
    """
    No description.
    """

    whatsapp: 'str'
    """
    No description.
    """

    work_phone_number: 'str'
    """
    No description.
    """

    zoomroom: 'str'
    """
    No description.
    """

    name0: 'Names'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'JSONData':
        return cls(
            _from_json_data(str, data.get("ACCOUNT_DOMAIN")),
            _from_json_data(str, data.get("ACCOUNT_NUMBER")),
            _from_json_data(List[JSONDataAcctNum], data.get("ACCT_NUM")),
            _from_json_data(str, data.get("ADDRESS")),
            _from_json_data(Addresses, data.get("ADDRESS_LIST")),
            _from_json_data(str, data.get("ADDR_FULL")),
            _from_json_data(str, data.get("ADDR_KEY")),
            _from_json_data(str, data.get("CELL_PHONE_NUMBER")),
            _from_json_data(str, data.get("CITIZENSHIP")),
            _from_json_data(str, data.get("COUNTRY_OF_ASSOCIATION")),
            _from_json_data(str, data.get("DATA_SOURCE")),
            _from_json_data(str, data.get("DATE_OF_BIRTH")),
            _from_json_data(str, data.get("DATE_OF_DEATH")),
            _from_json_data(str, data.get("DOB")),
            _from_json_data(str, data.get("DOD")),
            _from_json_data(str, data.get("DRIVERS_LICENSE_NUMBER")),
            _from_json_data(str, data.get("DRIVERS_LICENSE_STATE")),
            _from_json_data(str, data.get("DRLIC")),
            _from_json_data(str, data.get("DSRC_ACTION")),
            _from_json_data(str, data.get("DSRC_CODE")),
            _from_json_data(str, data.get("DUNS_NUMBER")),
            _from_json_data(str, data.get("EMAIL")),
            _from_json_data(str, data.get("EMAIL_ADDRESS")),
            _from_json_data(str, data.get("EMAIL_KEY")),
            _from_json_data(str, data.get("EMPLOYER_NAME")),
            _from_json_data(str, data.get("ENTITY_TYPE")),
            _from_json_data(str, data.get("ENT_SRC_DESC")),
            _from_json_data(str, data.get("ENT_SRC_KEY")),
            _from_json_data(str, data.get("ETYPE_CODE")),
            _from_json_data(str, data.get("FACEBOOK")),
            _from_json_data(str, data.get("GENDER")),
            _from_json_data(str, data.get("GROUP_ASSN_ID_NUMBER")),
            _from_json_data(str, data.get("GROUP_ASSN_ID_TYPE")),
            _from_json_data(str, data.get("GROUP_ASSOCIATION_ORG_NAME")),
            _from_json_data(str, data.get("GROUP_ASSOCIATION_TYPE")),
            _from_json_data(str, data.get("ID_KEY")),
            _from_json_data(str, data.get("INSTAGRAM")),
            _from_json_data(str, data.get("LEI_NUMBER")),
            _from_json_data(str, data.get("LINKEDIN")),
            _from_json_data(str, data.get("LOAD_ID")),
            _from_json_data(str, data.get("LOGIN_ID")),
            _from_json_data(Names, data.get("NAME")),
            _from_json_data(str, data.get("NAME_FULL")),
            _from_json_data(str, data.get("NAME_KEY")),
            _from_json_data(Names, data.get("NAME_LIST")),
            _from_json_data(str, data.get("NATIONALITY")),
            _from_json_data(str, data.get("NATIONAL_ID")),
            _from_json_data(str, data.get("NATIONAL_ID_COUNTRY")),
            _from_json_data(str, data.get("NATIONAL_ID_NUMBER")),
            _from_json_data(str, data.get("NIN_COUNTRY")),
            _from_json_data(str, data.get("NIN_NUMBER")),
            _from_json_data(str, data.get("NPI_NUMBER")),
            _from_json_data(str, data.get("OBS_SRC_KEY")),
            _from_json_data(str, data.get("OTHER_ID_COUNTRY")),
            _from_json_data(str, data.get("OTHER_ID_NUMBER")),
            _from_json_data(str, data.get("OTHER_ID_TYPE")),
            _from_json_data(str, data.get("PASSPORT")),
            _from_json_data(Passports, data.get("PASSPORTS")),
            _from_json_data(str, data.get("PASSPORT_COUNTRY")),
            _from_json_data(str, data.get("PASSPORT_NUMBER")),
            _from_json_data(str, data.get("PHONE")),
            _from_json_data(Phones, data.get("PHONES")),
            _from_json_data(str, data.get("PHONE_KEY")),
            _from_json_data(str, data.get("PLACE_OF_BIRTH")),
            _from_json_data(str, data.get("PRIMARY_NAME_FIRST")),
            _from_json_data(str, data.get("PRIMARY_NAME_LAST")),
            _from_json_data(str, data.get("PRIMARY_NAME_MIDDLE")),
            _from_json_data(str, data.get("PRIMARY_NAME_ORG")),
            _from_json_data(str, data.get("PRIMARY_NAME_PREFIX")),
            _from_json_data(str, data.get("PRIMARY_NAME_SUFFIX")),
            _from_json_data(str, data.get("PRIMARY_PHONE_NUMBER")),
            _from_json_data(str, data.get("RECORD_ID")),
            _from_json_data(str, data.get("RECORD_TYPE")),
            _from_json_data(str, data.get("REGISTRATION_COUNTRY")),
            _from_json_data(str, data.get("REGISTRATION_DATE")),
            _from_json_data(Relationships, data.get("RELATIONSHIPS")),
            _from_json_data(str, data.get("REL_ANCHOR")),
            _from_json_data(str, data.get("REL_ANCHOR_DOMAIN")),
            _from_json_data(str, data.get("REL_ANCHOR_KEY")),
            _from_json_data(str, data.get("REL_LINK")),
            _from_json_data(str, data.get("REL_POINTER")),
            _from_json_data(str, data.get("REL_POINTER_DOMAIN")),
            _from_json_data(str, data.get("REL_POINTER_KEY")),
            _from_json_data(str, data.get("REL_POINTER_ROLE")),
            _from_json_data(str, data.get("SIGNAL")),
            _from_json_data(str, data.get("SKYPE")),
            _from_json_data(str, data.get("SOCIAL_HANDLE")),
            _from_json_data(str, data.get("SOCIAL_NETWORK")),
            _from_json_data(str, data.get("SOURCE_ID")),
            _from_json_data(List[JSONDataSsn], data.get("SSN")),
            _from_json_data(List[JSONDataSsnLast4], data.get("SSN_LAST4")),
            _from_json_data(str, data.get("SSN_NUMBER")),
            _from_json_data(str, data.get("TANGO")),
            _from_json_data(str, data.get("TAX_ID_COUNTRY")),
            _from_json_data(str, data.get("TAX_ID_NUMBER")),
            _from_json_data(str, data.get("TAX_ID_TYPE")),
            _from_json_data(str, data.get("TELEGRAM")),
            _from_json_data(str, data.get("TRUSTED_ID_NUMBER")),
            _from_json_data(str, data.get("TRUSTED_ID_TYPE")),
            _from_json_data(str, data.get("TWITTER")),
            _from_json_data(str, data.get("VIBER")),
            _from_json_data(str, data.get("WEBSITE_ADDRESS")),
            _from_json_data(str, data.get("WECHAT")),
            _from_json_data(str, data.get("WHATSAPP")),
            _from_json_data(str, data.get("WORK_PHONE_NUMBER")),
            _from_json_data(str, data.get("ZOOMROOM")),
            _from_json_data(Names, data.get("name")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ACCOUNT_DOMAIN"] = _to_json_data(self.account_domain)
        data["ACCOUNT_NUMBER"] = _to_json_data(self.account_number)
        data["ACCT_NUM"] = _to_json_data(self.acct_num)
        data["ADDRESS"] = _to_json_data(self.address)
        data["ADDRESS_LIST"] = _to_json_data(self.address_list)
        data["ADDR_FULL"] = _to_json_data(self.addr_full)
        data["ADDR_KEY"] = _to_json_data(self.addr_key)
        data["CELL_PHONE_NUMBER"] = _to_json_data(self.cell_phone_number)
        data["CITIZENSHIP"] = _to_json_data(self.citizenship)
        data["COUNTRY_OF_ASSOCIATION"] = _to_json_data(self.country_of_association)
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["DATE_OF_BIRTH"] = _to_json_data(self.date_of_birth)
        data["DATE_OF_DEATH"] = _to_json_data(self.date_of_death)
        data["DOB"] = _to_json_data(self.dob)
        data["DOD"] = _to_json_data(self.dod)
        data["DRIVERS_LICENSE_NUMBER"] = _to_json_data(self.drivers_license_number)
        data["DRIVERS_LICENSE_STATE"] = _to_json_data(self.drivers_license_state)
        data["DRLIC"] = _to_json_data(self.drlic)
        data["DSRC_ACTION"] = _to_json_data(self.dsrc_action)
        data["DSRC_CODE"] = _to_json_data(self.dsrc_code)
        data["DUNS_NUMBER"] = _to_json_data(self.duns_number)
        data["EMAIL"] = _to_json_data(self.email)
        data["EMAIL_ADDRESS"] = _to_json_data(self.email_address)
        data["EMAIL_KEY"] = _to_json_data(self.email_key)
        data["EMPLOYER_NAME"] = _to_json_data(self.employer_name)
        data["ENTITY_TYPE"] = _to_json_data(self.entity_type)
        data["ENT_SRC_DESC"] = _to_json_data(self.ent_src_desc)
        data["ENT_SRC_KEY"] = _to_json_data(self.ent_src_key)
        data["ETYPE_CODE"] = _to_json_data(self.etype_code)
        data["FACEBOOK"] = _to_json_data(self.facebook)
        data["GENDER"] = _to_json_data(self.gender)
        data["GROUP_ASSN_ID_NUMBER"] = _to_json_data(self.group_assn_id_number)
        data["GROUP_ASSN_ID_TYPE"] = _to_json_data(self.group_assn_id_type)
        data["GROUP_ASSOCIATION_ORG_NAME"] = _to_json_data(self.group_association_org_name)
        data["GROUP_ASSOCIATION_TYPE"] = _to_json_data(self.group_association_type)
        data["ID_KEY"] = _to_json_data(self.id_key)
        data["INSTAGRAM"] = _to_json_data(self.instagram)
        data["LEI_NUMBER"] = _to_json_data(self.lei_number)
        data["LINKEDIN"] = _to_json_data(self.linkedin)
        data["LOAD_ID"] = _to_json_data(self.load_id)
        data["LOGIN_ID"] = _to_json_data(self.login_id)
        data["NAME"] = _to_json_data(self.name)
        data["NAME_FULL"] = _to_json_data(self.name_full)
        data["NAME_KEY"] = _to_json_data(self.name_key)
        data["NAME_LIST"] = _to_json_data(self.name_list)
        data["NATIONALITY"] = _to_json_data(self.nationality)
        data["NATIONAL_ID"] = _to_json_data(self.national_id)
        data["NATIONAL_ID_COUNTRY"] = _to_json_data(self.national_id_country)
        data["NATIONAL_ID_NUMBER"] = _to_json_data(self.national_id_number)
        data["NIN_COUNTRY"] = _to_json_data(self.nin_country)
        data["NIN_NUMBER"] = _to_json_data(self.nin_number)
        data["NPI_NUMBER"] = _to_json_data(self.npi_number)
        data["OBS_SRC_KEY"] = _to_json_data(self.obs_src_key)
        data["OTHER_ID_COUNTRY"] = _to_json_data(self.other_id_country)
        data["OTHER_ID_NUMBER"] = _to_json_data(self.other_id_number)
        data["OTHER_ID_TYPE"] = _to_json_data(self.other_id_type)
        data["PASSPORT"] = _to_json_data(self.passport)
        data["PASSPORTS"] = _to_json_data(self.passports)
        data["PASSPORT_COUNTRY"] = _to_json_data(self.passport_country)
        data["PASSPORT_NUMBER"] = _to_json_data(self.passport_number)
        data["PHONE"] = _to_json_data(self.phone)
        data["PHONES"] = _to_json_data(self.phones)
        data["PHONE_KEY"] = _to_json_data(self.phone_key)
        data["PLACE_OF_BIRTH"] = _to_json_data(self.place_of_birth)
        data["PRIMARY_NAME_FIRST"] = _to_json_data(self.primary_name_first)
        data["PRIMARY_NAME_LAST"] = _to_json_data(self.primary_name_last)
        data["PRIMARY_NAME_MIDDLE"] = _to_json_data(self.primary_name_middle)
        data["PRIMARY_NAME_ORG"] = _to_json_data(self.primary_name_org)
        data["PRIMARY_NAME_PREFIX"] = _to_json_data(self.primary_name_prefix)
        data["PRIMARY_NAME_SUFFIX"] = _to_json_data(self.primary_name_suffix)
        data["PRIMARY_PHONE_NUMBER"] = _to_json_data(self.primary_phone_number)
        data["RECORD_ID"] = _to_json_data(self.record_id)
        data["RECORD_TYPE"] = _to_json_data(self.record_type)
        data["REGISTRATION_COUNTRY"] = _to_json_data(self.registration_country)
        data["REGISTRATION_DATE"] = _to_json_data(self.registration_date)
        data["RELATIONSHIPS"] = _to_json_data(self.relationships)
        data["REL_ANCHOR"] = _to_json_data(self.rel_anchor)
        data["REL_ANCHOR_DOMAIN"] = _to_json_data(self.rel_anchor_domain)
        data["REL_ANCHOR_KEY"] = _to_json_data(self.rel_anchor_key)
        data["REL_LINK"] = _to_json_data(self.rel_link)
        data["REL_POINTER"] = _to_json_data(self.rel_pointer)
        data["REL_POINTER_DOMAIN"] = _to_json_data(self.rel_pointer_domain)
        data["REL_POINTER_KEY"] = _to_json_data(self.rel_pointer_key)
        data["REL_POINTER_ROLE"] = _to_json_data(self.rel_pointer_role)
        data["SIGNAL"] = _to_json_data(self.signal)
        data["SKYPE"] = _to_json_data(self.skype)
        data["SOCIAL_HANDLE"] = _to_json_data(self.social_handle)
        data["SOCIAL_NETWORK"] = _to_json_data(self.social_network)
        data["SOURCE_ID"] = _to_json_data(self.source_id)
        data["SSN"] = _to_json_data(self.ssn)
        data["SSN_LAST4"] = _to_json_data(self.ssn_last4)
        data["SSN_NUMBER"] = _to_json_data(self.ssn_number)
        data["TANGO"] = _to_json_data(self.tango)
        data["TAX_ID_COUNTRY"] = _to_json_data(self.tax_id_country)
        data["TAX_ID_NUMBER"] = _to_json_data(self.tax_id_number)
        data["TAX_ID_TYPE"] = _to_json_data(self.tax_id_type)
        data["TELEGRAM"] = _to_json_data(self.telegram)
        data["TRUSTED_ID_NUMBER"] = _to_json_data(self.trusted_id_number)
        data["TRUSTED_ID_TYPE"] = _to_json_data(self.trusted_id_type)
        data["TWITTER"] = _to_json_data(self.twitter)
        data["VIBER"] = _to_json_data(self.viber)
        data["WEBSITE_ADDRESS"] = _to_json_data(self.website_address)
        data["WECHAT"] = _to_json_data(self.wechat)
        data["WHATSAPP"] = _to_json_data(self.whatsapp)
        data["WORK_PHONE_NUMBER"] = _to_json_data(self.work_phone_number)
        data["ZOOMROOM"] = _to_json_data(self.zoomroom)
        data["name"] = _to_json_data(self.name0)
        return data

@dataclass
class MatchInfoDisclosedRelationsRelAnchor:
    domain: 'str'
    """
    No description.
    """

    feat_desc: 'str'
    """
    No description.
    """

    feat_id: 'int'
    """
    No description.
    """

    linked_feat_desc: 'str'
    """
    No description.
    """

    linked_feat_id: 'int'
    """
    No description.
    """

    linked_feat_type: 'str'
    """
    No description.
    """

    linked_feat_usage_type: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'MatchInfoDisclosedRelationsRelAnchor':
        return cls(
            _from_json_data(str, data.get("DOMAIN")),
            _from_json_data(str, data.get("FEAT_DESC")),
            _from_json_data(int, data.get("FEAT_ID")),
            _from_json_data(str, data.get("LINKED_FEAT_DESC")),
            _from_json_data(int, data.get("LINKED_FEAT_ID")),
            _from_json_data(str, data.get("LINKED_FEAT_TYPE")),
            _from_json_data(str, data.get("LINKED_FEAT_USAGE_TYPE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DOMAIN"] = _to_json_data(self.domain)
        data["FEAT_DESC"] = _to_json_data(self.feat_desc)
        data["FEAT_ID"] = _to_json_data(self.feat_id)
        data["LINKED_FEAT_DESC"] = _to_json_data(self.linked_feat_desc)
        data["LINKED_FEAT_ID"] = _to_json_data(self.linked_feat_id)
        data["LINKED_FEAT_TYPE"] = _to_json_data(self.linked_feat_type)
        data["LINKED_FEAT_USAGE_TYPE"] = _to_json_data(self.linked_feat_usage_type)
        return data

@dataclass
class MatchInfoDisclosedRelationsRelLink:
    domain: 'str'
    """
    No description.
    """

    feat_desc: 'str'
    """
    No description.
    """

    feat_id: 'int'
    """
    No description.
    """

    feat_usage_type: 'str'
    """
    No description.
    """

    linked_feat_desc: 'str'
    """
    No description.
    """

    linked_feat_id: 'int'
    """
    No description.
    """

    linked_feat_type: 'str'
    """
    No description.
    """

    linked_feat_usage_type: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'MatchInfoDisclosedRelationsRelLink':
        return cls(
            _from_json_data(str, data.get("DOMAIN")),
            _from_json_data(str, data.get("FEAT_DESC")),
            _from_json_data(int, data.get("FEAT_ID")),
            _from_json_data(str, data.get("FEAT_USAGE_TYPE")),
            _from_json_data(str, data.get("LINKED_FEAT_DESC")),
            _from_json_data(int, data.get("LINKED_FEAT_ID")),
            _from_json_data(str, data.get("LINKED_FEAT_TYPE")),
            _from_json_data(str, data.get("LINKED_FEAT_USAGE_TYPE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DOMAIN"] = _to_json_data(self.domain)
        data["FEAT_DESC"] = _to_json_data(self.feat_desc)
        data["FEAT_ID"] = _to_json_data(self.feat_id)
        data["FEAT_USAGE_TYPE"] = _to_json_data(self.feat_usage_type)
        data["LINKED_FEAT_DESC"] = _to_json_data(self.linked_feat_desc)
        data["LINKED_FEAT_ID"] = _to_json_data(self.linked_feat_id)
        data["LINKED_FEAT_TYPE"] = _to_json_data(self.linked_feat_type)
        data["LINKED_FEAT_USAGE_TYPE"] = _to_json_data(self.linked_feat_usage_type)
        return data

@dataclass
class MatchInfoDisclosedRelationsRelPointer:
    domain: 'str'
    """
    No description.
    """

    feat_desc: 'str'
    """
    No description.
    """

    feat_id: 'int'
    """
    No description.
    """

    feat_usage_type: 'str'
    """
    No description.
    """

    linked_feat_desc: 'str'
    """
    No description.
    """

    linked_feat_id: 'int'
    """
    No description.
    """

    linked_feat_type: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'MatchInfoDisclosedRelationsRelPointer':
        return cls(
            _from_json_data(str, data.get("DOMAIN")),
            _from_json_data(str, data.get("FEAT_DESC")),
            _from_json_data(int, data.get("FEAT_ID")),
            _from_json_data(str, data.get("FEAT_USAGE_TYPE")),
            _from_json_data(str, data.get("LINKED_FEAT_DESC")),
            _from_json_data(int, data.get("LINKED_FEAT_ID")),
            _from_json_data(str, data.get("LINKED_FEAT_TYPE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DOMAIN"] = _to_json_data(self.domain)
        data["FEAT_DESC"] = _to_json_data(self.feat_desc)
        data["FEAT_ID"] = _to_json_data(self.feat_id)
        data["FEAT_USAGE_TYPE"] = _to_json_data(self.feat_usage_type)
        data["LINKED_FEAT_DESC"] = _to_json_data(self.linked_feat_desc)
        data["LINKED_FEAT_ID"] = _to_json_data(self.linked_feat_id)
        data["LINKED_FEAT_TYPE"] = _to_json_data(self.linked_feat_type)
        return data

@dataclass
class MatchInfoDisclosedRelations:
    """
    No description.
    """

    rel_anchor: 'List[MatchInfoDisclosedRelationsRelAnchor]'
    """
    No description.
    """

    rel_link: 'List[MatchInfoDisclosedRelationsRelLink]'
    """
    No description.
    """

    rel_pointer: 'List[MatchInfoDisclosedRelationsRelPointer]'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'MatchInfoDisclosedRelations':
        return cls(
            _from_json_data(List[MatchInfoDisclosedRelationsRelAnchor], data.get("REL_ANCHOR")),
            _from_json_data(List[MatchInfoDisclosedRelationsRelLink], data.get("REL_LINK")),
            _from_json_data(List[MatchInfoDisclosedRelationsRelPointer], data.get("REL_POINTER")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["REL_ANCHOR"] = _to_json_data(self.rel_anchor)
        data["REL_LINK"] = _to_json_data(self.rel_link)
        data["REL_POINTER"] = _to_json_data(self.rel_pointer)
        return data

@dataclass
class MatchInfo:
    """
    No description.
    """

    candidate_keys: 'MatchInfoCandidateKeys'
    """
    No description.
    """

    disclosed_relations: 'MatchInfoDisclosedRelations'
    """
    No description.
    """

    errule_code: 'str'
    """
    No description.
    """

    feature_scores: 'FeatureScores'
    """
    No description.
    """

    match_key: 'str'
    """
    No description.
    """

    match_level: 'int'
    """
    No description.
    """

    match_level_code: 'str'
    """
    No description.
    """

    why_errule_code: 'str'
    """
    No description.
    """

    why_key: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'MatchInfo':
        return cls(
            _from_json_data(MatchInfoCandidateKeys, data.get("CANDIDATE_KEYS")),
            _from_json_data(MatchInfoDisclosedRelations, data.get("DISCLOSED_RELATIONS")),
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(FeatureScores, data.get("FEATURE_SCORES")),
            _from_json_data(str, data.get("MATCH_KEY")),
            _from_json_data(int, data.get("MATCH_LEVEL")),
            _from_json_data(str, data.get("MATCH_LEVEL_CODE")),
            _from_json_data(str, data.get("WHY_ERRULE_CODE")),
            _from_json_data(str, data.get("WHY_KEY")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CANDIDATE_KEYS"] = _to_json_data(self.candidate_keys)
        data["DISCLOSED_RELATIONS"] = _to_json_data(self.disclosed_relations)
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["FEATURE_SCORES"] = _to_json_data(self.feature_scores)
        data["MATCH_KEY"] = _to_json_data(self.match_key)
        data["MATCH_LEVEL"] = _to_json_data(self.match_level)
        data["MATCH_LEVEL_CODE"] = _to_json_data(self.match_level_code)
        data["WHY_ERRULE_CODE"] = _to_json_data(self.why_errule_code)
        data["WHY_KEY"] = _to_json_data(self.why_key)
        return data

@dataclass
class MatchInfoCandidateKeys:
    """
    No description.
    """

    account_domain: 'MatchInfosForAttribute'
    """
    No description.
    """

    account_number: 'MatchInfosForAttribute'
    """
    No description.
    """

    acct_num: 'MatchInfosForAttribute'
    """
    No description.
    """

    address: 'MatchInfosForAttribute'
    """
    No description.
    """

    address_list: 'MatchInfosForAttribute'
    """
    No description.
    """

    addr_full: 'MatchInfosForAttribute'
    """
    No description.
    """

    addr_key: 'MatchInfosForAttribute'
    """
    No description.
    """

    cell_phone_number: 'MatchInfosForAttribute'
    """
    No description.
    """

    citizenship: 'MatchInfosForAttribute'
    """
    No description.
    """

    country_of_association: 'MatchInfosForAttribute'
    """
    No description.
    """

    data_source: 'MatchInfosForAttribute'
    """
    No description.
    """

    date_of_birth: 'MatchInfosForAttribute'
    """
    No description.
    """

    date_of_death: 'MatchInfosForAttribute'
    """
    No description.
    """

    dob: 'MatchInfosForAttribute'
    """
    No description.
    """

    dod: 'MatchInfosForAttribute'
    """
    No description.
    """

    drivers_license_number: 'MatchInfosForAttribute'
    """
    No description.
    """

    drivers_license_state: 'MatchInfosForAttribute'
    """
    No description.
    """

    drlic: 'MatchInfosForAttribute'
    """
    No description.
    """

    duns_number: 'MatchInfosForAttribute'
    """
    No description.
    """

    email: 'MatchInfosForAttribute'
    """
    No description.
    """

    email_address: 'MatchInfosForAttribute'
    """
    No description.
    """

    email_key: 'MatchInfosForAttribute'
    """
    No description.
    """

    employer_name: 'MatchInfosForAttribute'
    """
    No description.
    """

    entity_type: 'MatchInfosForAttribute'
    """
    No description.
    """

    facebook: 'MatchInfosForAttribute'
    """
    No description.
    """

    gender: 'MatchInfosForAttribute'
    """
    No description.
    """

    group_assn_id_number: 'MatchInfosForAttribute'
    """
    No description.
    """

    group_assn_id_type: 'MatchInfosForAttribute'
    """
    No description.
    """

    group_association_org_name: 'MatchInfosForAttribute'
    """
    No description.
    """

    group_association_type: 'MatchInfosForAttribute'
    """
    No description.
    """

    id_key: 'MatchInfosForAttribute'
    """
    No description.
    """

    instagram: 'MatchInfosForAttribute'
    """
    No description.
    """

    lei_number: 'MatchInfosForAttribute'
    """
    No description.
    """

    linkedin: 'MatchInfosForAttribute'
    """
    No description.
    """

    load_id: 'MatchInfosForAttribute'
    """
    No description.
    """

    login_id: 'MatchInfosForAttribute'
    """
    No description.
    """

    name: 'MatchInfosForAttribute'
    """
    No description.
    """

    name_full: 'MatchInfosForAttribute'
    """
    No description.
    """

    name_key: 'MatchInfosForAttribute'
    """
    No description.
    """

    name_list: 'MatchInfosForAttribute'
    """
    No description.
    """

    nationality: 'MatchInfosForAttribute'
    """
    No description.
    """

    national_id: 'MatchInfosForAttribute'
    """
    No description.
    """

    national_id_country: 'MatchInfosForAttribute'
    """
    No description.
    """

    national_id_number: 'MatchInfosForAttribute'
    """
    No description.
    """

    nin_country: 'MatchInfosForAttribute'
    """
    No description.
    """

    nin_number: 'MatchInfosForAttribute'
    """
    No description.
    """

    npi_number: 'MatchInfosForAttribute'
    """
    No description.
    """

    other_id_country: 'MatchInfosForAttribute'
    """
    No description.
    """

    other_id_number: 'MatchInfosForAttribute'
    """
    No description.
    """

    other_id_type: 'MatchInfosForAttribute'
    """
    No description.
    """

    passport: 'MatchInfosForAttribute'
    """
    No description.
    """

    passports: 'MatchInfosForAttribute'
    """
    No description.
    """

    passport_country: 'MatchInfosForAttribute'
    """
    No description.
    """

    passport_number: 'MatchInfosForAttribute'
    """
    No description.
    """

    phone: 'MatchInfosForAttribute'
    """
    No description.
    """

    phones: 'MatchInfosForAttribute'
    """
    No description.
    """

    phone_key: 'MatchInfosForAttribute'
    """
    No description.
    """

    place_of_birth: 'MatchInfosForAttribute'
    """
    No description.
    """

    primary_name_first: 'MatchInfosForAttribute'
    """
    No description.
    """

    primary_name_last: 'MatchInfosForAttribute'
    """
    No description.
    """

    primary_name_middle: 'MatchInfosForAttribute'
    """
    No description.
    """

    primary_name_org: 'MatchInfosForAttribute'
    """
    No description.
    """

    primary_name_prefix: 'MatchInfosForAttribute'
    """
    No description.
    """

    primary_name_suffix: 'MatchInfosForAttribute'
    """
    No description.
    """

    primary_phone_number: 'MatchInfosForAttribute'
    """
    No description.
    """

    record_type: 'MatchInfosForAttribute'
    """
    No description.
    """

    registration_country: 'MatchInfosForAttribute'
    """
    No description.
    """

    registration_date: 'MatchInfosForAttribute'
    """
    No description.
    """

    rel_anchor: 'MatchInfosForAttribute'
    """
    No description.
    """

    rel_anchor_domain: 'MatchInfosForAttribute'
    """
    No description.
    """

    rel_anchor_key: 'MatchInfosForAttribute'
    """
    No description.
    """

    rel_link: 'MatchInfosForAttribute'
    """
    No description.
    """

    rel_pointer: 'MatchInfosForAttribute'
    """
    No description.
    """

    rel_pointer_domain: 'MatchInfosForAttribute'
    """
    No description.
    """

    rel_pointer_key: 'MatchInfosForAttribute'
    """
    No description.
    """

    rel_pointer_role: 'MatchInfosForAttribute'
    """
    No description.
    """

    signal: 'MatchInfosForAttribute'
    """
    No description.
    """

    skype: 'MatchInfosForAttribute'
    """
    No description.
    """

    social_handle: 'MatchInfosForAttribute'
    """
    No description.
    """

    social_network: 'MatchInfosForAttribute'
    """
    No description.
    """

    source_id: 'MatchInfosForAttribute'
    """
    No description.
    """

    ssn: 'MatchInfosForAttribute'
    """
    No description.
    """

    ssn_last4: 'MatchInfosForAttribute'
    """
    No description.
    """

    ssn_number: 'MatchInfosForAttribute'
    """
    No description.
    """

    tango: 'MatchInfosForAttribute'
    """
    No description.
    """

    tax_id_country: 'MatchInfosForAttribute'
    """
    No description.
    """

    tax_id_number: 'MatchInfosForAttribute'
    """
    No description.
    """

    tax_id_type: 'MatchInfosForAttribute'
    """
    No description.
    """

    telegram: 'MatchInfosForAttribute'
    """
    No description.
    """

    trusted_id_number: 'MatchInfosForAttribute'
    """
    No description.
    """

    trusted_id_type: 'MatchInfosForAttribute'
    """
    No description.
    """

    twitter: 'MatchInfosForAttribute'
    """
    No description.
    """

    viber: 'MatchInfosForAttribute'
    """
    No description.
    """

    website_address: 'MatchInfosForAttribute'
    """
    No description.
    """

    wechat: 'MatchInfosForAttribute'
    """
    No description.
    """

    whatsapp: 'MatchInfosForAttribute'
    """
    No description.
    """

    work_phone_number: 'MatchInfosForAttribute'
    """
    No description.
    """

    zoomroom: 'MatchInfosForAttribute'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'MatchInfoCandidateKeys':
        return cls(
            _from_json_data(MatchInfosForAttribute, data.get("ACCOUNT_DOMAIN")),
            _from_json_data(MatchInfosForAttribute, data.get("ACCOUNT_NUMBER")),
            _from_json_data(MatchInfosForAttribute, data.get("ACCT_NUM")),
            _from_json_data(MatchInfosForAttribute, data.get("ADDRESS")),
            _from_json_data(MatchInfosForAttribute, data.get("ADDRESS_LIST")),
            _from_json_data(MatchInfosForAttribute, data.get("ADDR_FULL")),
            _from_json_data(MatchInfosForAttribute, data.get("ADDR_KEY")),
            _from_json_data(MatchInfosForAttribute, data.get("CELL_PHONE_NUMBER")),
            _from_json_data(MatchInfosForAttribute, data.get("CITIZENSHIP")),
            _from_json_data(MatchInfosForAttribute, data.get("COUNTRY_OF_ASSOCIATION")),
            _from_json_data(MatchInfosForAttribute, data.get("DATA_SOURCE")),
            _from_json_data(MatchInfosForAttribute, data.get("DATE_OF_BIRTH")),
            _from_json_data(MatchInfosForAttribute, data.get("DATE_OF_DEATH")),
            _from_json_data(MatchInfosForAttribute, data.get("DOB")),
            _from_json_data(MatchInfosForAttribute, data.get("DOD")),
            _from_json_data(MatchInfosForAttribute, data.get("DRIVERS_LICENSE_NUMBER")),
            _from_json_data(MatchInfosForAttribute, data.get("DRIVERS_LICENSE_STATE")),
            _from_json_data(MatchInfosForAttribute, data.get("DRLIC")),
            _from_json_data(MatchInfosForAttribute, data.get("DUNS_NUMBER")),
            _from_json_data(MatchInfosForAttribute, data.get("EMAIL")),
            _from_json_data(MatchInfosForAttribute, data.get("EMAIL_ADDRESS")),
            _from_json_data(MatchInfosForAttribute, data.get("EMAIL_KEY")),
            _from_json_data(MatchInfosForAttribute, data.get("EMPLOYER_NAME")),
            _from_json_data(MatchInfosForAttribute, data.get("ENTITY_TYPE")),
            _from_json_data(MatchInfosForAttribute, data.get("FACEBOOK")),
            _from_json_data(MatchInfosForAttribute, data.get("GENDER")),
            _from_json_data(MatchInfosForAttribute, data.get("GROUP_ASSN_ID_NUMBER")),
            _from_json_data(MatchInfosForAttribute, data.get("GROUP_ASSN_ID_TYPE")),
            _from_json_data(MatchInfosForAttribute, data.get("GROUP_ASSOCIATION_ORG_NAME")),
            _from_json_data(MatchInfosForAttribute, data.get("GROUP_ASSOCIATION_TYPE")),
            _from_json_data(MatchInfosForAttribute, data.get("ID_KEY")),
            _from_json_data(MatchInfosForAttribute, data.get("INSTAGRAM")),
            _from_json_data(MatchInfosForAttribute, data.get("LEI_NUMBER")),
            _from_json_data(MatchInfosForAttribute, data.get("LINKEDIN")),
            _from_json_data(MatchInfosForAttribute, data.get("LOAD_ID")),
            _from_json_data(MatchInfosForAttribute, data.get("LOGIN_ID")),
            _from_json_data(MatchInfosForAttribute, data.get("NAME")),
            _from_json_data(MatchInfosForAttribute, data.get("NAME_FULL")),
            _from_json_data(MatchInfosForAttribute, data.get("NAME_KEY")),
            _from_json_data(MatchInfosForAttribute, data.get("NAME_LIST")),
            _from_json_data(MatchInfosForAttribute, data.get("NATIONALITY")),
            _from_json_data(MatchInfosForAttribute, data.get("NATIONAL_ID")),
            _from_json_data(MatchInfosForAttribute, data.get("NATIONAL_ID_COUNTRY")),
            _from_json_data(MatchInfosForAttribute, data.get("NATIONAL_ID_NUMBER")),
            _from_json_data(MatchInfosForAttribute, data.get("NIN_COUNTRY")),
            _from_json_data(MatchInfosForAttribute, data.get("NIN_NUMBER")),
            _from_json_data(MatchInfosForAttribute, data.get("NPI_NUMBER")),
            _from_json_data(MatchInfosForAttribute, data.get("OTHER_ID_COUNTRY")),
            _from_json_data(MatchInfosForAttribute, data.get("OTHER_ID_NUMBER")),
            _from_json_data(MatchInfosForAttribute, data.get("OTHER_ID_TYPE")),
            _from_json_data(MatchInfosForAttribute, data.get("PASSPORT")),
            _from_json_data(MatchInfosForAttribute, data.get("PASSPORTS")),
            _from_json_data(MatchInfosForAttribute, data.get("PASSPORT_COUNTRY")),
            _from_json_data(MatchInfosForAttribute, data.get("PASSPORT_NUMBER")),
            _from_json_data(MatchInfosForAttribute, data.get("PHONE")),
            _from_json_data(MatchInfosForAttribute, data.get("PHONES")),
            _from_json_data(MatchInfosForAttribute, data.get("PHONE_KEY")),
            _from_json_data(MatchInfosForAttribute, data.get("PLACE_OF_BIRTH")),
            _from_json_data(MatchInfosForAttribute, data.get("PRIMARY_NAME_FIRST")),
            _from_json_data(MatchInfosForAttribute, data.get("PRIMARY_NAME_LAST")),
            _from_json_data(MatchInfosForAttribute, data.get("PRIMARY_NAME_MIDDLE")),
            _from_json_data(MatchInfosForAttribute, data.get("PRIMARY_NAME_ORG")),
            _from_json_data(MatchInfosForAttribute, data.get("PRIMARY_NAME_PREFIX")),
            _from_json_data(MatchInfosForAttribute, data.get("PRIMARY_NAME_SUFFIX")),
            _from_json_data(MatchInfosForAttribute, data.get("PRIMARY_PHONE_NUMBER")),
            _from_json_data(MatchInfosForAttribute, data.get("RECORD_TYPE")),
            _from_json_data(MatchInfosForAttribute, data.get("REGISTRATION_COUNTRY")),
            _from_json_data(MatchInfosForAttribute, data.get("REGISTRATION_DATE")),
            _from_json_data(MatchInfosForAttribute, data.get("REL_ANCHOR")),
            _from_json_data(MatchInfosForAttribute, data.get("REL_ANCHOR_DOMAIN")),
            _from_json_data(MatchInfosForAttribute, data.get("REL_ANCHOR_KEY")),
            _from_json_data(MatchInfosForAttribute, data.get("REL_LINK")),
            _from_json_data(MatchInfosForAttribute, data.get("REL_POINTER")),
            _from_json_data(MatchInfosForAttribute, data.get("REL_POINTER_DOMAIN")),
            _from_json_data(MatchInfosForAttribute, data.get("REL_POINTER_KEY")),
            _from_json_data(MatchInfosForAttribute, data.get("REL_POINTER_ROLE")),
            _from_json_data(MatchInfosForAttribute, data.get("SIGNAL")),
            _from_json_data(MatchInfosForAttribute, data.get("SKYPE")),
            _from_json_data(MatchInfosForAttribute, data.get("SOCIAL_HANDLE")),
            _from_json_data(MatchInfosForAttribute, data.get("SOCIAL_NETWORK")),
            _from_json_data(MatchInfosForAttribute, data.get("SOURCE_ID")),
            _from_json_data(MatchInfosForAttribute, data.get("SSN")),
            _from_json_data(MatchInfosForAttribute, data.get("SSN_LAST4")),
            _from_json_data(MatchInfosForAttribute, data.get("SSN_NUMBER")),
            _from_json_data(MatchInfosForAttribute, data.get("TANGO")),
            _from_json_data(MatchInfosForAttribute, data.get("TAX_ID_COUNTRY")),
            _from_json_data(MatchInfosForAttribute, data.get("TAX_ID_NUMBER")),
            _from_json_data(MatchInfosForAttribute, data.get("TAX_ID_TYPE")),
            _from_json_data(MatchInfosForAttribute, data.get("TELEGRAM")),
            _from_json_data(MatchInfosForAttribute, data.get("TRUSTED_ID_NUMBER")),
            _from_json_data(MatchInfosForAttribute, data.get("TRUSTED_ID_TYPE")),
            _from_json_data(MatchInfosForAttribute, data.get("TWITTER")),
            _from_json_data(MatchInfosForAttribute, data.get("VIBER")),
            _from_json_data(MatchInfosForAttribute, data.get("WEBSITE_ADDRESS")),
            _from_json_data(MatchInfosForAttribute, data.get("WECHAT")),
            _from_json_data(MatchInfosForAttribute, data.get("WHATSAPP")),
            _from_json_data(MatchInfosForAttribute, data.get("WORK_PHONE_NUMBER")),
            _from_json_data(MatchInfosForAttribute, data.get("ZOOMROOM")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ACCOUNT_DOMAIN"] = _to_json_data(self.account_domain)
        data["ACCOUNT_NUMBER"] = _to_json_data(self.account_number)
        data["ACCT_NUM"] = _to_json_data(self.acct_num)
        data["ADDRESS"] = _to_json_data(self.address)
        data["ADDRESS_LIST"] = _to_json_data(self.address_list)
        data["ADDR_FULL"] = _to_json_data(self.addr_full)
        data["ADDR_KEY"] = _to_json_data(self.addr_key)
        data["CELL_PHONE_NUMBER"] = _to_json_data(self.cell_phone_number)
        data["CITIZENSHIP"] = _to_json_data(self.citizenship)
        data["COUNTRY_OF_ASSOCIATION"] = _to_json_data(self.country_of_association)
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["DATE_OF_BIRTH"] = _to_json_data(self.date_of_birth)
        data["DATE_OF_DEATH"] = _to_json_data(self.date_of_death)
        data["DOB"] = _to_json_data(self.dob)
        data["DOD"] = _to_json_data(self.dod)
        data["DRIVERS_LICENSE_NUMBER"] = _to_json_data(self.drivers_license_number)
        data["DRIVERS_LICENSE_STATE"] = _to_json_data(self.drivers_license_state)
        data["DRLIC"] = _to_json_data(self.drlic)
        data["DUNS_NUMBER"] = _to_json_data(self.duns_number)
        data["EMAIL"] = _to_json_data(self.email)
        data["EMAIL_ADDRESS"] = _to_json_data(self.email_address)
        data["EMAIL_KEY"] = _to_json_data(self.email_key)
        data["EMPLOYER_NAME"] = _to_json_data(self.employer_name)
        data["ENTITY_TYPE"] = _to_json_data(self.entity_type)
        data["FACEBOOK"] = _to_json_data(self.facebook)
        data["GENDER"] = _to_json_data(self.gender)
        data["GROUP_ASSN_ID_NUMBER"] = _to_json_data(self.group_assn_id_number)
        data["GROUP_ASSN_ID_TYPE"] = _to_json_data(self.group_assn_id_type)
        data["GROUP_ASSOCIATION_ORG_NAME"] = _to_json_data(self.group_association_org_name)
        data["GROUP_ASSOCIATION_TYPE"] = _to_json_data(self.group_association_type)
        data["ID_KEY"] = _to_json_data(self.id_key)
        data["INSTAGRAM"] = _to_json_data(self.instagram)
        data["LEI_NUMBER"] = _to_json_data(self.lei_number)
        data["LINKEDIN"] = _to_json_data(self.linkedin)
        data["LOAD_ID"] = _to_json_data(self.load_id)
        data["LOGIN_ID"] = _to_json_data(self.login_id)
        data["NAME"] = _to_json_data(self.name)
        data["NAME_FULL"] = _to_json_data(self.name_full)
        data["NAME_KEY"] = _to_json_data(self.name_key)
        data["NAME_LIST"] = _to_json_data(self.name_list)
        data["NATIONALITY"] = _to_json_data(self.nationality)
        data["NATIONAL_ID"] = _to_json_data(self.national_id)
        data["NATIONAL_ID_COUNTRY"] = _to_json_data(self.national_id_country)
        data["NATIONAL_ID_NUMBER"] = _to_json_data(self.national_id_number)
        data["NIN_COUNTRY"] = _to_json_data(self.nin_country)
        data["NIN_NUMBER"] = _to_json_data(self.nin_number)
        data["NPI_NUMBER"] = _to_json_data(self.npi_number)
        data["OTHER_ID_COUNTRY"] = _to_json_data(self.other_id_country)
        data["OTHER_ID_NUMBER"] = _to_json_data(self.other_id_number)
        data["OTHER_ID_TYPE"] = _to_json_data(self.other_id_type)
        data["PASSPORT"] = _to_json_data(self.passport)
        data["PASSPORTS"] = _to_json_data(self.passports)
        data["PASSPORT_COUNTRY"] = _to_json_data(self.passport_country)
        data["PASSPORT_NUMBER"] = _to_json_data(self.passport_number)
        data["PHONE"] = _to_json_data(self.phone)
        data["PHONES"] = _to_json_data(self.phones)
        data["PHONE_KEY"] = _to_json_data(self.phone_key)
        data["PLACE_OF_BIRTH"] = _to_json_data(self.place_of_birth)
        data["PRIMARY_NAME_FIRST"] = _to_json_data(self.primary_name_first)
        data["PRIMARY_NAME_LAST"] = _to_json_data(self.primary_name_last)
        data["PRIMARY_NAME_MIDDLE"] = _to_json_data(self.primary_name_middle)
        data["PRIMARY_NAME_ORG"] = _to_json_data(self.primary_name_org)
        data["PRIMARY_NAME_PREFIX"] = _to_json_data(self.primary_name_prefix)
        data["PRIMARY_NAME_SUFFIX"] = _to_json_data(self.primary_name_suffix)
        data["PRIMARY_PHONE_NUMBER"] = _to_json_data(self.primary_phone_number)
        data["RECORD_TYPE"] = _to_json_data(self.record_type)
        data["REGISTRATION_COUNTRY"] = _to_json_data(self.registration_country)
        data["REGISTRATION_DATE"] = _to_json_data(self.registration_date)
        data["REL_ANCHOR"] = _to_json_data(self.rel_anchor)
        data["REL_ANCHOR_DOMAIN"] = _to_json_data(self.rel_anchor_domain)
        data["REL_ANCHOR_KEY"] = _to_json_data(self.rel_anchor_key)
        data["REL_LINK"] = _to_json_data(self.rel_link)
        data["REL_POINTER"] = _to_json_data(self.rel_pointer)
        data["REL_POINTER_DOMAIN"] = _to_json_data(self.rel_pointer_domain)
        data["REL_POINTER_KEY"] = _to_json_data(self.rel_pointer_key)
        data["REL_POINTER_ROLE"] = _to_json_data(self.rel_pointer_role)
        data["SIGNAL"] = _to_json_data(self.signal)
        data["SKYPE"] = _to_json_data(self.skype)
        data["SOCIAL_HANDLE"] = _to_json_data(self.social_handle)
        data["SOCIAL_NETWORK"] = _to_json_data(self.social_network)
        data["SOURCE_ID"] = _to_json_data(self.source_id)
        data["SSN"] = _to_json_data(self.ssn)
        data["SSN_LAST4"] = _to_json_data(self.ssn_last4)
        data["SSN_NUMBER"] = _to_json_data(self.ssn_number)
        data["TANGO"] = _to_json_data(self.tango)
        data["TAX_ID_COUNTRY"] = _to_json_data(self.tax_id_country)
        data["TAX_ID_NUMBER"] = _to_json_data(self.tax_id_number)
        data["TAX_ID_TYPE"] = _to_json_data(self.tax_id_type)
        data["TELEGRAM"] = _to_json_data(self.telegram)
        data["TRUSTED_ID_NUMBER"] = _to_json_data(self.trusted_id_number)
        data["TRUSTED_ID_TYPE"] = _to_json_data(self.trusted_id_type)
        data["TWITTER"] = _to_json_data(self.twitter)
        data["VIBER"] = _to_json_data(self.viber)
        data["WEBSITE_ADDRESS"] = _to_json_data(self.website_address)
        data["WECHAT"] = _to_json_data(self.wechat)
        data["WHATSAPP"] = _to_json_data(self.whatsapp)
        data["WORK_PHONE_NUMBER"] = _to_json_data(self.work_phone_number)
        data["ZOOMROOM"] = _to_json_data(self.zoomroom)
        return data

@dataclass
class MatchInfoForAttribute:
    """
    No description.
    """

    feat_desc: 'str'
    """
    No description.
    """

    feat_id: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'MatchInfoForAttribute':
        return cls(
            _from_json_data(str, data.get("FEAT_DESC")),
            _from_json_data(int, data.get("FEAT_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FEAT_DESC"] = _to_json_data(self.feat_desc)
        data["FEAT_ID"] = _to_json_data(self.feat_id)
        return data

@dataclass
class MatchInfosForAttribute:
    """
    No description.
    """

    value: 'List[MatchInfoForAttribute]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'MatchInfosForAttribute':
        return cls(_from_json_data(List[MatchInfoForAttribute], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class MatchScoreForAttribute:
    """
    No description.
    """

    candidate_feat: 'str'
    """
    No description.
    """

    full_score: 'int'
    """
    No description.
    """

    generation_match: 'int'
    """
    No description.
    """

    gnr_fn: 'int'
    """
    No description.
    """

    gnr_gn: 'int'
    """
    No description.
    """

    gnr_on: 'int'
    """
    No description.
    """

    gnr_sn: 'int'
    """
    No description.
    """

    inbound_feat: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'MatchScoreForAttribute':
        return cls(
            _from_json_data(str, data.get("CANDIDATE_FEAT")),
            _from_json_data(int, data.get("FULL_SCORE")),
            _from_json_data(int, data.get("GENERATION_MATCH")),
            _from_json_data(int, data.get("GNR_FN")),
            _from_json_data(int, data.get("GNR_GN")),
            _from_json_data(int, data.get("GNR_ON")),
            _from_json_data(int, data.get("GNR_SN")),
            _from_json_data(str, data.get("INBOUND_FEAT")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CANDIDATE_FEAT"] = _to_json_data(self.candidate_feat)
        data["FULL_SCORE"] = _to_json_data(self.full_score)
        data["GENERATION_MATCH"] = _to_json_data(self.generation_match)
        data["GNR_FN"] = _to_json_data(self.gnr_fn)
        data["GNR_GN"] = _to_json_data(self.gnr_gn)
        data["GNR_ON"] = _to_json_data(self.gnr_on)
        data["GNR_SN"] = _to_json_data(self.gnr_sn)
        data["INBOUND_FEAT"] = _to_json_data(self.inbound_feat)
        return data

@dataclass
class MatchScores:
    """
    No description.
    """

    account_domain: 'MatchScoresForAttribute'
    """
    No description.
    """

    account_number: 'MatchScoresForAttribute'
    """
    No description.
    """

    acct_num: 'MatchScoresForAttribute'
    """
    No description.
    """

    address: 'MatchScoresForAttribute'
    """
    No description.
    """

    address_list: 'MatchScoresForAttribute'
    """
    No description.
    """

    addr_full: 'MatchScoresForAttribute'
    """
    No description.
    """

    addr_key: 'MatchScoresForAttribute'
    """
    No description.
    """

    cell_phone_number: 'MatchScoresForAttribute'
    """
    No description.
    """

    citizenship: 'MatchScoresForAttribute'
    """
    No description.
    """

    country_of_association: 'MatchScoresForAttribute'
    """
    No description.
    """

    data_source: 'MatchScoresForAttribute'
    """
    No description.
    """

    date_of_birth: 'MatchScoresForAttribute'
    """
    No description.
    """

    date_of_death: 'MatchScoresForAttribute'
    """
    No description.
    """

    dob: 'MatchScoresForAttribute'
    """
    No description.
    """

    dod: 'MatchScoresForAttribute'
    """
    No description.
    """

    drivers_license_number: 'MatchScoresForAttribute'
    """
    No description.
    """

    drivers_license_state: 'MatchScoresForAttribute'
    """
    No description.
    """

    drlic: 'MatchScoresForAttribute'
    """
    No description.
    """

    duns_number: 'MatchScoresForAttribute'
    """
    No description.
    """

    email: 'MatchScoresForAttribute'
    """
    No description.
    """

    email_address: 'MatchScoresForAttribute'
    """
    No description.
    """

    email_key: 'MatchScoresForAttribute'
    """
    No description.
    """

    employer_name: 'MatchScoresForAttribute'
    """
    No description.
    """

    entity_type: 'MatchScoresForAttribute'
    """
    No description.
    """

    facebook: 'MatchScoresForAttribute'
    """
    No description.
    """

    gender: 'MatchScoresForAttribute'
    """
    No description.
    """

    group_assn_id_number: 'MatchScoresForAttribute'
    """
    No description.
    """

    group_assn_id_type: 'MatchScoresForAttribute'
    """
    No description.
    """

    group_association_org_name: 'MatchScoresForAttribute'
    """
    No description.
    """

    group_association_type: 'MatchScoresForAttribute'
    """
    No description.
    """

    id_key: 'MatchScoresForAttribute'
    """
    No description.
    """

    instagram: 'MatchScoresForAttribute'
    """
    No description.
    """

    lei_number: 'MatchScoresForAttribute'
    """
    No description.
    """

    linkedin: 'MatchScoresForAttribute'
    """
    No description.
    """

    load_id: 'MatchScoresForAttribute'
    """
    No description.
    """

    login_id: 'MatchScoresForAttribute'
    """
    No description.
    """

    name: 'MatchScoresForAttribute'
    """
    No description.
    """

    name_full: 'MatchScoresForAttribute'
    """
    No description.
    """

    name_key: 'MatchScoresForAttribute'
    """
    No description.
    """

    name_list: 'MatchScoresForAttribute'
    """
    No description.
    """

    nationality: 'MatchScoresForAttribute'
    """
    No description.
    """

    national_id: 'MatchScoresForAttribute'
    """
    No description.
    """

    national_id_country: 'MatchScoresForAttribute'
    """
    No description.
    """

    national_id_number: 'MatchScoresForAttribute'
    """
    No description.
    """

    nin_country: 'MatchScoresForAttribute'
    """
    No description.
    """

    nin_number: 'MatchScoresForAttribute'
    """
    No description.
    """

    npi_number: 'MatchScoresForAttribute'
    """
    No description.
    """

    other_id_country: 'MatchScoresForAttribute'
    """
    No description.
    """

    other_id_number: 'MatchScoresForAttribute'
    """
    No description.
    """

    other_id_type: 'MatchScoresForAttribute'
    """
    No description.
    """

    passport: 'MatchScoresForAttribute'
    """
    No description.
    """

    passports: 'MatchScoresForAttribute'
    """
    No description.
    """

    passport_country: 'MatchScoresForAttribute'
    """
    No description.
    """

    passport_number: 'MatchScoresForAttribute'
    """
    No description.
    """

    phone: 'MatchScoresForAttribute'
    """
    No description.
    """

    phones: 'MatchScoresForAttribute'
    """
    No description.
    """

    phone_key: 'MatchScoresForAttribute'
    """
    No description.
    """

    place_of_birth: 'MatchScoresForAttribute'
    """
    No description.
    """

    primary_name_first: 'MatchScoresForAttribute'
    """
    No description.
    """

    primary_name_last: 'MatchScoresForAttribute'
    """
    No description.
    """

    primary_name_middle: 'MatchScoresForAttribute'
    """
    No description.
    """

    primary_name_org: 'MatchScoresForAttribute'
    """
    No description.
    """

    primary_name_prefix: 'MatchScoresForAttribute'
    """
    No description.
    """

    primary_name_suffix: 'MatchScoresForAttribute'
    """
    No description.
    """

    primary_phone_number: 'MatchScoresForAttribute'
    """
    No description.
    """

    record_type: 'MatchScoresForAttribute'
    """
    No description.
    """

    registration_country: 'MatchScoresForAttribute'
    """
    No description.
    """

    registration_date: 'MatchScoresForAttribute'
    """
    No description.
    """

    rel_anchor: 'MatchScoresForAttribute'
    """
    No description.
    """

    rel_anchor_domain: 'MatchScoresForAttribute'
    """
    No description.
    """

    rel_anchor_key: 'MatchScoresForAttribute'
    """
    No description.
    """

    rel_link: 'MatchScoresForAttribute'
    """
    No description.
    """

    rel_pointer: 'MatchScoresForAttribute'
    """
    No description.
    """

    rel_pointer_domain: 'MatchScoresForAttribute'
    """
    No description.
    """

    rel_pointer_key: 'MatchScoresForAttribute'
    """
    No description.
    """

    rel_pointer_role: 'MatchScoresForAttribute'
    """
    No description.
    """

    signal: 'MatchScoresForAttribute'
    """
    No description.
    """

    skype: 'MatchScoresForAttribute'
    """
    No description.
    """

    social_handle: 'MatchScoresForAttribute'
    """
    No description.
    """

    social_network: 'MatchScoresForAttribute'
    """
    No description.
    """

    source_id: 'MatchScoresForAttribute'
    """
    No description.
    """

    ssn: 'MatchScoresForAttribute'
    """
    No description.
    """

    ssn_last4: 'MatchScoresForAttribute'
    """
    No description.
    """

    ssn_number: 'MatchScoresForAttribute'
    """
    No description.
    """

    tango: 'MatchScoresForAttribute'
    """
    No description.
    """

    tax_id_country: 'MatchScoresForAttribute'
    """
    No description.
    """

    tax_id_number: 'MatchScoresForAttribute'
    """
    No description.
    """

    tax_id_type: 'MatchScoresForAttribute'
    """
    No description.
    """

    telegram: 'MatchScoresForAttribute'
    """
    No description.
    """

    trusted_id_number: 'MatchScoresForAttribute'
    """
    No description.
    """

    trusted_id_type: 'MatchScoresForAttribute'
    """
    No description.
    """

    twitter: 'MatchScoresForAttribute'
    """
    No description.
    """

    viber: 'MatchScoresForAttribute'
    """
    No description.
    """

    website_address: 'MatchScoresForAttribute'
    """
    No description.
    """

    wechat: 'MatchScoresForAttribute'
    """
    No description.
    """

    whatsapp: 'MatchScoresForAttribute'
    """
    No description.
    """

    work_phone_number: 'MatchScoresForAttribute'
    """
    No description.
    """

    zoomroom: 'MatchScoresForAttribute'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'MatchScores':
        return cls(
            _from_json_data(MatchScoresForAttribute, data.get("ACCOUNT_DOMAIN")),
            _from_json_data(MatchScoresForAttribute, data.get("ACCOUNT_NUMBER")),
            _from_json_data(MatchScoresForAttribute, data.get("ACCT_NUM")),
            _from_json_data(MatchScoresForAttribute, data.get("ADDRESS")),
            _from_json_data(MatchScoresForAttribute, data.get("ADDRESS_LIST")),
            _from_json_data(MatchScoresForAttribute, data.get("ADDR_FULL")),
            _from_json_data(MatchScoresForAttribute, data.get("ADDR_KEY")),
            _from_json_data(MatchScoresForAttribute, data.get("CELL_PHONE_NUMBER")),
            _from_json_data(MatchScoresForAttribute, data.get("CITIZENSHIP")),
            _from_json_data(MatchScoresForAttribute, data.get("COUNTRY_OF_ASSOCIATION")),
            _from_json_data(MatchScoresForAttribute, data.get("DATA_SOURCE")),
            _from_json_data(MatchScoresForAttribute, data.get("DATE_OF_BIRTH")),
            _from_json_data(MatchScoresForAttribute, data.get("DATE_OF_DEATH")),
            _from_json_data(MatchScoresForAttribute, data.get("DOB")),
            _from_json_data(MatchScoresForAttribute, data.get("DOD")),
            _from_json_data(MatchScoresForAttribute, data.get("DRIVERS_LICENSE_NUMBER")),
            _from_json_data(MatchScoresForAttribute, data.get("DRIVERS_LICENSE_STATE")),
            _from_json_data(MatchScoresForAttribute, data.get("DRLIC")),
            _from_json_data(MatchScoresForAttribute, data.get("DUNS_NUMBER")),
            _from_json_data(MatchScoresForAttribute, data.get("EMAIL")),
            _from_json_data(MatchScoresForAttribute, data.get("EMAIL_ADDRESS")),
            _from_json_data(MatchScoresForAttribute, data.get("EMAIL_KEY")),
            _from_json_data(MatchScoresForAttribute, data.get("EMPLOYER_NAME")),
            _from_json_data(MatchScoresForAttribute, data.get("ENTITY_TYPE")),
            _from_json_data(MatchScoresForAttribute, data.get("FACEBOOK")),
            _from_json_data(MatchScoresForAttribute, data.get("GENDER")),
            _from_json_data(MatchScoresForAttribute, data.get("GROUP_ASSN_ID_NUMBER")),
            _from_json_data(MatchScoresForAttribute, data.get("GROUP_ASSN_ID_TYPE")),
            _from_json_data(MatchScoresForAttribute, data.get("GROUP_ASSOCIATION_ORG_NAME")),
            _from_json_data(MatchScoresForAttribute, data.get("GROUP_ASSOCIATION_TYPE")),
            _from_json_data(MatchScoresForAttribute, data.get("ID_KEY")),
            _from_json_data(MatchScoresForAttribute, data.get("INSTAGRAM")),
            _from_json_data(MatchScoresForAttribute, data.get("LEI_NUMBER")),
            _from_json_data(MatchScoresForAttribute, data.get("LINKEDIN")),
            _from_json_data(MatchScoresForAttribute, data.get("LOAD_ID")),
            _from_json_data(MatchScoresForAttribute, data.get("LOGIN_ID")),
            _from_json_data(MatchScoresForAttribute, data.get("NAME")),
            _from_json_data(MatchScoresForAttribute, data.get("NAME_FULL")),
            _from_json_data(MatchScoresForAttribute, data.get("NAME_KEY")),
            _from_json_data(MatchScoresForAttribute, data.get("NAME_LIST")),
            _from_json_data(MatchScoresForAttribute, data.get("NATIONALITY")),
            _from_json_data(MatchScoresForAttribute, data.get("NATIONAL_ID")),
            _from_json_data(MatchScoresForAttribute, data.get("NATIONAL_ID_COUNTRY")),
            _from_json_data(MatchScoresForAttribute, data.get("NATIONAL_ID_NUMBER")),
            _from_json_data(MatchScoresForAttribute, data.get("NIN_COUNTRY")),
            _from_json_data(MatchScoresForAttribute, data.get("NIN_NUMBER")),
            _from_json_data(MatchScoresForAttribute, data.get("NPI_NUMBER")),
            _from_json_data(MatchScoresForAttribute, data.get("OTHER_ID_COUNTRY")),
            _from_json_data(MatchScoresForAttribute, data.get("OTHER_ID_NUMBER")),
            _from_json_data(MatchScoresForAttribute, data.get("OTHER_ID_TYPE")),
            _from_json_data(MatchScoresForAttribute, data.get("PASSPORT")),
            _from_json_data(MatchScoresForAttribute, data.get("PASSPORTS")),
            _from_json_data(MatchScoresForAttribute, data.get("PASSPORT_COUNTRY")),
            _from_json_data(MatchScoresForAttribute, data.get("PASSPORT_NUMBER")),
            _from_json_data(MatchScoresForAttribute, data.get("PHONE")),
            _from_json_data(MatchScoresForAttribute, data.get("PHONES")),
            _from_json_data(MatchScoresForAttribute, data.get("PHONE_KEY")),
            _from_json_data(MatchScoresForAttribute, data.get("PLACE_OF_BIRTH")),
            _from_json_data(MatchScoresForAttribute, data.get("PRIMARY_NAME_FIRST")),
            _from_json_data(MatchScoresForAttribute, data.get("PRIMARY_NAME_LAST")),
            _from_json_data(MatchScoresForAttribute, data.get("PRIMARY_NAME_MIDDLE")),
            _from_json_data(MatchScoresForAttribute, data.get("PRIMARY_NAME_ORG")),
            _from_json_data(MatchScoresForAttribute, data.get("PRIMARY_NAME_PREFIX")),
            _from_json_data(MatchScoresForAttribute, data.get("PRIMARY_NAME_SUFFIX")),
            _from_json_data(MatchScoresForAttribute, data.get("PRIMARY_PHONE_NUMBER")),
            _from_json_data(MatchScoresForAttribute, data.get("RECORD_TYPE")),
            _from_json_data(MatchScoresForAttribute, data.get("REGISTRATION_COUNTRY")),
            _from_json_data(MatchScoresForAttribute, data.get("REGISTRATION_DATE")),
            _from_json_data(MatchScoresForAttribute, data.get("REL_ANCHOR")),
            _from_json_data(MatchScoresForAttribute, data.get("REL_ANCHOR_DOMAIN")),
            _from_json_data(MatchScoresForAttribute, data.get("REL_ANCHOR_KEY")),
            _from_json_data(MatchScoresForAttribute, data.get("REL_LINK")),
            _from_json_data(MatchScoresForAttribute, data.get("REL_POINTER")),
            _from_json_data(MatchScoresForAttribute, data.get("REL_POINTER_DOMAIN")),
            _from_json_data(MatchScoresForAttribute, data.get("REL_POINTER_KEY")),
            _from_json_data(MatchScoresForAttribute, data.get("REL_POINTER_ROLE")),
            _from_json_data(MatchScoresForAttribute, data.get("SIGNAL")),
            _from_json_data(MatchScoresForAttribute, data.get("SKYPE")),
            _from_json_data(MatchScoresForAttribute, data.get("SOCIAL_HANDLE")),
            _from_json_data(MatchScoresForAttribute, data.get("SOCIAL_NETWORK")),
            _from_json_data(MatchScoresForAttribute, data.get("SOURCE_ID")),
            _from_json_data(MatchScoresForAttribute, data.get("SSN")),
            _from_json_data(MatchScoresForAttribute, data.get("SSN_LAST4")),
            _from_json_data(MatchScoresForAttribute, data.get("SSN_NUMBER")),
            _from_json_data(MatchScoresForAttribute, data.get("TANGO")),
            _from_json_data(MatchScoresForAttribute, data.get("TAX_ID_COUNTRY")),
            _from_json_data(MatchScoresForAttribute, data.get("TAX_ID_NUMBER")),
            _from_json_data(MatchScoresForAttribute, data.get("TAX_ID_TYPE")),
            _from_json_data(MatchScoresForAttribute, data.get("TELEGRAM")),
            _from_json_data(MatchScoresForAttribute, data.get("TRUSTED_ID_NUMBER")),
            _from_json_data(MatchScoresForAttribute, data.get("TRUSTED_ID_TYPE")),
            _from_json_data(MatchScoresForAttribute, data.get("TWITTER")),
            _from_json_data(MatchScoresForAttribute, data.get("VIBER")),
            _from_json_data(MatchScoresForAttribute, data.get("WEBSITE_ADDRESS")),
            _from_json_data(MatchScoresForAttribute, data.get("WECHAT")),
            _from_json_data(MatchScoresForAttribute, data.get("WHATSAPP")),
            _from_json_data(MatchScoresForAttribute, data.get("WORK_PHONE_NUMBER")),
            _from_json_data(MatchScoresForAttribute, data.get("ZOOMROOM")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ACCOUNT_DOMAIN"] = _to_json_data(self.account_domain)
        data["ACCOUNT_NUMBER"] = _to_json_data(self.account_number)
        data["ACCT_NUM"] = _to_json_data(self.acct_num)
        data["ADDRESS"] = _to_json_data(self.address)
        data["ADDRESS_LIST"] = _to_json_data(self.address_list)
        data["ADDR_FULL"] = _to_json_data(self.addr_full)
        data["ADDR_KEY"] = _to_json_data(self.addr_key)
        data["CELL_PHONE_NUMBER"] = _to_json_data(self.cell_phone_number)
        data["CITIZENSHIP"] = _to_json_data(self.citizenship)
        data["COUNTRY_OF_ASSOCIATION"] = _to_json_data(self.country_of_association)
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["DATE_OF_BIRTH"] = _to_json_data(self.date_of_birth)
        data["DATE_OF_DEATH"] = _to_json_data(self.date_of_death)
        data["DOB"] = _to_json_data(self.dob)
        data["DOD"] = _to_json_data(self.dod)
        data["DRIVERS_LICENSE_NUMBER"] = _to_json_data(self.drivers_license_number)
        data["DRIVERS_LICENSE_STATE"] = _to_json_data(self.drivers_license_state)
        data["DRLIC"] = _to_json_data(self.drlic)
        data["DUNS_NUMBER"] = _to_json_data(self.duns_number)
        data["EMAIL"] = _to_json_data(self.email)
        data["EMAIL_ADDRESS"] = _to_json_data(self.email_address)
        data["EMAIL_KEY"] = _to_json_data(self.email_key)
        data["EMPLOYER_NAME"] = _to_json_data(self.employer_name)
        data["ENTITY_TYPE"] = _to_json_data(self.entity_type)
        data["FACEBOOK"] = _to_json_data(self.facebook)
        data["GENDER"] = _to_json_data(self.gender)
        data["GROUP_ASSN_ID_NUMBER"] = _to_json_data(self.group_assn_id_number)
        data["GROUP_ASSN_ID_TYPE"] = _to_json_data(self.group_assn_id_type)
        data["GROUP_ASSOCIATION_ORG_NAME"] = _to_json_data(self.group_association_org_name)
        data["GROUP_ASSOCIATION_TYPE"] = _to_json_data(self.group_association_type)
        data["ID_KEY"] = _to_json_data(self.id_key)
        data["INSTAGRAM"] = _to_json_data(self.instagram)
        data["LEI_NUMBER"] = _to_json_data(self.lei_number)
        data["LINKEDIN"] = _to_json_data(self.linkedin)
        data["LOAD_ID"] = _to_json_data(self.load_id)
        data["LOGIN_ID"] = _to_json_data(self.login_id)
        data["NAME"] = _to_json_data(self.name)
        data["NAME_FULL"] = _to_json_data(self.name_full)
        data["NAME_KEY"] = _to_json_data(self.name_key)
        data["NAME_LIST"] = _to_json_data(self.name_list)
        data["NATIONALITY"] = _to_json_data(self.nationality)
        data["NATIONAL_ID"] = _to_json_data(self.national_id)
        data["NATIONAL_ID_COUNTRY"] = _to_json_data(self.national_id_country)
        data["NATIONAL_ID_NUMBER"] = _to_json_data(self.national_id_number)
        data["NIN_COUNTRY"] = _to_json_data(self.nin_country)
        data["NIN_NUMBER"] = _to_json_data(self.nin_number)
        data["NPI_NUMBER"] = _to_json_data(self.npi_number)
        data["OTHER_ID_COUNTRY"] = _to_json_data(self.other_id_country)
        data["OTHER_ID_NUMBER"] = _to_json_data(self.other_id_number)
        data["OTHER_ID_TYPE"] = _to_json_data(self.other_id_type)
        data["PASSPORT"] = _to_json_data(self.passport)
        data["PASSPORTS"] = _to_json_data(self.passports)
        data["PASSPORT_COUNTRY"] = _to_json_data(self.passport_country)
        data["PASSPORT_NUMBER"] = _to_json_data(self.passport_number)
        data["PHONE"] = _to_json_data(self.phone)
        data["PHONES"] = _to_json_data(self.phones)
        data["PHONE_KEY"] = _to_json_data(self.phone_key)
        data["PLACE_OF_BIRTH"] = _to_json_data(self.place_of_birth)
        data["PRIMARY_NAME_FIRST"] = _to_json_data(self.primary_name_first)
        data["PRIMARY_NAME_LAST"] = _to_json_data(self.primary_name_last)
        data["PRIMARY_NAME_MIDDLE"] = _to_json_data(self.primary_name_middle)
        data["PRIMARY_NAME_ORG"] = _to_json_data(self.primary_name_org)
        data["PRIMARY_NAME_PREFIX"] = _to_json_data(self.primary_name_prefix)
        data["PRIMARY_NAME_SUFFIX"] = _to_json_data(self.primary_name_suffix)
        data["PRIMARY_PHONE_NUMBER"] = _to_json_data(self.primary_phone_number)
        data["RECORD_TYPE"] = _to_json_data(self.record_type)
        data["REGISTRATION_COUNTRY"] = _to_json_data(self.registration_country)
        data["REGISTRATION_DATE"] = _to_json_data(self.registration_date)
        data["REL_ANCHOR"] = _to_json_data(self.rel_anchor)
        data["REL_ANCHOR_DOMAIN"] = _to_json_data(self.rel_anchor_domain)
        data["REL_ANCHOR_KEY"] = _to_json_data(self.rel_anchor_key)
        data["REL_LINK"] = _to_json_data(self.rel_link)
        data["REL_POINTER"] = _to_json_data(self.rel_pointer)
        data["REL_POINTER_DOMAIN"] = _to_json_data(self.rel_pointer_domain)
        data["REL_POINTER_KEY"] = _to_json_data(self.rel_pointer_key)
        data["REL_POINTER_ROLE"] = _to_json_data(self.rel_pointer_role)
        data["SIGNAL"] = _to_json_data(self.signal)
        data["SKYPE"] = _to_json_data(self.skype)
        data["SOCIAL_HANDLE"] = _to_json_data(self.social_handle)
        data["SOCIAL_NETWORK"] = _to_json_data(self.social_network)
        data["SOURCE_ID"] = _to_json_data(self.source_id)
        data["SSN"] = _to_json_data(self.ssn)
        data["SSN_LAST4"] = _to_json_data(self.ssn_last4)
        data["SSN_NUMBER"] = _to_json_data(self.ssn_number)
        data["TANGO"] = _to_json_data(self.tango)
        data["TAX_ID_COUNTRY"] = _to_json_data(self.tax_id_country)
        data["TAX_ID_NUMBER"] = _to_json_data(self.tax_id_number)
        data["TAX_ID_TYPE"] = _to_json_data(self.tax_id_type)
        data["TELEGRAM"] = _to_json_data(self.telegram)
        data["TRUSTED_ID_NUMBER"] = _to_json_data(self.trusted_id_number)
        data["TRUSTED_ID_TYPE"] = _to_json_data(self.trusted_id_type)
        data["TWITTER"] = _to_json_data(self.twitter)
        data["VIBER"] = _to_json_data(self.viber)
        data["WEBSITE_ADDRESS"] = _to_json_data(self.website_address)
        data["WECHAT"] = _to_json_data(self.wechat)
        data["WHATSAPP"] = _to_json_data(self.whatsapp)
        data["WORK_PHONE_NUMBER"] = _to_json_data(self.work_phone_number)
        data["ZOOMROOM"] = _to_json_data(self.zoomroom)
        return data

@dataclass
class MatchScoresForAttribute:
    """
    No description.
    """

    value: 'List[MatchScoreForAttribute]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'MatchScoresForAttribute':
        return cls(_from_json_data(List[MatchScoreForAttribute], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class MemberRecord:
    """
    No description.
    """

    internal_id: 'int'
    """
    No description.
    """

    records: 'Records'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'MemberRecord':
        return cls(
            _from_json_data(int, data.get("INTERNAL_ID")),
            _from_json_data(Records, data.get("RECORDS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["INTERNAL_ID"] = _to_json_data(self.internal_id)
        data["RECORDS"] = _to_json_data(self.records)
        return data

@dataclass
class MemberRecords:
    """
    No description.
    """

    value: 'List[MemberRecord]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'MemberRecords':
        return cls(_from_json_data(List[MemberRecord], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class Name:
    """
    No description.
    """

    name_first: 'str'
    """
    No description.
    """

    name_full: 'str'
    """
    No description.
    """

    name_last: 'str'
    """
    No description.
    """

    name_middle: 'str'
    """
    No description.
    """

    name_org: 'str'
    """
    No description.
    """

    name_prefix: 'str'
    """
    No description.
    """

    name_suffix: 'str'
    """
    No description.
    """

    name_type: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'Name':
        return cls(
            _from_json_data(str, data.get("NAME_FIRST")),
            _from_json_data(str, data.get("NAME_FULL")),
            _from_json_data(str, data.get("NAME_LAST")),
            _from_json_data(str, data.get("NAME_MIDDLE")),
            _from_json_data(str, data.get("NAME_ORG")),
            _from_json_data(str, data.get("NAME_PREFIX")),
            _from_json_data(str, data.get("NAME_SUFFIX")),
            _from_json_data(str, data.get("NAME_TYPE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["NAME_FIRST"] = _to_json_data(self.name_first)
        data["NAME_FULL"] = _to_json_data(self.name_full)
        data["NAME_LAST"] = _to_json_data(self.name_last)
        data["NAME_MIDDLE"] = _to_json_data(self.name_middle)
        data["NAME_ORG"] = _to_json_data(self.name_org)
        data["NAME_PREFIX"] = _to_json_data(self.name_prefix)
        data["NAME_SUFFIX"] = _to_json_data(self.name_suffix)
        data["NAME_TYPE"] = _to_json_data(self.name_type)
        return data

@dataclass
class Names:
    """
    No description.
    """

    value: 'List[Name]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Names':
        return cls(_from_json_data(List[Name], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class Network:
    """
    No description.
    """

    entities: 'Entities'
    """
    No description.
    """

    entity_paths: 'EntityPaths'
    """
    No description.
    """

    max_entity_limit_reached: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'Network':
        return cls(
            _from_json_data(Entities, data.get("ENTITIES")),
            _from_json_data(EntityPaths, data.get("ENTITY_PATHS")),
            _from_json_data(str, data.get("MAX_ENTITY_LIMIT_REACHED")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITIES"] = _to_json_data(self.entities)
        data["ENTITY_PATHS"] = _to_json_data(self.entity_paths)
        data["MAX_ENTITY_LIMIT_REACHED"] = _to_json_data(self.max_entity_limit_reached)
        return data

@dataclass
class Notice:
    """
    No description.
    """

    code: 'str'
    """
    No description.
    """

    description: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'Notice':
        return cls(
            _from_json_data(str, data.get("CODE")),
            _from_json_data(str, data.get("DESCRIPTION")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CODE"] = _to_json_data(self.code)
        data["DESCRIPTION"] = _to_json_data(self.description)
        return data

@dataclass
class Notices:
    """
    No description.
    """

    value: 'List[Notice]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Notices':
        return cls(_from_json_data(List[Notice], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class Passport:
    """
    No description.
    """

    passport_country: 'str'
    """
    No description.
    """

    passport_number: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'Passport':
        return cls(
            _from_json_data(str, data.get("PASSPORT_COUNTRY")),
            _from_json_data(str, data.get("PASSPORT_NUMBER")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["PASSPORT_COUNTRY"] = _to_json_data(self.passport_country)
        data["PASSPORT_NUMBER"] = _to_json_data(self.passport_number)
        return data

@dataclass
class Passports:
    """
    No description.
    """

    value: 'List[Passport]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Passports':
        return cls(_from_json_data(List[Passport], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class Path:
    """
    No description.
    """

    entities: 'Entities'
    """
    No description.
    """

    entity_paths: 'EntityPaths'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'Path':
        return cls(
            _from_json_data(Entities, data.get("ENTITIES")),
            _from_json_data(EntityPaths, data.get("ENTITY_PATHS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITIES"] = _to_json_data(self.entities)
        data["ENTITY_PATHS"] = _to_json_data(self.entity_paths)
        return data

@dataclass
class Phone:
    """
    No description.
    """

    phone_from_date: 'str'
    """
    No description.
    """

    phone_number: 'str'
    """
    No description.
    """

    phone_thru_date: 'str'
    """
    No description.
    """

    phone_type: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'Phone':
        return cls(
            _from_json_data(str, data.get("PHONE_FROM_DATE")),
            _from_json_data(str, data.get("PHONE_NUMBER")),
            _from_json_data(str, data.get("PHONE_THRU_DATE")),
            _from_json_data(str, data.get("PHONE_TYPE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["PHONE_FROM_DATE"] = _to_json_data(self.phone_from_date)
        data["PHONE_NUMBER"] = _to_json_data(self.phone_number)
        data["PHONE_THRU_DATE"] = _to_json_data(self.phone_thru_date)
        data["PHONE_TYPE"] = _to_json_data(self.phone_type)
        return data

@dataclass
class Phones:
    """
    No description.
    """

    value: 'List[Phone]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Phones':
        return cls(_from_json_data(List[Phone], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class ProcessUmfProc:
    """
    No description.
    """

    name: 'str'
    """
    No description.
    """

    result: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'ProcessUmfProc':
        return cls(
            _from_json_data(str, data.get("NAME")),
            _from_json_data(str, data.get("RESULT")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["NAME"] = _to_json_data(self.name)
        data["RESULT"] = _to_json_data(self.result)
        return data

@dataclass
class Process:
    """
    No description.
    """

    affected_entities: 'AffectedEntities'
    """
    No description.
    """

    interesting_entities: 'InterestingEntities'
    """
    No description.
    """

    process_result: 'ProcessResult'
    """
    No description.
    """

    umf_proc: 'ProcessUmfProc'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'Process':
        return cls(
            _from_json_data(AffectedEntities, data.get("AFFECTED_ENTITIES")),
            _from_json_data(InterestingEntities, data.get("INTERESTING_ENTITIES")),
            _from_json_data(ProcessResult, data.get("PROCESS_RESULT")),
            _from_json_data(ProcessUmfProc, data.get("UMF_PROC")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["AFFECTED_ENTITIES"] = _to_json_data(self.affected_entities)
        data["INTERESTING_ENTITIES"] = _to_json_data(self.interesting_entities)
        data["PROCESS_RESULT"] = _to_json_data(self.process_result)
        data["UMF_PROC"] = _to_json_data(self.umf_proc)
        return data

@dataclass
class ProcessResultResolvedEntities:
    entity_id: 'int'
    """
    No description.
    """

    entity_name: 'str'
    """
    No description.
    """

    errule_code: 'str'
    """
    No description.
    """

    features: 'Features'
    """
    No description.
    """

    last_seen_dt: 'str'
    """
    No description.
    """

    match_key: 'str'
    """
    No description.
    """

    match_level: 'int'
    """
    No description.
    """

    match_level_code: 'str'
    """
    No description.
    """

    match_scores: 'MatchScores'
    """
    No description.
    """

    records: 'Records'
    """
    No description.
    """

    record_summary: 'RecordSummary'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'ProcessResultResolvedEntities':
        return cls(
            _from_json_data(int, data.get("ENTITY_ID")),
            _from_json_data(str, data.get("ENTITY_NAME")),
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(Features, data.get("FEATURES")),
            _from_json_data(str, data.get("LAST_SEEN_DT")),
            _from_json_data(str, data.get("MATCH_KEY")),
            _from_json_data(int, data.get("MATCH_LEVEL")),
            _from_json_data(str, data.get("MATCH_LEVEL_CODE")),
            _from_json_data(MatchScores, data.get("MATCH_SCORES")),
            _from_json_data(Records, data.get("RECORDS")),
            _from_json_data(RecordSummary, data.get("RECORD_SUMMARY")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITY_ID"] = _to_json_data(self.entity_id)
        data["ENTITY_NAME"] = _to_json_data(self.entity_name)
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["FEATURES"] = _to_json_data(self.features)
        data["LAST_SEEN_DT"] = _to_json_data(self.last_seen_dt)
        data["MATCH_KEY"] = _to_json_data(self.match_key)
        data["MATCH_LEVEL"] = _to_json_data(self.match_level)
        data["MATCH_LEVEL_CODE"] = _to_json_data(self.match_level_code)
        data["MATCH_SCORES"] = _to_json_data(self.match_scores)
        data["RECORDS"] = _to_json_data(self.records)
        data["RECORD_SUMMARY"] = _to_json_data(self.record_summary)
        return data

@dataclass
class ProcessResult:
    """
    No description.
    """

    resolved_entities: 'List[ProcessResultResolvedEntities]'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'ProcessResult':
        return cls(
            _from_json_data(List[ProcessResultResolvedEntities], data.get("RESOLVED_ENTITIES")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["RESOLVED_ENTITIES"] = _to_json_data(self.resolved_entities)
        return data

@dataclass
class ProductLicenseResponse:
    """
    No description.
    """

    billing: 'str'
    """
    No description.
    """

    contract: 'str'
    """
    No description.
    """

    customer: 'str'
    """
    No description.
    """

    expire_date: 'str'
    """
    No description.
    """

    issue_date: 'str'
    """
    No description.
    """

    license_level: 'str'
    """
    No description.
    """

    license_type: 'str'
    """
    No description.
    """

    record_limit: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'ProductLicenseResponse':
        return cls(
            _from_json_data(str, data.get("billing")),
            _from_json_data(str, data.get("contract")),
            _from_json_data(str, data.get("customer")),
            _from_json_data(str, data.get("expireDate")),
            _from_json_data(str, data.get("issueDate")),
            _from_json_data(str, data.get("licenseLevel")),
            _from_json_data(str, data.get("licenseType")),
            _from_json_data(int, data.get("recordLimit")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["billing"] = _to_json_data(self.billing)
        data["contract"] = _to_json_data(self.contract)
        data["customer"] = _to_json_data(self.customer)
        data["expireDate"] = _to_json_data(self.expire_date)
        data["issueDate"] = _to_json_data(self.issue_date)
        data["licenseLevel"] = _to_json_data(self.license_level)
        data["licenseType"] = _to_json_data(self.license_type)
        data["recordLimit"] = _to_json_data(self.record_limit)
        return data

@dataclass
class ProductVersionResponse:
    """
    No description.
    """

    build_date: 'str'
    """
    No description.
    """

    build_number: 'str'
    """
    No description.
    """

    build_version: 'str'
    """
    No description.
    """

    compatibility_version: 'CompatibilityVersion'
    """
    No description.
    """

    product_name: 'str'
    """
    No description.
    """

    schema_version: 'SchemaVersion'
    """
    No description.
    """

    version: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'ProductVersionResponse':
        return cls(
            _from_json_data(str, data.get("BUILD_DATE")),
            _from_json_data(str, data.get("BUILD_NUMBER")),
            _from_json_data(str, data.get("BUILD_VERSION")),
            _from_json_data(CompatibilityVersion, data.get("COMPATIBILITY_VERSION")),
            _from_json_data(str, data.get("PRODUCT_NAME")),
            _from_json_data(SchemaVersion, data.get("SCHEMA_VERSION")),
            _from_json_data(str, data.get("VERSION")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["BUILD_DATE"] = _to_json_data(self.build_date)
        data["BUILD_NUMBER"] = _to_json_data(self.build_number)
        data["BUILD_VERSION"] = _to_json_data(self.build_version)
        data["COMPATIBILITY_VERSION"] = _to_json_data(self.compatibility_version)
        data["PRODUCT_NAME"] = _to_json_data(self.product_name)
        data["SCHEMA_VERSION"] = _to_json_data(self.schema_version)
        data["VERSION"] = _to_json_data(self.version)
        return data

@dataclass
class RecordFeatures:
    lib_feat_id: 'int'
    """
    No description.
    """

    usage_type: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'RecordFeatures':
        return cls(
            _from_json_data(int, data.get("LIB_FEAT_ID")),
            _from_json_data(str, data.get("USAGE_TYPE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["LIB_FEAT_ID"] = _to_json_data(self.lib_feat_id)
        data["USAGE_TYPE"] = _to_json_data(self.usage_type)
        return data

@dataclass
class Record:
    """
    No description.
    """

    address_data: 'List[str]'
    """
    No description.
    """

    attribute_data: 'List[str]'
    """
    No description.
    """

    data_source: 'str'
    """
    No description.
    """

    entity_data: 'List[str]'
    """
    No description.
    """

    entity_desc: 'str'
    """
    No description.
    """

    entity_key: 'str'
    """
    No description.
    """

    entity_type: 'str'
    """
    No description.
    """

    errule_code: 'str'
    """
    No description.
    """

    features: 'List[RecordFeatures]'
    """
    No description.
    """

    identifier_data: 'List[str]'
    """
    No description.
    """

    internal_id: 'int'
    """
    No description.
    """

    json_data: 'JSONData'
    """
    No description.
    """

    last_seen_dt: 'str'
    """
    No description.
    """

    match_key: 'str'
    """
    No description.
    """

    match_level: 'int'
    """
    No description.
    """

    match_level_code: 'str'
    """
    No description.
    """

    name_data: 'List[str]'
    """
    No description.
    """

    other_data: 'List[str]'
    """
    No description.
    """

    phone_data: 'List[str]'
    """
    No description.
    """

    record_id: 'str'
    """
    No description.
    """

    relationship_data: 'List[str]'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'Record':
        return cls(
            _from_json_data(List[str], data.get("ADDRESS_DATA")),
            _from_json_data(List[str], data.get("ATTRIBUTE_DATA")),
            _from_json_data(str, data.get("DATA_SOURCE")),
            _from_json_data(List[str], data.get("ENTITY_DATA")),
            _from_json_data(str, data.get("ENTITY_DESC")),
            _from_json_data(str, data.get("ENTITY_KEY")),
            _from_json_data(str, data.get("ENTITY_TYPE")),
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(List[RecordFeatures], data.get("FEATURES")),
            _from_json_data(List[str], data.get("IDENTIFIER_DATA")),
            _from_json_data(int, data.get("INTERNAL_ID")),
            _from_json_data(JSONData, data.get("JSON_DATA")),
            _from_json_data(str, data.get("LAST_SEEN_DT")),
            _from_json_data(str, data.get("MATCH_KEY")),
            _from_json_data(int, data.get("MATCH_LEVEL")),
            _from_json_data(str, data.get("MATCH_LEVEL_CODE")),
            _from_json_data(List[str], data.get("NAME_DATA")),
            _from_json_data(List[str], data.get("OTHER_DATA")),
            _from_json_data(List[str], data.get("PHONE_DATA")),
            _from_json_data(str, data.get("RECORD_ID")),
            _from_json_data(List[str], data.get("RELATIONSHIP_DATA")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ADDRESS_DATA"] = _to_json_data(self.address_data)
        data["ATTRIBUTE_DATA"] = _to_json_data(self.attribute_data)
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["ENTITY_DATA"] = _to_json_data(self.entity_data)
        data["ENTITY_DESC"] = _to_json_data(self.entity_desc)
        data["ENTITY_KEY"] = _to_json_data(self.entity_key)
        data["ENTITY_TYPE"] = _to_json_data(self.entity_type)
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["FEATURES"] = _to_json_data(self.features)
        data["IDENTIFIER_DATA"] = _to_json_data(self.identifier_data)
        data["INTERNAL_ID"] = _to_json_data(self.internal_id)
        data["JSON_DATA"] = _to_json_data(self.json_data)
        data["LAST_SEEN_DT"] = _to_json_data(self.last_seen_dt)
        data["MATCH_KEY"] = _to_json_data(self.match_key)
        data["MATCH_LEVEL"] = _to_json_data(self.match_level)
        data["MATCH_LEVEL_CODE"] = _to_json_data(self.match_level_code)
        data["NAME_DATA"] = _to_json_data(self.name_data)
        data["OTHER_DATA"] = _to_json_data(self.other_data)
        data["PHONE_DATA"] = _to_json_data(self.phone_data)
        data["RECORD_ID"] = _to_json_data(self.record_id)
        data["RELATIONSHIP_DATA"] = _to_json_data(self.relationship_data)
        return data

@dataclass
class RecordSummary:
    """
    No description.
    """

    value: 'List[RecordSummaryElement]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'RecordSummary':
        return cls(_from_json_data(List[RecordSummaryElement], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class RecordSummaryElement:
    """
    No description.
    """

    data_source: 'str'
    """
    No description.
    """

    first_seen_dt: 'str'
    """
    No description.
    """

    last_seen_dt: 'str'
    """
    No description.
    """

    record_count: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'RecordSummaryElement':
        return cls(
            _from_json_data(str, data.get("DATA_SOURCE")),
            _from_json_data(str, data.get("FIRST_SEEN_DT")),
            _from_json_data(str, data.get("LAST_SEEN_DT")),
            _from_json_data(int, data.get("RECORD_COUNT")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["FIRST_SEEN_DT"] = _to_json_data(self.first_seen_dt)
        data["LAST_SEEN_DT"] = _to_json_data(self.last_seen_dt)
        data["RECORD_COUNT"] = _to_json_data(self.record_count)
        return data

@dataclass
class Records:
    """
    No description.
    """

    value: 'List[Record]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Records':
        return cls(_from_json_data(List[Record], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class RelatedEntities:
    """
    No description.
    """

    value: 'List[RelatedEntity]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'RelatedEntities':
        return cls(_from_json_data(List[RelatedEntity], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class RelatedEntity:
    """
    No description.
    """

    entity_id: 'int'
    """
    No description.
    """

    entity_name: 'str'
    """
    No description.
    """

    errule_code: 'str'
    """
    No description.
    """

    is_ambiguous: 'int'
    """
    No description.
    """

    is_disclosed: 'int'
    """
    No description.
    """

    last_seen_dt: 'str'
    """
    No description.
    """

    match_key: 'str'
    """
    No description.
    """

    match_level: 'int'
    """
    No description.
    """

    match_level_code: 'str'
    """
    No description.
    """

    records: 'Records'
    """
    No description.
    """

    record_summary: 'RecordSummary'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'RelatedEntity':
        return cls(
            _from_json_data(int, data.get("ENTITY_ID")),
            _from_json_data(str, data.get("ENTITY_NAME")),
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(int, data.get("IS_AMBIGUOUS")),
            _from_json_data(int, data.get("IS_DISCLOSED")),
            _from_json_data(str, data.get("LAST_SEEN_DT")),
            _from_json_data(str, data.get("MATCH_KEY")),
            _from_json_data(int, data.get("MATCH_LEVEL")),
            _from_json_data(str, data.get("MATCH_LEVEL_CODE")),
            _from_json_data(Records, data.get("RECORDS")),
            _from_json_data(RecordSummary, data.get("RECORD_SUMMARY")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITY_ID"] = _to_json_data(self.entity_id)
        data["ENTITY_NAME"] = _to_json_data(self.entity_name)
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["IS_AMBIGUOUS"] = _to_json_data(self.is_ambiguous)
        data["IS_DISCLOSED"] = _to_json_data(self.is_disclosed)
        data["LAST_SEEN_DT"] = _to_json_data(self.last_seen_dt)
        data["MATCH_KEY"] = _to_json_data(self.match_key)
        data["MATCH_LEVEL"] = _to_json_data(self.match_level)
        data["MATCH_LEVEL_CODE"] = _to_json_data(self.match_level_code)
        data["RECORDS"] = _to_json_data(self.records)
        data["RECORD_SUMMARY"] = _to_json_data(self.record_summary)
        return data

@dataclass
class Relationship:
    """
    No description.
    """

    relationship_key: 'str'
    """
    No description.
    """

    relationship_type: 'str'
    """
    No description.
    """

    rel_anchor_domain: 'str'
    """
    No description.
    """

    rel_anchor_key: 'str'
    """
    No description.
    """

    rel_pointer_domain: 'str'
    """
    No description.
    """

    rel_pointer_key: 'str'
    """
    No description.
    """

    rel_pointer_role: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'Relationship':
        return cls(
            _from_json_data(str, data.get("RELATIONSHIP_KEY")),
            _from_json_data(str, data.get("RELATIONSHIP_TYPE")),
            _from_json_data(str, data.get("REL_ANCHOR_DOMAIN")),
            _from_json_data(str, data.get("REL_ANCHOR_KEY")),
            _from_json_data(str, data.get("REL_POINTER_DOMAIN")),
            _from_json_data(str, data.get("REL_POINTER_KEY")),
            _from_json_data(str, data.get("REL_POINTER_ROLE")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["RELATIONSHIP_KEY"] = _to_json_data(self.relationship_key)
        data["RELATIONSHIP_TYPE"] = _to_json_data(self.relationship_type)
        data["REL_ANCHOR_DOMAIN"] = _to_json_data(self.rel_anchor_domain)
        data["REL_ANCHOR_KEY"] = _to_json_data(self.rel_anchor_key)
        data["REL_POINTER_DOMAIN"] = _to_json_data(self.rel_pointer_domain)
        data["REL_POINTER_KEY"] = _to_json_data(self.rel_pointer_key)
        data["REL_POINTER_ROLE"] = _to_json_data(self.rel_pointer_role)
        return data

@dataclass
class Relationships:
    """
    No description.
    """

    value: 'List[Relationship]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Relationships':
        return cls(_from_json_data(List[Relationship], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class ResolutionStep:
    """
    No description.
    """

    inbound_virtual_entity_id: 'str'
    """
    No description.
    """

    match_info: 'MatchInfo'
    """
    No description.
    """

    result_virtual_entity_id: 'str'
    """
    No description.
    """

    step: 'int'
    """
    No description.
    """

    virtual_entity: 'VirtualEntitySynopsis'
    """
    No description.
    """

    virtual_entity0: 'VirtualEntitySynopsis'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'ResolutionStep':
        return cls(
            _from_json_data(str, data.get("INBOUND_VIRTUAL_ENTITY_ID")),
            _from_json_data(MatchInfo, data.get("MATCH_INFO")),
            _from_json_data(str, data.get("RESULT_VIRTUAL_ENTITY_ID")),
            _from_json_data(int, data.get("STEP")),
            _from_json_data(VirtualEntitySynopsis, data.get("VIRTUAL_ENTITY_1")),
            _from_json_data(VirtualEntitySynopsis, data.get("VIRTUAL_ENTITY_2")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["INBOUND_VIRTUAL_ENTITY_ID"] = _to_json_data(self.inbound_virtual_entity_id)
        data["MATCH_INFO"] = _to_json_data(self.match_info)
        data["RESULT_VIRTUAL_ENTITY_ID"] = _to_json_data(self.result_virtual_entity_id)
        data["STEP"] = _to_json_data(self.step)
        data["VIRTUAL_ENTITY_1"] = _to_json_data(self.virtual_entity)
        data["VIRTUAL_ENTITY_2"] = _to_json_data(self.virtual_entity0)
        return data

@dataclass
class ResolutionSteps:
    """
    No description.
    """

    value: 'List[ResolutionStep]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'ResolutionSteps':
        return cls(_from_json_data(List[ResolutionStep], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class ResolvedEntity:
    """
    No description.
    """

    entity_id: 'int'
    """
    No description.
    """

    entity_name: 'str'
    """
    No description.
    """

    errule_code: 'str'
    """
    No description.
    """

    features: 'Features'
    """
    No description.
    """

    is_ambiguous: 'int'
    """
    No description.
    """

    is_disclosed: 'int'
    """
    No description.
    """

    last_seen_dt: 'str'
    """
    No description.
    """

    match_key: 'str'
    """
    No description.
    """

    match_level: 'int'
    """
    No description.
    """

    match_level_code: 'str'
    """
    No description.
    """

    records: 'Records'
    """
    No description.
    """

    record_summary: 'RecordSummary'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'ResolvedEntity':
        return cls(
            _from_json_data(int, data.get("ENTITY_ID")),
            _from_json_data(str, data.get("ENTITY_NAME")),
            _from_json_data(str, data.get("ERRULE_CODE")),
            _from_json_data(Features, data.get("FEATURES")),
            _from_json_data(int, data.get("IS_AMBIGUOUS")),
            _from_json_data(int, data.get("IS_DISCLOSED")),
            _from_json_data(str, data.get("LAST_SEEN_DT")),
            _from_json_data(str, data.get("MATCH_KEY")),
            _from_json_data(int, data.get("MATCH_LEVEL")),
            _from_json_data(str, data.get("MATCH_LEVEL_CODE")),
            _from_json_data(Records, data.get("RECORDS")),
            _from_json_data(RecordSummary, data.get("RECORD_SUMMARY")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITY_ID"] = _to_json_data(self.entity_id)
        data["ENTITY_NAME"] = _to_json_data(self.entity_name)
        data["ERRULE_CODE"] = _to_json_data(self.errule_code)
        data["FEATURES"] = _to_json_data(self.features)
        data["IS_AMBIGUOUS"] = _to_json_data(self.is_ambiguous)
        data["IS_DISCLOSED"] = _to_json_data(self.is_disclosed)
        data["LAST_SEEN_DT"] = _to_json_data(self.last_seen_dt)
        data["MATCH_KEY"] = _to_json_data(self.match_key)
        data["MATCH_LEVEL"] = _to_json_data(self.match_level)
        data["MATCH_LEVEL_CODE"] = _to_json_data(self.match_level_code)
        data["RECORDS"] = _to_json_data(self.records)
        data["RECORD_SUMMARY"] = _to_json_data(self.record_summary)
        return data

@dataclass
class SysOom:
    """
    No description.
    """

    felem_id: 'int'
    """
    No description.
    """

    ftype_id: 'int'
    """
    No description.
    """

    lens_id: 'int'
    """
    No description.
    """

    lib_feat_id: 'int'
    """
    No description.
    """

    lib_felem_id: 'int'
    """
    No description.
    """

    next_thresh: 'int'
    """
    No description.
    """

    oom_level: 'str'
    """
    No description.
    """

    oom_type: 'str'
    """
    No description.
    """

    thresh1_cnt: 'int'
    """
    No description.
    """

    thresh1_oom: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'SysOom':
        return cls(
            _from_json_data(int, data.get("FELEM_ID")),
            _from_json_data(int, data.get("FTYPE_ID")),
            _from_json_data(int, data.get("LENS_ID")),
            _from_json_data(int, data.get("LIB_FEAT_ID")),
            _from_json_data(int, data.get("LIB_FELEM_ID")),
            _from_json_data(int, data.get("NEXT_THRESH")),
            _from_json_data(str, data.get("OOM_LEVEL")),
            _from_json_data(str, data.get("OOM_TYPE")),
            _from_json_data(int, data.get("THRESH1_CNT")),
            _from_json_data(int, data.get("THRESH1_OOM")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FELEM_ID"] = _to_json_data(self.felem_id)
        data["FTYPE_ID"] = _to_json_data(self.ftype_id)
        data["LENS_ID"] = _to_json_data(self.lens_id)
        data["LIB_FEAT_ID"] = _to_json_data(self.lib_feat_id)
        data["LIB_FELEM_ID"] = _to_json_data(self.lib_felem_id)
        data["NEXT_THRESH"] = _to_json_data(self.next_thresh)
        data["OOM_LEVEL"] = _to_json_data(self.oom_level)
        data["OOM_TYPE"] = _to_json_data(self.oom_type)
        data["THRESH1_CNT"] = _to_json_data(self.thresh1_cnt)
        data["THRESH1_OOM"] = _to_json_data(self.thresh1_oom)
        return data

@dataclass
class SchemaVersion:
    """
    No description.
    """

    engine_schema_version: 'str'
    """
    No description.
    """

    maximum_required_schema_version: 'str'
    """
    No description.
    """

    minimum_required_schema_version: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'SchemaVersion':
        return cls(
            _from_json_data(str, data.get("ENGINE_SCHEMA_VERSION")),
            _from_json_data(str, data.get("MAXIMUM_REQUIRED_SCHEMA_VERSION")),
            _from_json_data(str, data.get("MINIMUM_REQUIRED_SCHEMA_VERSION")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENGINE_SCHEMA_VERSION"] = _to_json_data(self.engine_schema_version)
        data["MAXIMUM_REQUIRED_SCHEMA_VERSION"] = _to_json_data(self.maximum_required_schema_version)
        data["MINIMUM_REQUIRED_SCHEMA_VERSION"] = _to_json_data(self.minimum_required_schema_version)
        return data

@dataclass
class SearchResolvedEntitiesEntity:
    """
    No description.
    """

    resolved_entity: 'ResolvedEntity'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'SearchResolvedEntitiesEntity':
        return cls(
            _from_json_data(ResolvedEntity, data.get("RESOLVED_ENTITY")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["RESOLVED_ENTITY"] = _to_json_data(self.resolved_entity)
        return data

@dataclass
class SearchResolvedEntities:
    entity: 'SearchResolvedEntitiesEntity'
    """
    No description.
    """

    match_info: 'MatchInfo'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'SearchResolvedEntities':
        return cls(
            _from_json_data(SearchResolvedEntitiesEntity, data.get("ENTITY")),
            _from_json_data(MatchInfo, data.get("MATCH_INFO")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITY"] = _to_json_data(self.entity)
        data["MATCH_INFO"] = _to_json_data(self.match_info)
        return data

@dataclass
class SearchSearchStatisticsCandidateKeysFeatureTypes:
    found: 'int'
    """
    No description.
    """

    ftype_code: 'str'
    """
    No description.
    """

    generic: 'int'
    """
    No description.
    """

    not_found: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'SearchSearchStatisticsCandidateKeysFeatureTypes':
        return cls(
            _from_json_data(int, data.get("FOUND")),
            _from_json_data(str, data.get("FTYPE_CODE")),
            _from_json_data(int, data.get("GENERIC")),
            _from_json_data(int, data.get("NOT_FOUND")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FOUND"] = _to_json_data(self.found)
        data["FTYPE_CODE"] = _to_json_data(self.ftype_code)
        data["GENERIC"] = _to_json_data(self.generic)
        data["NOT_FOUND"] = _to_json_data(self.not_found)
        return data

@dataclass
class SearchSearchStatisticsCandidateKeysSummary:
    """
    No description.
    """

    found: 'int'
    """
    No description.
    """

    generic: 'int'
    """
    No description.
    """

    not_found: 'int'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'SearchSearchStatisticsCandidateKeysSummary':
        return cls(
            _from_json_data(int, data.get("FOUND")),
            _from_json_data(int, data.get("GENERIC")),
            _from_json_data(int, data.get("NOT_FOUND")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FOUND"] = _to_json_data(self.found)
        data["GENERIC"] = _to_json_data(self.generic)
        data["NOT_FOUND"] = _to_json_data(self.not_found)
        return data

@dataclass
class SearchSearchStatisticsCandidateKeys:
    """
    No description.
    """

    feature_types: 'List[SearchSearchStatisticsCandidateKeysFeatureTypes]'
    """
    No description.
    """

    summary: 'SearchSearchStatisticsCandidateKeysSummary'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'SearchSearchStatisticsCandidateKeys':
        return cls(
            _from_json_data(List[SearchSearchStatisticsCandidateKeysFeatureTypes], data.get("FEATURE_TYPES")),
            _from_json_data(SearchSearchStatisticsCandidateKeysSummary, data.get("SUMMARY")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["FEATURE_TYPES"] = _to_json_data(self.feature_types)
        data["SUMMARY"] = _to_json_data(self.summary)
        return data

@dataclass
class SearchSearchStatistics:
    candidate_keys: 'SearchSearchStatisticsCandidateKeys'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'SearchSearchStatistics':
        return cls(
            _from_json_data(SearchSearchStatisticsCandidateKeys, data.get("CANDIDATE_KEYS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["CANDIDATE_KEYS"] = _to_json_data(self.candidate_keys)
        return data

@dataclass
class Search:
    """
    No description.
    """

    resolved_entities: 'List[SearchResolvedEntities]'
    """
    No description.
    """

    search_statistics: 'List[SearchSearchStatistics]'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'Search':
        return cls(
            _from_json_data(List[SearchResolvedEntities], data.get("RESOLVED_ENTITIES")),
            _from_json_data(List[SearchSearchStatistics], data.get("SEARCH_STATISTICS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["RESOLVED_ENTITIES"] = _to_json_data(self.resolved_entities)
        data["SEARCH_STATISTICS"] = _to_json_data(self.search_statistics)
        return data

@dataclass
class VirtualEntity:
    """
    No description.
    """

    resolved_entity: 'ResolvedEntity'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'VirtualEntity':
        return cls(
            _from_json_data(ResolvedEntity, data.get("RESOLVED_ENTITY")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["RESOLVED_ENTITY"] = _to_json_data(self.resolved_entity)
        return data

@dataclass
class VirtualEntitySynopsis:
    """
    No description.
    """

    member_records: 'MemberRecords'
    """
    No description.
    """

    virtual_entity_id: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'VirtualEntitySynopsis':
        return cls(
            _from_json_data(MemberRecords, data.get("MEMBER_RECORDS")),
            _from_json_data(str, data.get("VIRTUAL_ENTITY_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["MEMBER_RECORDS"] = _to_json_data(self.member_records)
        data["VIRTUAL_ENTITY_ID"] = _to_json_data(self.virtual_entity_id)
        return data

@dataclass
class WhyEntities:
    """
    No description.
    """

    entities: 'Entities'
    """
    No description.
    """

    why_results: 'WhyResults'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'WhyEntities':
        return cls(
            _from_json_data(Entities, data.get("ENTITIES")),
            _from_json_data(WhyResults, data.get("WHY_RESULTS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITIES"] = _to_json_data(self.entities)
        data["WHY_RESULTS"] = _to_json_data(self.why_results)
        return data

@dataclass
class WhyEntity:
    """
    No description.
    """

    entities: 'Entities'
    """
    No description.
    """

    why_results: 'WhyResults'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'WhyEntity':
        return cls(
            _from_json_data(Entities, data.get("ENTITIES")),
            _from_json_data(WhyResults, data.get("WHY_RESULTS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITIES"] = _to_json_data(self.entities)
        data["WHY_RESULTS"] = _to_json_data(self.why_results)
        return data

@dataclass
class WhyRecords:
    """
    No description.
    """

    entities: 'Entities'
    """
    No description.
    """

    why_results: 'WhyResults'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'WhyRecords':
        return cls(
            _from_json_data(Entities, data.get("ENTITIES")),
            _from_json_data(WhyResults, data.get("WHY_RESULTS")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITIES"] = _to_json_data(self.entities)
        data["WHY_RESULTS"] = _to_json_data(self.why_results)
        return data

@dataclass
class WhyResult:
    """
    No description.
    """

    entity_id: 'int'
    """
    No description.
    """

    entity_id0: 'int'
    """
    No description.
    """

    focus_records: 'FocusRecords'
    """
    No description.
    """

    focus_records0: 'FocusRecords'
    """
    No description.
    """

    internal_id: 'int'
    """
    No description.
    """

    internal_id0: 'int'
    """
    No description.
    """

    match_info: 'MatchInfo'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'WhyResult':
        return cls(
            _from_json_data(int, data.get("ENTITY_ID")),
            _from_json_data(int, data.get("ENTITY_ID_2")),
            _from_json_data(FocusRecords, data.get("FOCUS_RECORDS")),
            _from_json_data(FocusRecords, data.get("FOCUS_RECORDS_2")),
            _from_json_data(int, data.get("INTERNAL_ID")),
            _from_json_data(int, data.get("INTERNAL_ID_2")),
            _from_json_data(MatchInfo, data.get("MATCH_INFO")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["ENTITY_ID"] = _to_json_data(self.entity_id)
        data["ENTITY_ID_2"] = _to_json_data(self.entity_id0)
        data["FOCUS_RECORDS"] = _to_json_data(self.focus_records)
        data["FOCUS_RECORDS_2"] = _to_json_data(self.focus_records0)
        data["INTERNAL_ID"] = _to_json_data(self.internal_id)
        data["INTERNAL_ID_2"] = _to_json_data(self.internal_id0)
        data["MATCH_INFO"] = _to_json_data(self.match_info)
        return data

@dataclass
class WhyResults:
    """
    No description.
    """

    value: 'List[WhyResult]'

    @classmethod
    def from_json_data(cls, data: Any) -> 'WhyResults':
        return cls(_from_json_data(List[WhyResult], data))

    def to_json_data(self) -> Any:
        return _to_json_data(self.value)

@dataclass
class WithInfo:
    """
    No description.
    """

    affected_entities: 'AffectedEntities'
    """
    No description.
    """

    data_source: 'str'
    """
    No description.
    """

    interesting_entities: 'InterestingEntities'
    """
    No description.
    """

    record_id: 'str'
    """
    No description.
    """


    @classmethod
    def from_json_data(cls, data: Any) -> 'WithInfo':
        return cls(
            _from_json_data(AffectedEntities, data.get("AFFECTED_ENTITIES")),
            _from_json_data(str, data.get("DATA_SOURCE")),
            _from_json_data(InterestingEntities, data.get("INTERESTING_ENTITIES")),
            _from_json_data(str, data.get("RECORD_ID")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["AFFECTED_ENTITIES"] = _to_json_data(self.affected_entities)
        data["DATA_SOURCE"] = _to_json_data(self.data_source)
        data["INTERESTING_ENTITIES"] = _to_json_data(self.interesting_entities)
        data["RECORD_ID"] = _to_json_data(self.record_id)
        return data

def _from_json_data(cls: Any, data: Any) -> Any:
    if data is None or cls in [bool, int, float, str, object] or cls is Any:
        return data
    if cls is datetime:
        return _parse_rfc3339(data)
    if get_origin(cls) is Union:
        return _from_json_data(get_args(cls)[0], data)
    if get_origin(cls) is list:
        return [_from_json_data(get_args(cls)[0], d) for d in data]
    if get_origin(cls) is dict:
        return { k: _from_json_data(get_args(cls)[1], v) for k, v in data.items() }
    return cls.from_json_data(data)

def _to_json_data(data: Any) -> Any:
    if data is None or type(data) in [bool, int, float, str, object]:
        return data
    if type(data) is datetime:
        return data.isoformat()
    if type(data) is list:
        return [_to_json_data(d) for d in data]
    if type(data) is dict:
        return { k: _to_json_data(v) for k, v in data.items() }
    return data.to_json_data()

def _parse_rfc3339(s: str) -> datetime:
    datetime_re = '^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(\.\d+)?([zZ]|((\+|-)(\d{2}):(\d{2})))$'
    match = re.match(datetime_re, s)
    if not match:
        raise ValueError('Invalid RFC3339 date/time', s)

    (year, month, day, hour, minute, second, frac_seconds, offset,
     *tz) = match.groups()

    frac_seconds_parsed = None
    if frac_seconds:
        frac_seconds_parsed = int(float(frac_seconds) * 1_000_000)
    else:
        frac_seconds_parsed = 0

    tzinfo = None
    if offset == 'Z':
        tzinfo = timezone.utc
    else:
        hours = int(tz[2])
        minutes = int(tz[3])
        sign = 1 if tz[1] == '+' else -1

        if minutes not in range(60):
            raise ValueError('minute offset must be in 0..59')

        tzinfo = timezone(timedelta(minutes=sign * (60 * hours + minutes)))

    second_parsed = int(second)
    if second_parsed == 60:
        second_parsed = 59

    return datetime(int(year), int(month), int(day), int(hour), int(minute),
                    second_parsed, frac_seconds_parsed, tzinfo)            

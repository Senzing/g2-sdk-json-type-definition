#! /usr/bin/env python3

import logging
import json
import builtins
import os
import re
from test_cases_all import TEST_CASES

is_debug = False
final_result = {}

output_file = "./go/typedef/typedef_test.go"


# -----------------------------------------------------------------------------
# --- Helpers
# -----------------------------------------------------------------------------

def canonical_json(json_string):
    json_object = json.loads(json_string)
    result = json.dumps(json_object, sort_keys=True, separators=(',', ':'))
    return result

# -----------------------------------------------------------------------------
# --- Main
# -----------------------------------------------------------------------------

# Set up logging.


logging.basicConfig(format='%(asctime)s %(message)s', level=logging.INFO)

logging.info("{0}".format("-" * 80))
logging.info("--- {0} - Begin".format(os.path.basename(__file__)))
logging.info("{0}".format("-" * 80))

# Create multi-line strings for output.

output_header = f"""// Code generated by generate-go-typedef_test.py. DO NOT EDIT.

package typedef

import (
    "context"
    "testing"
	"encoding/json"
	"github.com/stretchr/testify/assert"
)

func testError(test *testing.T, ctx context.Context, err error) {{
	if err != nil {{
		test.Log("Error:", err.Error())
		assert.FailNow(test, err.Error())
	}}
}}

// ----------------------------------------------------------------------------
// --- Test cases
// ----------------------------------------------------------------------------

"""

test_function_template = f"""
    ctx := context.TODO()
	jsonString := `{{json}}`
	jsonStruct := {{struct}}{{parens}}
	err := json.Unmarshal([]byte(jsonString), &jsonStruct)
	testError(test, ctx, err)
	_, err = json.Marshal(jsonStruct)
	testError(test, ctx, err)
    // assert.Equal(test, jsonString, string(reconstructedString))
    // assert.JSONEq(test, jsonString, string(reconstructedString))
"""

output_footer = f"""
"""

with open(output_file, "w") as file:
    file.write(output_header)
    for senzing_api_class, method_test_cases in TEST_CASES.items():
        for test_case_name, test_case_json in method_test_cases.items():
            better_test_case_name = re.sub('[^0-9a-zA-Z]+', '', test_case_name).capitalize()
            canonical_test_case_json = canonical_json(test_case_json)
            file.write("func Test{0}{1}(test *testing.T) {{".format(senzing_api_class, better_test_case_name))
            file.write(test_function_template.format(json=canonical_test_case_json, struct=senzing_api_class, parens="{}"))
            file.write("}\n\n")
    file.write(output_footer)

# Epilog

logging.info("{0}".format("-" * 80))
logging.info("--- {0} - End".format(os.path.basename(__file__)))
logging.info("{0}".format("-" * 80))
